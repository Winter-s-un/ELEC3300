
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003618  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000069c  080037fc  080037fc  000137fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e98  08003e98  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003e98  08003e98  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e98  08003e98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e98  08003e98  00013e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e9c  08003e9c  00013e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000070  08003f10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003f10  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007eb2  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c9e  00000000  00000000  00027f4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e8  00000000  00000000  00029bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f0  00000000  00000000  0002a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fed  00000000  00000000  0002aac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b88  00000000  00000000  00044ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009724c  00000000  00000000  0004e63d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5889  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002218  00000000  00000000  000e58dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000070 	.word	0x20000070
 8000200:	00000000 	.word	0x00000000
 8000204:	080037e4 	.word	0x080037e4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000074 	.word	0x20000074
 8000220:	080037e4 	.word	0x080037e4

08000224 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	e002      	b.n	8000234 <Delay+0x10>
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	3b01      	subs	r3, #1
 8000232:	607b      	str	r3, [r7, #4]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f9      	bne.n	800022e <Delay+0xa>
 800023a:	bf00      	nop
 800023c:	bf00      	nop
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000246:	b580      	push	{r7, lr}
 8000248:	b082      	sub	sp, #8
 800024a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 800024c:	2001      	movs	r0, #1
 800024e:	f000 f829 	bl	80002a4 <LCD_BackLed_Control>
	LCD_Rst();
 8000252:	f000 f80f 	bl	8000274 <LCD_Rst>
	LCD_REG_Config();
 8000256:	f000 f85f 	bl	8000318 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800025a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000264:	22f0      	movs	r2, #240	; 0xf0
 8000266:	2100      	movs	r1, #0
 8000268:	2000      	movs	r0, #0
 800026a:	f000 f9e6 	bl	800063a <LCD_Clear>
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2102      	movs	r1, #2
 800027c:	4807      	ldr	r0, [pc, #28]	; (800029c <LCD_Rst+0x28>)
 800027e:	f001 ff07 	bl	8002090 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000282:	4807      	ldr	r0, [pc, #28]	; (80002a0 <LCD_Rst+0x2c>)
 8000284:	f7ff ffce 	bl	8000224 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000288:	2201      	movs	r2, #1
 800028a:	2102      	movs	r1, #2
 800028c:	4803      	ldr	r0, [pc, #12]	; (800029c <LCD_Rst+0x28>)
 800028e:	f001 feff 	bl	8002090 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <LCD_Rst+0x2c>)
 8000294:	f7ff ffc6 	bl	8000224 <Delay>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}
 800029c:	40011800 	.word	0x40011800
 80002a0:	0002bffc 	.word	0x0002bffc

080002a4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d006      	beq.n	80002c2 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002ba:	4807      	ldr	r0, [pc, #28]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002bc:	f001 fee8 	bl	8002090 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80002c0:	e005      	b.n	80002ce <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80002c2:	2201      	movs	r2, #1
 80002c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002c8:	4803      	ldr	r0, [pc, #12]	; (80002d8 <LCD_BackLed_Control+0x34>)
 80002ca:	f001 fee1 	bl	8002090 <HAL_GPIO_WritePin>
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40011400 	.word	0x40011400

080002dc <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80002e6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80002ea:	88fb      	ldrh	r3, [r7, #6]
 80002ec:	8013      	strh	r3, [r2, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr

080002f8 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000302:	4a04      	ldr	r2, [pc, #16]	; (8000314 <LCD_Write_Data+0x1c>)
 8000304:	88fb      	ldrh	r3, [r7, #6]
 8000306:	8013      	strh	r3, [r2, #0]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	bc80      	pop	{r7}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	60020000 	.word	0x60020000

08000318 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 800031c:	20cf      	movs	r0, #207	; 0xcf
 800031e:	f7ff ffdd 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000322:	2000      	movs	r0, #0
 8000324:	f7ff ffe8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000328:	2081      	movs	r0, #129	; 0x81
 800032a:	f7ff ffe5 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800032e:	2030      	movs	r0, #48	; 0x30
 8000330:	f7ff ffe2 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000334:	20ed      	movs	r0, #237	; 0xed
 8000336:	f7ff ffd1 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800033a:	2064      	movs	r0, #100	; 0x64
 800033c:	f7ff ffdc 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000340:	2003      	movs	r0, #3
 8000342:	f7ff ffd9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000346:	2012      	movs	r0, #18
 8000348:	f7ff ffd6 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 800034c:	2081      	movs	r0, #129	; 0x81
 800034e:	f7ff ffd3 	bl	80002f8 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000352:	20e8      	movs	r0, #232	; 0xe8
 8000354:	f7ff ffc2 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000358:	2085      	movs	r0, #133	; 0x85
 800035a:	f7ff ffcd 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800035e:	2010      	movs	r0, #16
 8000360:	f7ff ffca 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000364:	2078      	movs	r0, #120	; 0x78
 8000366:	f7ff ffc7 	bl	80002f8 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800036a:	20cb      	movs	r0, #203	; 0xcb
 800036c:	f7ff ffb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000370:	2039      	movs	r0, #57	; 0x39
 8000372:	f7ff ffc1 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000376:	202c      	movs	r0, #44	; 0x2c
 8000378:	f7ff ffbe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800037c:	2000      	movs	r0, #0
 800037e:	f7ff ffbb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000382:	2034      	movs	r0, #52	; 0x34
 8000384:	f7ff ffb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000388:	2002      	movs	r0, #2
 800038a:	f7ff ffb5 	bl	80002f8 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800038e:	20f7      	movs	r0, #247	; 0xf7
 8000390:	f7ff ffa4 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000394:	2020      	movs	r0, #32
 8000396:	f7ff ffaf 	bl	80002f8 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 800039a:	20ea      	movs	r0, #234	; 0xea
 800039c:	f7ff ff9e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffa9 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80003a6:	2000      	movs	r0, #0
 80003a8:	f7ff ffa6 	bl	80002f8 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80003ac:	20b1      	movs	r0, #177	; 0xb1
 80003ae:	f7ff ff95 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80003b2:	2000      	movs	r0, #0
 80003b4:	f7ff ffa0 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80003b8:	201b      	movs	r0, #27
 80003ba:	f7ff ff9d 	bl	80002f8 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80003be:	20b6      	movs	r0, #182	; 0xb6
 80003c0:	f7ff ff8c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80003c4:	200a      	movs	r0, #10
 80003c6:	f7ff ff97 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80003ca:	20a2      	movs	r0, #162	; 0xa2
 80003cc:	f7ff ff94 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80003d0:	20c0      	movs	r0, #192	; 0xc0
 80003d2:	f7ff ff83 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff8e 	bl	80002f8 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80003dc:	20c1      	movs	r0, #193	; 0xc1
 80003de:	f7ff ff7d 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80003e2:	2011      	movs	r0, #17
 80003e4:	f7ff ff88 	bl	80002f8 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80003e8:	20c5      	movs	r0, #197	; 0xc5
 80003ea:	f7ff ff77 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80003ee:	2045      	movs	r0, #69	; 0x45
 80003f0:	f7ff ff82 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 80003f4:	2045      	movs	r0, #69	; 0x45
 80003f6:	f7ff ff7f 	bl	80002f8 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 80003fa:	20c7      	movs	r0, #199	; 0xc7
 80003fc:	f7ff ff6e 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000400:	20a2      	movs	r0, #162	; 0xa2
 8000402:	f7ff ff79 	bl	80002f8 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000406:	20f2      	movs	r0, #242	; 0xf2
 8000408:	f7ff ff68 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff ff73 	bl	80002f8 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000412:	2026      	movs	r0, #38	; 0x26
 8000414:	f7ff ff62 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff6d 	bl	80002f8 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 800041e:	20e0      	movs	r0, #224	; 0xe0
 8000420:	f7ff ff5c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000424:	200f      	movs	r0, #15
 8000426:	f7ff ff67 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800042a:	2026      	movs	r0, #38	; 0x26
 800042c:	f7ff ff64 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000430:	2024      	movs	r0, #36	; 0x24
 8000432:	f7ff ff61 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000436:	200b      	movs	r0, #11
 8000438:	f7ff ff5e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 800043c:	200e      	movs	r0, #14
 800043e:	f7ff ff5b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000442:	2009      	movs	r0, #9
 8000444:	f7ff ff58 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000448:	2054      	movs	r0, #84	; 0x54
 800044a:	f7ff ff55 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 800044e:	20a8      	movs	r0, #168	; 0xa8
 8000450:	f7ff ff52 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000454:	2046      	movs	r0, #70	; 0x46
 8000456:	f7ff ff4f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800045a:	200c      	movs	r0, #12
 800045c:	f7ff ff4c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000460:	2017      	movs	r0, #23
 8000462:	f7ff ff49 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000466:	2009      	movs	r0, #9
 8000468:	f7ff ff46 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 800046c:	200f      	movs	r0, #15
 800046e:	f7ff ff43 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000472:	2007      	movs	r0, #7
 8000474:	f7ff ff40 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000478:	2000      	movs	r0, #0
 800047a:	f7ff ff3d 	bl	80002f8 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 800047e:	20e1      	movs	r0, #225	; 0xe1
 8000480:	f7ff ff2c 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000484:	2000      	movs	r0, #0
 8000486:	f7ff ff37 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800048a:	2019      	movs	r0, #25
 800048c:	f7ff ff34 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000490:	201b      	movs	r0, #27
 8000492:	f7ff ff31 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000496:	2004      	movs	r0, #4
 8000498:	f7ff ff2e 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800049c:	2010      	movs	r0, #16
 800049e:	f7ff ff2b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80004a2:	2007      	movs	r0, #7
 80004a4:	f7ff ff28 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80004a8:	202a      	movs	r0, #42	; 0x2a
 80004aa:	f7ff ff25 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80004ae:	2047      	movs	r0, #71	; 0x47
 80004b0:	f7ff ff22 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80004b4:	2039      	movs	r0, #57	; 0x39
 80004b6:	f7ff ff1f 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80004ba:	2003      	movs	r0, #3
 80004bc:	f7ff ff1c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c0:	2006      	movs	r0, #6
 80004c2:	f7ff ff19 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80004c6:	2006      	movs	r0, #6
 80004c8:	f7ff ff16 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80004cc:	2030      	movs	r0, #48	; 0x30
 80004ce:	f7ff ff13 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80004d2:	2038      	movs	r0, #56	; 0x38
 80004d4:	f7ff ff10 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80004d8:	200f      	movs	r0, #15
 80004da:	f7ff ff0d 	bl	80002f8 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80004de:	2036      	movs	r0, #54	; 0x36
 80004e0:	f7ff fefc 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80004e4:	20c8      	movs	r0, #200	; 0xc8
 80004e6:	f7ff ff07 	bl	80002f8 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80004ea:	202a      	movs	r0, #42	; 0x2a
 80004ec:	f7ff fef6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff ff01 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004f6:	2000      	movs	r0, #0
 80004f8:	f7ff fefe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000502:	20ef      	movs	r0, #239	; 0xef
 8000504:	f7ff fef8 	bl	80002f8 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000508:	202b      	movs	r0, #43	; 0x2b
 800050a:	f7ff fee7 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef2 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000514:	2000      	movs	r0, #0
 8000516:	f7ff feef 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800051a:	2001      	movs	r0, #1
 800051c:	f7ff feec 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000520:	203f      	movs	r0, #63	; 0x3f
 8000522:	f7ff fee9 	bl	80002f8 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000526:	203a      	movs	r0, #58	; 0x3a
 8000528:	f7ff fed8 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 800052c:	2055      	movs	r0, #85	; 0x55
 800052e:	f7ff fee3 	bl	80002f8 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000532:	2011      	movs	r0, #17
 8000534:	f7ff fed2 	bl	80002dc <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000538:	4803      	ldr	r0, [pc, #12]	; (8000548 <LCD_REG_Config+0x230>)
 800053a:	f7ff fe73 	bl	8000224 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 800053e:	2029      	movs	r0, #41	; 0x29
 8000540:	f7ff fecc 	bl	80002dc <LCD_Write_Cmd>
	
	
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	0002bffc 	.word	0x0002bffc

0800054c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4604      	mov	r4, r0
 8000554:	4608      	mov	r0, r1
 8000556:	4611      	mov	r1, r2
 8000558:	461a      	mov	r2, r3
 800055a:	4623      	mov	r3, r4
 800055c:	80fb      	strh	r3, [r7, #6]
 800055e:	4603      	mov	r3, r0
 8000560:	80bb      	strh	r3, [r7, #4]
 8000562:	460b      	mov	r3, r1
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	4613      	mov	r3, r2
 8000568:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800056a:	202a      	movs	r0, #42	; 0x2a
 800056c:	f7ff feb6 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000570:	88fb      	ldrh	r3, [r7, #6]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f7ff febe 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b29b      	uxth	r3, r3
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff feb8 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000588:	88fa      	ldrh	r2, [r7, #6]
 800058a:	887b      	ldrh	r3, [r7, #2]
 800058c:	4413      	add	r3, r2
 800058e:	3b01      	subs	r3, #1
 8000590:	121b      	asrs	r3, r3, #8
 8000592:	b29b      	uxth	r3, r3
 8000594:	4618      	mov	r0, r3
 8000596:	f7ff feaf 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 800059a:	88fa      	ldrh	r2, [r7, #6]
 800059c:	887b      	ldrh	r3, [r7, #2]
 800059e:	4413      	add	r3, r2
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	3b01      	subs	r3, #1
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	b29b      	uxth	r3, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fea4 	bl	80002f8 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80005b0:	202b      	movs	r0, #43	; 0x2b
 80005b2:	f7ff fe93 	bl	80002dc <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80005b6:	88bb      	ldrh	r3, [r7, #4]
 80005b8:	0a1b      	lsrs	r3, r3, #8
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f7ff fe9b 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80005c2:	88bb      	ldrh	r3, [r7, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe95 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80005ce:	88ba      	ldrh	r2, [r7, #4]
 80005d0:	883b      	ldrh	r3, [r7, #0]
 80005d2:	4413      	add	r3, r2
 80005d4:	3b01      	subs	r3, #1
 80005d6:	121b      	asrs	r3, r3, #8
 80005d8:	b29b      	uxth	r3, r3
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe8c 	bl	80002f8 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80005e0:	88ba      	ldrh	r2, [r7, #4]
 80005e2:	883b      	ldrh	r3, [r7, #0]
 80005e4:	4413      	add	r3, r2
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	3b01      	subs	r3, #1
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff fe81 	bl	80002f8 <LCD_Write_Data>
	
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd90      	pop	{r4, r7, pc}

080005fe <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b084      	sub	sp, #16
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 800060e:	202c      	movs	r0, #44	; 0x2c
 8000610:	f7ff fe64 	bl	80002dc <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000614:	2300      	movs	r3, #0
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e006      	b.n	8000628 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800061a:	887b      	ldrh	r3, [r7, #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe6b 	bl	80002f8 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	3301      	adds	r3, #1
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f4      	bcc.n	800061a <LCD_FillColor+0x1c>
		
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800063a:	b590      	push	{r4, r7, lr}
 800063c:	b083      	sub	sp, #12
 800063e:	af00      	add	r7, sp, #0
 8000640:	4604      	mov	r4, r0
 8000642:	4608      	mov	r0, r1
 8000644:	4611      	mov	r1, r2
 8000646:	461a      	mov	r2, r3
 8000648:	4623      	mov	r3, r4
 800064a:	80fb      	strh	r3, [r7, #6]
 800064c:	4603      	mov	r3, r0
 800064e:	80bb      	strh	r3, [r7, #4]
 8000650:	460b      	mov	r3, r1
 8000652:	807b      	strh	r3, [r7, #2]
 8000654:	4613      	mov	r3, r2
 8000656:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000658:	883b      	ldrh	r3, [r7, #0]
 800065a:	887a      	ldrh	r2, [r7, #2]
 800065c:	88b9      	ldrh	r1, [r7, #4]
 800065e:	88f8      	ldrh	r0, [r7, #6]
 8000660:	f7ff ff74 	bl	800054c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000664:	887b      	ldrh	r3, [r7, #2]
 8000666:	883a      	ldrh	r2, [r7, #0]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	8b3b      	ldrh	r3, [r7, #24]
 8000670:	4619      	mov	r1, r3
 8000672:	4610      	mov	r0, r2
 8000674:	f7ff ffc3 	bl	80005fe <LCD_FillColor>
	
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	80fb      	strh	r3, [r7, #6]
 800068a:	460b      	mov	r3, r1
 800068c:	80bb      	strh	r3, [r7, #4]
 800068e:	4613      	mov	r3, r2
 8000690:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000692:	78fb      	ldrb	r3, [r7, #3]
 8000694:	3b20      	subs	r3, #32
 8000696:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000698:	88b9      	ldrh	r1, [r7, #4]
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	2310      	movs	r3, #16
 800069e:	2208      	movs	r2, #8
 80006a0:	f7ff ff54 	bl	800054c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f7ff fe19 	bl	80002dc <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]
 80006ae:	e023      	b.n	80006f8 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 80006b0:	7b3a      	ldrb	r2, [r7, #12]
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	4914      	ldr	r1, [pc, #80]	; (8000708 <LCD_DrawChar+0x88>)
 80006b6:	0112      	lsls	r2, r2, #4
 80006b8:	440a      	add	r2, r1
 80006ba:	4413      	add	r3, r2
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006c0:	2300      	movs	r3, #0
 80006c2:	737b      	strb	r3, [r7, #13]
 80006c4:	e012      	b.n	80006ec <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	f003 0301 	and.w	r3, r3, #1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d003      	beq.n	80006d8 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 80006d0:	201f      	movs	r0, #31
 80006d2:	f7ff fe11 	bl	80002f8 <LCD_Write_Data>
 80006d6:	e003      	b.n	80006e0 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 80006d8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80006dc:	f7ff fe0c 	bl	80002f8 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	3301      	adds	r3, #1
 80006ea:	737b      	strb	r3, [r7, #13]
 80006ec:	7b7b      	ldrb	r3, [r7, #13]
 80006ee:	2b07      	cmp	r3, #7
 80006f0:	d9e9      	bls.n	80006c6 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 80006f2:	7bbb      	ldrb	r3, [r7, #14]
 80006f4:	3301      	adds	r3, #1
 80006f6:	73bb      	strb	r3, [r7, #14]
 80006f8:	7bbb      	ldrb	r3, [r7, #14]
 80006fa:	2b0f      	cmp	r3, #15
 80006fc:	d9d8      	bls.n	80006b0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	0800385c 	.word	0x0800385c

0800070c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	603a      	str	r2, [r7, #0]
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	460b      	mov	r3, r1
 800071a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800071c:	e01c      	b.n	8000758 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800071e:	88fb      	ldrh	r3, [r7, #6]
 8000720:	2be8      	cmp	r3, #232	; 0xe8
 8000722:	d904      	bls.n	800072e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000724:	2300      	movs	r3, #0
 8000726:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	3310      	adds	r3, #16
 800072c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800072e:	88bb      	ldrh	r3, [r7, #4]
 8000730:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000734:	d903      	bls.n	800073e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000736:	2300      	movs	r3, #0
 8000738:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800073a:	2300      	movs	r3, #0
 800073c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	781a      	ldrb	r2, [r3, #0]
 8000742:	88b9      	ldrh	r1, [r7, #4]
 8000744:	88fb      	ldrh	r3, [r7, #6]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff9a 	bl	8000680 <LCD_DrawChar>
		
		pStr ++;
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	3301      	adds	r3, #1
 8000750:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	3308      	adds	r3, #8
 8000756:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	781b      	ldrb	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d1de      	bne.n	800071e <LCD_DrawString+0x12>
		
	}
	
}
 8000760:	bf00      	nop
 8000762:	bf00      	nop
 8000764:	3708      	adds	r7, #8
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b088      	sub	sp, #32
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000772:	f000 fc7b 	bl	800106c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000776:	f000 f901 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077a:	f000 f9d9 	bl	8000b30 <MX_GPIO_Init>
  MX_FSMC_Init();
 800077e:	f000 fa7d 	bl	8000c7c <MX_FSMC_Init>
  MX_ADC1_Init();
 8000782:	f000 f959 	bl	8000a38 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000786:	f000 f995 	bl	8000ab4 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1);
 800078a:	486e      	ldr	r0, [pc, #440]	; (8000944 <main+0x1d8>)
 800078c:	f001 f932 	bl	80019f4 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8000790:	486d      	ldr	r0, [pc, #436]	; (8000948 <main+0x1dc>)
 8000792:	f001 f92f 	bl	80019f4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start(&hadc2);
 8000796:	486c      	ldr	r0, [pc, #432]	; (8000948 <main+0x1dc>)
 8000798:	f000 fdd8 	bl	800134c <HAL_ADC_Start>

  LCD_INIT();
 800079c:	f7ff fd53 	bl	8000246 <LCD_INIT>

	  /* USER CODE END WHILE */


	  /* USER CODE BEGIN 3 */
      LCD_DrawString(150, 20, "HEX");
 80007a0:	4a6a      	ldr	r2, [pc, #424]	; (800094c <main+0x1e0>)
 80007a2:	2114      	movs	r1, #20
 80007a4:	2096      	movs	r0, #150	; 0x96
 80007a6:	f7ff ffb1 	bl	800070c <LCD_DrawString>
      LCD_DrawString(100, 20, "DEC");
 80007aa:	4a69      	ldr	r2, [pc, #420]	; (8000950 <main+0x1e4>)
 80007ac:	2114      	movs	r1, #20
 80007ae:	2064      	movs	r0, #100	; 0x64
 80007b0:	f7ff ffac 	bl	800070c <LCD_DrawString>
      LCD_DrawString(10, 40, "ADC Value:");
 80007b4:	4a67      	ldr	r2, [pc, #412]	; (8000954 <main+0x1e8>)
 80007b6:	2128      	movs	r1, #40	; 0x28
 80007b8:	200a      	movs	r0, #10
 80007ba:	f7ff ffa7 	bl	800070c <LCD_DrawString>
      LCD_DrawString(10, 60, "ADC Value:");
 80007be:	4a65      	ldr	r2, [pc, #404]	; (8000954 <main+0x1e8>)
 80007c0:	213c      	movs	r1, #60	; 0x3c
 80007c2:	200a      	movs	r0, #10
 80007c4:	f7ff ffa2 	bl	800070c <LCD_DrawString>
//      if(adc1_value < 1000 || adc2_value < 1000){
//    	  LCD_Clear(0, 0, 240, 320, WHITE);
//      }
    if (isrFlag)
 80007c8:	4b63      	ldr	r3, [pc, #396]	; (8000958 <main+0x1ec>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d036      	beq.n	800083e <main+0xd2>
    {
      HAL_ADC_Start(&hadc1);
 80007d0:	485c      	ldr	r0, [pc, #368]	; (8000944 <main+0x1d8>)
 80007d2:	f000 fdbb 	bl	800134c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 1000);
 80007d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007da:	485a      	ldr	r0, [pc, #360]	; (8000944 <main+0x1d8>)
 80007dc:	f000 fe64 	bl	80014a8 <HAL_ADC_PollForConversion>
      adc1_value = HAL_ADC_GetValue(&hadc1);
 80007e0:	4858      	ldr	r0, [pc, #352]	; (8000944 <main+0x1d8>)
 80007e2:	f000 ff67 	bl	80016b4 <HAL_ADC_GetValue>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a5c      	ldr	r2, [pc, #368]	; (800095c <main+0x1f0>)
 80007ea:	6013      	str	r3, [r2, #0]
      char buffer[4];

      sprintf(buffer, "%d", adc1_value);
 80007ec:	4b5b      	ldr	r3, [pc, #364]	; (800095c <main+0x1f0>)
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	495a      	ldr	r1, [pc, #360]	; (8000960 <main+0x1f4>)
 80007f6:	4618      	mov	r0, r3
 80007f8:	f002 fb7a 	bl	8002ef0 <siprintf>
      LCD_DrawString(100, 40, "    ");
 80007fc:	4a59      	ldr	r2, [pc, #356]	; (8000964 <main+0x1f8>)
 80007fe:	2128      	movs	r1, #40	; 0x28
 8000800:	2064      	movs	r0, #100	; 0x64
 8000802:	f7ff ff83 	bl	800070c <LCD_DrawString>
      LCD_DrawString(100, 40, buffer);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	461a      	mov	r2, r3
 800080c:	2128      	movs	r1, #40	; 0x28
 800080e:	2064      	movs	r0, #100	; 0x64
 8000810:	f7ff ff7c 	bl	800070c <LCD_DrawString>
      char buffer1[10];
      sprintf(buffer1, " 0x%x", adc1_value);
 8000814:	4b51      	ldr	r3, [pc, #324]	; (800095c <main+0x1f0>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	463b      	mov	r3, r7
 800081a:	4953      	ldr	r1, [pc, #332]	; (8000968 <main+0x1fc>)
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fb67 	bl	8002ef0 <siprintf>
      LCD_DrawString(160, 40, "           ");
 8000822:	4a52      	ldr	r2, [pc, #328]	; (800096c <main+0x200>)
 8000824:	2128      	movs	r1, #40	; 0x28
 8000826:	20a0      	movs	r0, #160	; 0xa0
 8000828:	f7ff ff70 	bl	800070c <LCD_DrawString>
      LCD_DrawString(150, 40, buffer1);
 800082c:	463b      	mov	r3, r7
 800082e:	461a      	mov	r2, r3
 8000830:	2128      	movs	r1, #40	; 0x28
 8000832:	2096      	movs	r0, #150	; 0x96
 8000834:	f7ff ff6a 	bl	800070c <LCD_DrawString>
      isrFlag = 0;
 8000838:	4b47      	ldr	r3, [pc, #284]	; (8000958 <main+0x1ec>)
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
    }

    HAL_ADC_PollForConversion(&hadc2, 1000);
 800083e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000842:	4841      	ldr	r0, [pc, #260]	; (8000948 <main+0x1dc>)
 8000844:	f000 fe30 	bl	80014a8 <HAL_ADC_PollForConversion>
    adc2_value = HAL_ADC_GetValue(&hadc2);
 8000848:	483f      	ldr	r0, [pc, #252]	; (8000948 <main+0x1dc>)
 800084a:	f000 ff33 	bl	80016b4 <HAL_ADC_GetValue>
 800084e:	4603      	mov	r3, r0
 8000850:	4a47      	ldr	r2, [pc, #284]	; (8000970 <main+0x204>)
 8000852:	6013      	str	r3, [r2, #0]
    
    char buffer2[4];
    LCD_DrawString(100, 60, "    ");
 8000854:	4a43      	ldr	r2, [pc, #268]	; (8000964 <main+0x1f8>)
 8000856:	213c      	movs	r1, #60	; 0x3c
 8000858:	2064      	movs	r0, #100	; 0x64
 800085a:	f7ff ff57 	bl	800070c <LCD_DrawString>
    LCD_DrawString(100, 60, buffer2);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	461a      	mov	r2, r3
 8000864:	213c      	movs	r1, #60	; 0x3c
 8000866:	2064      	movs	r0, #100	; 0x64
 8000868:	f7ff ff50 	bl	800070c <LCD_DrawString>
    sprintf(buffer2, "%d", adc2_value);
 800086c:	4b40      	ldr	r3, [pc, #256]	; (8000970 <main+0x204>)
 800086e:	681a      	ldr	r2, [r3, #0]
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	493a      	ldr	r1, [pc, #232]	; (8000960 <main+0x1f4>)
 8000876:	4618      	mov	r0, r3
 8000878:	f002 fb3a 	bl	8002ef0 <siprintf>
    char buffer3[10];
    sprintf(buffer3, " 0x%x", adc2_value);
 800087c:	4b3c      	ldr	r3, [pc, #240]	; (8000970 <main+0x204>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	f107 0310 	add.w	r3, r7, #16
 8000884:	4938      	ldr	r1, [pc, #224]	; (8000968 <main+0x1fc>)
 8000886:	4618      	mov	r0, r3
 8000888:	f002 fb32 	bl	8002ef0 <siprintf>
    LCD_DrawString(160, 60, "          ");
 800088c:	4a39      	ldr	r2, [pc, #228]	; (8000974 <main+0x208>)
 800088e:	213c      	movs	r1, #60	; 0x3c
 8000890:	20a0      	movs	r0, #160	; 0xa0
 8000892:	f7ff ff3b 	bl	800070c <LCD_DrawString>
    LCD_DrawString(150, 60, buffer3);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	461a      	mov	r2, r3
 800089c:	213c      	movs	r1, #60	; 0x3c
 800089e:	2096      	movs	r0, #150	; 0x96
 80008a0:	f7ff ff34 	bl	800070c <LCD_DrawString>
    HAL_Delay(100);
 80008a4:	2064      	movs	r0, #100	; 0x64
 80008a6:	f000 fc43 	bl	8001130 <HAL_Delay>


    if (adc2_value < 1300) {
 80008aa:	4b31      	ldr	r3, [pc, #196]	; (8000970 <main+0x204>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f240 5213 	movw	r2, #1299	; 0x513
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d805      	bhi.n	80008c2 <main+0x156>
      HAL_GPIO_WritePin(GPIOB, B_Pin|G_Pin|R_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2123      	movs	r1, #35	; 0x23
 80008ba:	482f      	ldr	r0, [pc, #188]	; (8000978 <main+0x20c>)
 80008bc:	f001 fbe8 	bl	8002090 <HAL_GPIO_WritePin>
 80008c0:	e76e      	b.n	80007a0 <main+0x34>
    }
    else if(adc2_value < 2200) {
 80008c2:	4b2b      	ldr	r3, [pc, #172]	; (8000970 <main+0x204>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f640 0297 	movw	r2, #2199	; 0x897
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d80a      	bhi.n	80008e4 <main+0x178>
      HAL_GPIO_WritePin(GPIOB, B_Pin|G_Pin, GPIO_PIN_SET);
 80008ce:	2201      	movs	r2, #1
 80008d0:	2103      	movs	r1, #3
 80008d2:	4829      	ldr	r0, [pc, #164]	; (8000978 <main+0x20c>)
 80008d4:	f001 fbdc 	bl	8002090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, R_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2120      	movs	r1, #32
 80008dc:	4826      	ldr	r0, [pc, #152]	; (8000978 <main+0x20c>)
 80008de:	f001 fbd7 	bl	8002090 <HAL_GPIO_WritePin>
 80008e2:	e75d      	b.n	80007a0 <main+0x34>

    }
    else if(adc2_value < 2700) {
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <main+0x204>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f640 228b 	movw	r2, #2699	; 0xa8b
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d80a      	bhi.n	8000906 <main+0x19a>

      HAL_GPIO_WritePin(GPIOB, G_Pin|R_Pin, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2122      	movs	r1, #34	; 0x22
 80008f4:	4820      	ldr	r0, [pc, #128]	; (8000978 <main+0x20c>)
 80008f6:	f001 fbcb 	bl	8002090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, B_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2101      	movs	r1, #1
 80008fe:	481e      	ldr	r0, [pc, #120]	; (8000978 <main+0x20c>)
 8000900:	f001 fbc6 	bl	8002090 <HAL_GPIO_WritePin>
 8000904:	e74c      	b.n	80007a0 <main+0x34>
    }
    else if(adc2_value < 3700) {
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <main+0x204>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f640 6273 	movw	r2, #3699	; 0xe73
 800090e:	4293      	cmp	r3, r2
 8000910:	d80a      	bhi.n	8000928 <main+0x1bc>
      HAL_GPIO_WritePin(GPIOB, B_Pin|R_Pin, GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2121      	movs	r1, #33	; 0x21
 8000916:	4818      	ldr	r0, [pc, #96]	; (8000978 <main+0x20c>)
 8000918:	f001 fbba 	bl	8002090 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, G_Pin, GPIO_PIN_RESET);
 800091c:	2200      	movs	r2, #0
 800091e:	2102      	movs	r1, #2
 8000920:	4815      	ldr	r0, [pc, #84]	; (8000978 <main+0x20c>)
 8000922:	f001 fbb5 	bl	8002090 <HAL_GPIO_WritePin>
 8000926:	e73b      	b.n	80007a0 <main+0x34>

    }
    else if(adc2_value >= 3700) {
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <main+0x204>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f640 6273 	movw	r2, #3699	; 0xe73
 8000930:	4293      	cmp	r3, r2
 8000932:	f67f af35 	bls.w	80007a0 <main+0x34>
      HAL_GPIO_WritePin(GPIOB, B_Pin|G_Pin|R_Pin, GPIO_PIN_SET);
 8000936:	2201      	movs	r2, #1
 8000938:	2123      	movs	r1, #35	; 0x23
 800093a:	480f      	ldr	r0, [pc, #60]	; (8000978 <main+0x20c>)
 800093c:	f001 fba8 	bl	8002090 <HAL_GPIO_WritePin>
  {
 8000940:	e72e      	b.n	80007a0 <main+0x34>
 8000942:	bf00      	nop
 8000944:	2000008c 	.word	0x2000008c
 8000948:	200000bc 	.word	0x200000bc
 800094c:	080037fc 	.word	0x080037fc
 8000950:	08003800 	.word	0x08003800
 8000954:	08003804 	.word	0x08003804
 8000958:	20000140 	.word	0x20000140
 800095c:	20000134 	.word	0x20000134
 8000960:	08003810 	.word	0x08003810
 8000964:	08003814 	.word	0x08003814
 8000968:	0800381c 	.word	0x0800381c
 800096c:	08003824 	.word	0x08003824
 8000970:	20000138 	.word	0x20000138
 8000974:	08003830 	.word	0x08003830
 8000978:	40010c00 	.word	0x40010c00

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b096      	sub	sp, #88	; 0x58
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000986:	2228      	movs	r2, #40	; 0x28
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f002 faa8 	bl	8002ee0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]
 80009a8:	609a      	str	r2, [r3, #8]
 80009aa:	60da      	str	r2, [r3, #12]
 80009ac:	611a      	str	r2, [r3, #16]
 80009ae:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009b0:	2301      	movs	r3, #1
 80009b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80009ba:	2300      	movs	r3, #0
 80009bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009be:	2301      	movs	r3, #1
 80009c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c2:	2302      	movs	r3, #2
 80009c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80009d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009d6:	4618      	mov	r0, r3
 80009d8:	f001 fb94 	bl	8002104 <HAL_RCC_OscConfig>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80009e2:	f000 f9af 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009e6:	230f      	movs	r3, #15
 80009e8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ee:	2300      	movs	r3, #0
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	2102      	movs	r1, #2
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fe00 	bl	8002608 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a0e:	f000 f999 	bl	8000d44 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a12:	2302      	movs	r3, #2
 8000a14:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000a16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a1a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 ff76 	bl	8002910 <HAL_RCCEx_PeriphCLKConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a2a:	f000 f98b 	bl	8000d44 <Error_Handler>
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3758      	adds	r7, #88	; 0x58
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b084      	sub	sp, #16
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a4a:	4a19      	ldr	r2, [pc, #100]	; (8000ab0 <MX_ADC1_Init+0x78>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a62:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000a66:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a76:	f000 fb7f 	bl	8001178 <HAL_ADC_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a80:	f000 f960 	bl	8000d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a84:	2305      	movs	r3, #5
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000a8c:	2305      	movs	r3, #5
 8000a8e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_ADC1_Init+0x74>)
 8000a96:	f000 fe19 	bl	80016cc <HAL_ADC_ConfigChannel>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000aa0:	f000 f950 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000aa4:	bf00      	nop
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000008c 	.word	0x2000008c
 8000ab0:	40012400 	.word	0x40012400

08000ab4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <MX_ADC2_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000ade:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ae2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000af2:	f000 fb41 	bl	8001178 <HAL_ADC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 f922 	bl	8000d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b00:	2305      	movs	r3, #5
 8000b02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b08:	2305      	movs	r3, #5
 8000b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_ADC2_Init+0x74>)
 8000b12:	f000 fddb 	bl	80016cc <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000b1c:	f000 f912 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000bc 	.word	0x200000bc
 8000b2c:	40012800 	.word	0x40012800

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b44:	4b47      	ldr	r3, [pc, #284]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a46      	ldr	r2, [pc, #280]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b44      	ldr	r3, [pc, #272]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b41      	ldr	r3, [pc, #260]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a40      	ldr	r2, [pc, #256]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b62:	f043 0304 	orr.w	r3, r3, #4
 8000b66:	6193      	str	r3, [r2, #24]
 8000b68:	4b3e      	ldr	r3, [pc, #248]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	f003 0304 	and.w	r3, r3, #4
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b74:	4b3b      	ldr	r3, [pc, #236]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a3a      	ldr	r2, [pc, #232]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b38      	ldr	r3, [pc, #224]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f003 0308 	and.w	r3, r3, #8
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8c:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a34      	ldr	r2, [pc, #208]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b32      	ldr	r3, [pc, #200]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba4:	4b2f      	ldr	r3, [pc, #188]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	4a2e      	ldr	r2, [pc, #184]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000baa:	f043 0320 	orr.w	r3, r3, #32
 8000bae:	6193      	str	r3, [r2, #24]
 8000bb0:	4b2c      	ldr	r3, [pc, #176]	; (8000c64 <MX_GPIO_Init+0x134>)
 8000bb2:	699b      	ldr	r3, [r3, #24]
 8000bb4:	f003 0320 	and.w	r3, r3, #32
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, B_Pin|G_Pin|R_Pin, GPIO_PIN_SET);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2123      	movs	r1, #35	; 0x23
 8000bc0:	4829      	ldr	r0, [pc, #164]	; (8000c68 <MX_GPIO_Init+0x138>)
 8000bc2:	f001 fa65 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bcc:	4827      	ldr	r0, [pc, #156]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000bce:	f001 fa5f 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2102      	movs	r1, #2
 8000bd6:	4826      	ldr	r0, [pc, #152]	; (8000c70 <MX_GPIO_Init+0x140>)
 8000bd8:	f001 fa5a 	bl	8002090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_GPIO_Init+0x144>)
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4821      	ldr	r0, [pc, #132]	; (8000c78 <MX_GPIO_Init+0x148>)
 8000bf2:	f001 f8b9 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pins : B_Pin G_Pin R_Pin */
  GPIO_InitStruct.Pin = B_Pin|G_Pin|R_Pin;
 8000bf6:	2323      	movs	r3, #35	; 0x23
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	f107 0318 	add.w	r3, r7, #24
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4816      	ldr	r0, [pc, #88]	; (8000c68 <MX_GPIO_Init+0x138>)
 8000c0e:	f001 f8ab 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c20:	2303      	movs	r3, #3
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000c24:	f107 0318 	add.w	r3, r7, #24
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4810      	ldr	r0, [pc, #64]	; (8000c6c <MX_GPIO_Init+0x13c>)
 8000c2c:	f001 f89c 	bl	8001d68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000c30:	2302      	movs	r3, #2
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 0318 	add.w	r3, r7, #24
 8000c44:	4619      	mov	r1, r3
 8000c46:	480a      	ldr	r0, [pc, #40]	; (8000c70 <MX_GPIO_Init+0x140>)
 8000c48:	f001 f88e 	bl	8001d68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2100      	movs	r1, #0
 8000c50:	2028      	movs	r0, #40	; 0x28
 8000c52:	f001 f852 	bl	8001cfa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c56:	2028      	movs	r0, #40	; 0x28
 8000c58:	f001 f86b 	bl	8001d32 <HAL_NVIC_EnableIRQ>

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	; 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40010c00 	.word	0x40010c00
 8000c6c:	40011400 	.word	0x40011400
 8000c70:	40011800 	.word	0x40011800
 8000c74:	10110000 	.word	0x10110000
 8000c78:	40011000 	.word	0x40011000

08000c7c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]
 8000c92:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c94:	4b28      	ldr	r3, [pc, #160]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000c96:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c9a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000c9e:	4a27      	ldr	r2, [pc, #156]	; (8000d3c <MX_FSMC_Init+0xc0>)
 8000ca0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000ca2:	4b25      	ldr	r3, [pc, #148]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000cae:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cb6:	2210      	movs	r2, #16
 8000cb8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000ce0:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000ce6:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000cf2:	230f      	movs	r3, #15
 8000cf4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000cfa:	23ff      	movs	r3, #255	; 0xff
 8000cfc:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000cfe:	230f      	movs	r3, #15
 8000d00:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000d02:	2310      	movs	r3, #16
 8000d04:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000d06:	2311      	movs	r3, #17
 8000d08:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	4619      	mov	r1, r3
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <MX_FSMC_Init+0xbc>)
 8000d16:	f001 ff95 	bl	8002c44 <HAL_SRAM_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000d20:	f000 f810 	bl	8000d44 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_FSMC_Init+0xc4>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	4a05      	ldr	r2, [pc, #20]	; (8000d40 <MX_FSMC_Init+0xc4>)
 8000d2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d2e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000d30:	bf00      	nop
 8000d32:	3720      	adds	r7, #32
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	200000ec 	.word	0x200000ec
 8000d3c:	a0000104 	.word	0xa0000104
 8000d40:	40010000 	.word	0x40010000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	e7fe      	b.n	8000d4c <Error_Handler+0x8>
	...

08000d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d56:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_MspInit+0x5c>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	4a14      	ldr	r2, [pc, #80]	; (8000dac <HAL_MspInit+0x5c>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6193      	str	r3, [r2, #24]
 8000d62:	4b12      	ldr	r3, [pc, #72]	; (8000dac <HAL_MspInit+0x5c>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <HAL_MspInit+0x5c>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	4a0e      	ldr	r2, [pc, #56]	; (8000dac <HAL_MspInit+0x5c>)
 8000d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d78:	61d3      	str	r3, [r2, #28]
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_MspInit+0x5c>)
 8000d7c:	69db      	ldr	r3, [r3, #28]
 8000d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_MspInit+0x60>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_MspInit+0x60>)
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr
 8000dac:	40021000 	.word	0x40021000
 8000db0:	40010000 	.word	0x40010000

08000db4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0318 	add.w	r3, r7, #24
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a28      	ldr	r2, [pc, #160]	; (8000e70 <HAL_ADC_MspInit+0xbc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d122      	bne.n	8000e1a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dd4:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	4a26      	ldr	r2, [pc, #152]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000dda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dde:	6193      	str	r3, [r2, #24]
 8000de0:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	4a20      	ldr	r2, [pc, #128]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	6193      	str	r3, [r2, #24]
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	613b      	str	r3, [r7, #16]
 8000e02:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e04:	2320      	movs	r3, #32
 8000e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0318 	add.w	r3, r7, #24
 8000e10:	4619      	mov	r1, r3
 8000e12:	4819      	ldr	r0, [pc, #100]	; (8000e78 <HAL_ADC_MspInit+0xc4>)
 8000e14:	f000 ffa8 	bl	8001d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e18:	e026      	b.n	8000e68 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_ADC_MspInit+0xc8>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d121      	bne.n	8000e68 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000e24:	4b13      	ldr	r3, [pc, #76]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a0c      	ldr	r2, [pc, #48]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_ADC_MspInit+0xc0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e54:	2320      	movs	r3, #32
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <HAL_ADC_MspInit+0xc4>)
 8000e64:	f000 ff80 	bl	8001d68 <HAL_GPIO_Init>
}
 8000e68:	bf00      	nop
 8000e6a:	3728      	adds	r7, #40	; 0x28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40012400 	.word	0x40012400
 8000e74:	40021000 	.word	0x40021000
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	40012800 	.word	0x40012800

08000e80 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000e94:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <HAL_FSMC_MspInit+0x78>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d129      	bne.n	8000ef0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_FSMC_MspInit+0x78>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000ea2:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_FSMC_MspInit+0x7c>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a15      	ldr	r2, [pc, #84]	; (8000efc <HAL_FSMC_MspInit+0x7c>)
 8000ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eac:	6153      	str	r3, [r2, #20]
 8000eae:	4b13      	ldr	r3, [pc, #76]	; (8000efc <HAL_FSMC_MspInit+0x7c>)
 8000eb0:	695b      	ldr	r3, [r3, #20]
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000eba:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000ebe:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ec8:	f107 0308 	add.w	r3, r7, #8
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480c      	ldr	r0, [pc, #48]	; (8000f00 <HAL_FSMC_MspInit+0x80>)
 8000ed0:	f000 ff4a 	bl	8001d68 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ed4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000ed8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eda:	2302      	movs	r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4806      	ldr	r0, [pc, #24]	; (8000f04 <HAL_FSMC_MspInit+0x84>)
 8000eea:	f000 ff3d 	bl	8001d68 <HAL_GPIO_Init>
 8000eee:	e000      	b.n	8000ef2 <HAL_FSMC_MspInit+0x72>
    return;
 8000ef0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000ef2:	3718      	adds	r7, #24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	2000013c 	.word	0x2000013c
 8000efc:	40021000 	.word	0x40021000
 8000f00:	40011800 	.word	0x40011800
 8000f04:	40011400 	.word	0x40011400

08000f08 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000f10:	f7ff ffb6 	bl	8000e80 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <NMI_Handler+0x4>

08000f22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <HardFault_Handler+0x4>

08000f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <MemManage_Handler+0x4>

08000f2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f62:	f000 f8c9 	bl	80010f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8000f70:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <EXTI15_10_IRQHandler+0x34>)
 8000f72:	695b      	ldr	r3, [r3, #20]
 8000f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00a      	beq.n	8000f92 <EXTI15_10_IRQHandler+0x26>
    {
      isrFlag = 1;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <EXTI15_10_IRQHandler+0x38>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
      __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <EXTI15_10_IRQHandler+0x34>)
 8000f84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f88:	615a      	str	r2, [r3, #20]
      HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8000f8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f8e:	f001 f8af 	bl	80020f0 <HAL_GPIO_EXTI_Callback>
    }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f92:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f96:	f001 f893 	bl	80020c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40010400 	.word	0x40010400
 8000fa4:	20000140 	.word	0x20000140

08000fa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb0:	4a14      	ldr	r2, [pc, #80]	; (8001004 <_sbrk+0x5c>)
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <_sbrk+0x60>)
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d102      	bne.n	8000fca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <_sbrk+0x64>)
 8000fc6:	4a12      	ldr	r2, [pc, #72]	; (8001010 <_sbrk+0x68>)
 8000fc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <_sbrk+0x64>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d207      	bcs.n	8000fe8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fd8:	f001 ff58 	bl	8002e8c <__errno>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	220c      	movs	r2, #12
 8000fe0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	e009      	b.n	8000ffc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <_sbrk+0x64>)
 8000ff8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;}
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20010000 	.word	0x20010000
 8001008:	00000400 	.word	0x00000400
 800100c:	20000144 	.word	0x20000144
 8001010:	20000160 	.word	0x20000160

08001014 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	; (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	; (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001046:	f7ff ffe5 	bl	8001014 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800104a:	f001 ff25 	bl	8002e98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800104e:	f7ff fb8d 	bl	800076c <main>
  bx lr
 8001052:	4770      	bx	lr
  ldr r0, =_sdata
 8001054:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001058:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800105c:	08003ea0 	.word	0x08003ea0
  ldr r2, =_sbss
 8001060:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001064:	2000015c 	.word	0x2000015c

08001068 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC1_2_IRQHandler>
	...

0800106c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	; (8001094 <HAL_Init+0x28>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a07      	ldr	r2, [pc, #28]	; (8001094 <HAL_Init+0x28>)
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800107c:	2003      	movs	r0, #3
 800107e:	f000 fe31 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001082:	200f      	movs	r0, #15
 8001084:	f000 f808 	bl	8001098 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001088:	f7ff fe62 	bl	8000d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40022000 	.word	0x40022000

08001098 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x54>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <HAL_InitTick+0x58>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	4619      	mov	r1, r3
 80010aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80010b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f000 fe49 	bl	8001d4e <HAL_SYSTICK_Config>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00e      	b.n	80010e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2b0f      	cmp	r3, #15
 80010ca:	d80a      	bhi.n	80010e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010cc:	2200      	movs	r2, #0
 80010ce:	6879      	ldr	r1, [r7, #4]
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f000 fe11 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d8:	4a06      	ldr	r2, [pc, #24]	; (80010f4 <HAL_InitTick+0x5c>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
 80010e0:	e000      	b.n	80010e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20000004 	.word	0x20000004

080010f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	461a      	mov	r2, r3
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4413      	add	r3, r2
 8001108:	4a03      	ldr	r2, [pc, #12]	; (8001118 <HAL_IncTick+0x20>)
 800110a:	6013      	str	r3, [r2, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	20000008 	.word	0x20000008
 8001118:	20000148 	.word	0x20000148

0800111c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b02      	ldr	r3, [pc, #8]	; (800112c <HAL_GetTick+0x10>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr
 800112c:	20000148 	.word	0x20000148

08001130 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001138:	f7ff fff0 	bl	800111c <HAL_GetTick>
 800113c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001148:	d005      	beq.n	8001156 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114a:	4b0a      	ldr	r3, [pc, #40]	; (8001174 <HAL_Delay+0x44>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	461a      	mov	r2, r3
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	4413      	add	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001156:	bf00      	nop
 8001158:	f7ff ffe0 	bl	800111c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	68fa      	ldr	r2, [r7, #12]
 8001164:	429a      	cmp	r2, r3
 8001166:	d8f7      	bhi.n	8001158 <HAL_Delay+0x28>
  {
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3710      	adds	r7, #16
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008

08001178 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001180:	2300      	movs	r3, #0
 8001182:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d101      	bne.n	800119a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e0ce      	b.n	8001338 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d109      	bne.n	80011bc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fdfc 	bl	8000db4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 fbd7 	bl	8001970 <ADC_ConversionStop_Disable>
 80011c2:	4603      	mov	r3, r0
 80011c4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 80a9 	bne.w	8001326 <HAL_ADC_Init+0x1ae>
 80011d4:	7dfb      	ldrb	r3, [r7, #23]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f040 80a5 	bne.w	8001326 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011e4:	f023 0302 	bic.w	r3, r3, #2
 80011e8:	f043 0202 	orr.w	r2, r3, #2
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4951      	ldr	r1, [pc, #324]	; (8001340 <HAL_ADC_Init+0x1c8>)
 80011fa:	428b      	cmp	r3, r1
 80011fc:	d10a      	bne.n	8001214 <HAL_ADC_Init+0x9c>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
 8001202:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001206:	d002      	beq.n	800120e <HAL_ADC_Init+0x96>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	e004      	b.n	8001218 <HAL_ADC_Init+0xa0>
 800120e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001212:	e001      	b.n	8001218 <HAL_ADC_Init+0xa0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001218:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	7b1b      	ldrb	r3, [r3, #12]
 800121e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001220:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	4313      	orrs	r3, r2
 8001226:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001230:	d003      	beq.n	800123a <HAL_ADC_Init+0xc2>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d102      	bne.n	8001240 <HAL_ADC_Init+0xc8>
 800123a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800123e:	e000      	b.n	8001242 <HAL_ADC_Init+0xca>
 8001240:	2300      	movs	r3, #0
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7d1b      	ldrb	r3, [r3, #20]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d119      	bne.n	8001284 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7b1b      	ldrb	r3, [r3, #12]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	3b01      	subs	r3, #1
 800125e:	035a      	lsls	r2, r3, #13
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	e00b      	b.n	8001284 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	f043 0220 	orr.w	r2, r3, #32
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	f043 0201 	orr.w	r2, r3, #1
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <HAL_ADC_Init+0x1cc>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	6812      	ldr	r2, [r2, #0]
 80012a6:	68b9      	ldr	r1, [r7, #8]
 80012a8:	430b      	orrs	r3, r1
 80012aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012b4:	d003      	beq.n	80012be <HAL_ADC_Init+0x146>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d104      	bne.n	80012c8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	051b      	lsls	r3, r3, #20
 80012c6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ce:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	430a      	orrs	r2, r1
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <HAL_ADC_Init+0x1d0>)
 80012e4:	4013      	ands	r3, r2
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d10b      	bne.n	8001304 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2200      	movs	r2, #0
 80012f0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	f023 0303 	bic.w	r3, r3, #3
 80012fa:	f043 0201 	orr.w	r2, r3, #1
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001302:	e018      	b.n	8001336 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001308:	f023 0312 	bic.w	r3, r3, #18
 800130c:	f043 0210 	orr.w	r2, r3, #16
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	f043 0201 	orr.w	r2, r3, #1
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001324:	e007      	b.n	8001336 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800132a:	f043 0210 	orr.w	r2, r3, #16
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001336:	7dfb      	ldrb	r3, [r7, #23]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013c00 	.word	0x40013c00
 8001344:	ffe1f7fd 	.word	0xffe1f7fd
 8001348:	ff1f0efe 	.word	0xff1f0efe

0800134c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800135e:	2b01      	cmp	r3, #1
 8001360:	d101      	bne.n	8001366 <HAL_ADC_Start+0x1a>
 8001362:	2302      	movs	r3, #2
 8001364:	e098      	b.n	8001498 <HAL_ADC_Start+0x14c>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 faa4 	bl	80018bc <ADC_Enable>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 8087 	bne.w	800148e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a41      	ldr	r2, [pc, #260]	; (80014a0 <HAL_ADC_Start+0x154>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d105      	bne.n	80013aa <HAL_ADC_Start+0x5e>
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <HAL_ADC_Start+0x158>)
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d115      	bne.n	80013d6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d026      	beq.n	8001412 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80013cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80013d4:	e01d      	b.n	8001412 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2f      	ldr	r2, [pc, #188]	; (80014a4 <HAL_ADC_Start+0x158>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d004      	beq.n	80013f6 <HAL_ADC_Start+0xaa>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a2b      	ldr	r2, [pc, #172]	; (80014a0 <HAL_ADC_Start+0x154>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d10d      	bne.n	8001412 <HAL_ADC_Start+0xc6>
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <HAL_ADC_Start+0x158>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001406:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800140a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	f023 0206 	bic.w	r2, r3, #6
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	62da      	str	r2, [r3, #44]	; 0x2c
 800142a:	e002      	b.n	8001432 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f06f 0202 	mvn.w	r2, #2
 8001442:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800144e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001452:	d113      	bne.n	800147c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001458:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <HAL_ADC_Start+0x154>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d105      	bne.n	800146a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <HAL_ADC_Start+0x158>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001466:	2b00      	cmp	r3, #0
 8001468:	d108      	bne.n	800147c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	e00c      	b.n	8001496 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	e003      	b.n	8001496 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001496:	7bfb      	ldrb	r3, [r7, #15]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3710      	adds	r7, #16
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40012800 	.word	0x40012800
 80014a4:	40012400 	.word	0x40012400

080014a8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80014be:	f7ff fe2d 	bl	800111c <HAL_GetTick>
 80014c2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d00b      	beq.n	80014ea <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	f043 0220 	orr.w	r2, r3, #32
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0d3      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d131      	bne.n	800155c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001502:	2b00      	cmp	r3, #0
 8001504:	d12a      	bne.n	800155c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001506:	e021      	b.n	800154c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800150e:	d01d      	beq.n	800154c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d007      	beq.n	8001526 <HAL_ADC_PollForConversion+0x7e>
 8001516:	f7ff fe01 	bl	800111c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d212      	bcs.n	800154c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0302 	and.w	r3, r3, #2
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10b      	bne.n	800154c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e0a2      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0d6      	beq.n	8001508 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800155a:	e070      	b.n	800163e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800155c:	4b4f      	ldr	r3, [pc, #316]	; (800169c <HAL_ADC_PollForConversion+0x1f4>)
 800155e:	681c      	ldr	r4, [r3, #0]
 8001560:	2002      	movs	r0, #2
 8001562:	f001 fa8b 	bl	8002a7c <HAL_RCCEx_GetPeriphCLKFreq>
 8001566:	4603      	mov	r3, r0
 8001568:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6919      	ldr	r1, [r3, #16]
 8001572:	4b4b      	ldr	r3, [pc, #300]	; (80016a0 <HAL_ADC_PollForConversion+0x1f8>)
 8001574:	400b      	ands	r3, r1
 8001576:	2b00      	cmp	r3, #0
 8001578:	d118      	bne.n	80015ac <HAL_ADC_PollForConversion+0x104>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	68d9      	ldr	r1, [r3, #12]
 8001580:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <HAL_ADC_PollForConversion+0x1fc>)
 8001582:	400b      	ands	r3, r1
 8001584:	2b00      	cmp	r3, #0
 8001586:	d111      	bne.n	80015ac <HAL_ADC_PollForConversion+0x104>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6919      	ldr	r1, [r3, #16]
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_ADC_PollForConversion+0x200>)
 8001590:	400b      	ands	r3, r1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d108      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x100>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68d9      	ldr	r1, [r3, #12]
 800159c:	4b43      	ldr	r3, [pc, #268]	; (80016ac <HAL_ADC_PollForConversion+0x204>)
 800159e:	400b      	ands	r3, r1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d101      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x100>
 80015a4:	2314      	movs	r3, #20
 80015a6:	e020      	b.n	80015ea <HAL_ADC_PollForConversion+0x142>
 80015a8:	2329      	movs	r3, #41	; 0x29
 80015aa:	e01e      	b.n	80015ea <HAL_ADC_PollForConversion+0x142>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6919      	ldr	r1, [r3, #16]
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_ADC_PollForConversion+0x200>)
 80015b4:	400b      	ands	r3, r1
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_ADC_PollForConversion+0x120>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68d9      	ldr	r1, [r3, #12]
 80015c0:	4b3a      	ldr	r3, [pc, #232]	; (80016ac <HAL_ADC_PollForConversion+0x204>)
 80015c2:	400b      	ands	r3, r1
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00d      	beq.n	80015e4 <HAL_ADC_PollForConversion+0x13c>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6919      	ldr	r1, [r3, #16]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <HAL_ADC_PollForConversion+0x208>)
 80015d0:	400b      	ands	r3, r1
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d108      	bne.n	80015e8 <HAL_ADC_PollForConversion+0x140>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	68d9      	ldr	r1, [r3, #12]
 80015dc:	4b34      	ldr	r3, [pc, #208]	; (80016b0 <HAL_ADC_PollForConversion+0x208>)
 80015de:	400b      	ands	r3, r1
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_PollForConversion+0x140>
 80015e4:	2354      	movs	r3, #84	; 0x54
 80015e6:	e000      	b.n	80015ea <HAL_ADC_PollForConversion+0x142>
 80015e8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80015f0:	e021      	b.n	8001636 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015f8:	d01a      	beq.n	8001630 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_ADC_PollForConversion+0x168>
 8001600:	f7ff fd8c 	bl	800111c <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	429a      	cmp	r2, r3
 800160e:	d20f      	bcs.n	8001630 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	429a      	cmp	r2, r3
 8001616:	d90b      	bls.n	8001630 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f043 0204 	orr.w	r2, r3, #4
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e030      	b.n	8001692 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	3301      	adds	r3, #1
 8001634:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	429a      	cmp	r2, r3
 800163c:	d8d9      	bhi.n	80015f2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f06f 0212 	mvn.w	r2, #18
 8001646:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800164c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800165e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001662:	d115      	bne.n	8001690 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001668:	2b00      	cmp	r3, #0
 800166a:	d111      	bne.n	8001690 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d105      	bne.n	8001690 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001688:	f043 0201 	orr.w	r2, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	371c      	adds	r7, #28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	20000000 	.word	0x20000000
 80016a0:	24924924 	.word	0x24924924
 80016a4:	00924924 	.word	0x00924924
 80016a8:	12492492 	.word	0x12492492
 80016ac:	00492492 	.word	0x00492492
 80016b0:	00249249 	.word	0x00249249

080016b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_ADC_ConfigChannel+0x20>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0dc      	b.n	80018a6 <HAL_ADC_ConfigChannel+0x1da>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d81c      	bhi.n	8001736 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	4613      	mov	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	3b05      	subs	r3, #5
 800170e:	221f      	movs	r2, #31
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	4019      	ands	r1, r3
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	6818      	ldr	r0, [r3, #0]
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3b05      	subs	r3, #5
 8001728:	fa00 f203 	lsl.w	r2, r0, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	635a      	str	r2, [r3, #52]	; 0x34
 8001734:	e03c      	b.n	80017b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b0c      	cmp	r3, #12
 800173c:	d81c      	bhi.n	8001778 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b23      	subs	r3, #35	; 0x23
 8001750:	221f      	movs	r2, #31
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	4019      	ands	r1, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b23      	subs	r3, #35	; 0x23
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	631a      	str	r2, [r3, #48]	; 0x30
 8001776:	e01b      	b.n	80017b0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b41      	subs	r3, #65	; 0x41
 800178a:	221f      	movs	r2, #31
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	4019      	ands	r1, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685a      	ldr	r2, [r3, #4]
 800179c:	4613      	mov	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	4413      	add	r3, r2
 80017a2:	3b41      	subs	r3, #65	; 0x41
 80017a4:	fa00 f203 	lsl.w	r2, r0, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	430a      	orrs	r2, r1
 80017ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b09      	cmp	r3, #9
 80017b6:	d91c      	bls.n	80017f2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	3b1e      	subs	r3, #30
 80017ca:	2207      	movs	r2, #7
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	4019      	ands	r1, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	6898      	ldr	r0, [r3, #8]
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	3b1e      	subs	r3, #30
 80017e4:	fa00 f203 	lsl.w	r2, r0, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	430a      	orrs	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	e019      	b.n	8001826 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	6919      	ldr	r1, [r3, #16]
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4613      	mov	r3, r2
 80017fe:	005b      	lsls	r3, r3, #1
 8001800:	4413      	add	r3, r2
 8001802:	2207      	movs	r2, #7
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	4019      	ands	r1, r3
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	6898      	ldr	r0, [r3, #8]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	4613      	mov	r3, r2
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	4413      	add	r3, r2
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b10      	cmp	r3, #16
 800182c:	d003      	beq.n	8001836 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001832:	2b11      	cmp	r3, #17
 8001834:	d132      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a1d      	ldr	r2, [pc, #116]	; (80018b0 <HAL_ADC_ConfigChannel+0x1e4>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d125      	bne.n	800188c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d126      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800185c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b10      	cmp	r3, #16
 8001864:	d11a      	bne.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001866:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <HAL_ADC_ConfigChannel+0x1e8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <HAL_ADC_ConfigChannel+0x1ec>)
 800186c:	fba2 2303 	umull	r2, r3, r2, r3
 8001870:	0c9a      	lsrs	r2, r3, #18
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800187c:	e002      	b.n	8001884 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	3b01      	subs	r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f9      	bne.n	800187e <HAL_ADC_ConfigChannel+0x1b2>
 800188a:	e007      	b.n	800189c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f043 0220 	orr.w	r2, r3, #32
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	40012400 	.word	0x40012400
 80018b4:	20000000 	.word	0x20000000
 80018b8:	431bde83 	.word	0x431bde83

080018bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d040      	beq.n	800195c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0201 	orr.w	r2, r2, #1
 80018e8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80018ea:	4b1f      	ldr	r3, [pc, #124]	; (8001968 <ADC_Enable+0xac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a1f      	ldr	r2, [pc, #124]	; (800196c <ADC_Enable+0xb0>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	0c9b      	lsrs	r3, r3, #18
 80018f6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80018f8:	e002      	b.n	8001900 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f9      	bne.n	80018fa <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001906:	f7ff fc09 	bl	800111c <HAL_GetTick>
 800190a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800190c:	e01f      	b.n	800194e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800190e:	f7ff fc05 	bl	800111c <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d918      	bls.n	800194e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	2b01      	cmp	r3, #1
 8001928:	d011      	beq.n	800194e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192e:	f043 0210 	orr.w	r2, r3, #16
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193a:	f043 0201 	orr.w	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e007      	b.n	800195e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b01      	cmp	r3, #1
 800195a:	d1d8      	bne.n	800190e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3710      	adds	r7, #16
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	20000000 	.word	0x20000000
 800196c:	431bde83 	.word	0x431bde83

08001970 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b01      	cmp	r3, #1
 8001988:	d12e      	bne.n	80019e8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 0201 	bic.w	r2, r2, #1
 8001998:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800199a:	f7ff fbbf 	bl	800111c <HAL_GetTick>
 800199e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019a0:	e01b      	b.n	80019da <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80019a2:	f7ff fbbb 	bl	800111c <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d914      	bls.n	80019da <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d10d      	bne.n	80019da <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	f043 0210 	orr.w	r2, r3, #16
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ce:	f043 0201 	orr.w	r2, r3, #1
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e007      	b.n	80019ea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d0dc      	beq.n	80019a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
	...

080019f4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 80019f4:	b590      	push	{r4, r7, lr}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d101      	bne.n	8001a12 <HAL_ADCEx_Calibration_Start+0x1e>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	e095      	b.n	8001b3e <HAL_ADCEx_Calibration_Start+0x14a>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ffa8 	bl	8001970 <ADC_ConversionStop_Disable>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f040 8084 	bne.w	8001b34 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a30:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a34:	f023 0302 	bic.w	r3, r3, #2
 8001a38:	f043 0202 	orr.w	r2, r3, #2
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001a40:	4b41      	ldr	r3, [pc, #260]	; (8001b48 <HAL_ADCEx_Calibration_Start+0x154>)
 8001a42:	681c      	ldr	r4, [r3, #0]
 8001a44:	2002      	movs	r0, #2
 8001a46:	f001 f819 	bl	8002a7c <HAL_RCCEx_GetPeriphCLKFreq>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001a50:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001a52:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001a54:	e002      	b.n	8001a5c <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f9      	bne.n	8001a56 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff2a 	bl	80018bc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0208 	orr.w	r2, r2, #8
 8001a76:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001a78:	f7ff fb50 	bl	800111c <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a7e:	e01b      	b.n	8001ab8 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001a80:	f7ff fb4c 	bl	800111c <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b0a      	cmp	r3, #10
 8001a8c:	d914      	bls.n	8001ab8 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 0308 	and.w	r3, r3, #8
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00d      	beq.n	8001ab8 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa0:	f023 0312 	bic.w	r3, r3, #18
 8001aa4:	f043 0210 	orr.w	r2, r3, #16
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e042      	b.n	8001b3e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1dc      	bne.n	8001a80 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0204 	orr.w	r2, r2, #4
 8001ad4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ad6:	f7ff fb21 	bl	800111c <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001adc:	e01b      	b.n	8001b16 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ade:	f7ff fb1d 	bl	800111c <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b0a      	cmp	r3, #10
 8001aea:	d914      	bls.n	8001b16 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00d      	beq.n	8001b16 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afe:	f023 0312 	bic.w	r3, r3, #18
 8001b02:	f043 0210 	orr.w	r2, r3, #16
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e013      	b.n	8001b3e <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1dc      	bne.n	8001ade <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b28:	f023 0303 	bic.w	r3, r3, #3
 8001b2c:	f043 0201 	orr.w	r2, r3, #1
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	371c      	adds	r7, #28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd90      	pop	{r4, r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000000 	.word	0x20000000

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bc80      	pop	{r7}
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4906      	ldr	r1, [pc, #24]	; (8001be4 <__NVIC_EnableIRQ+0x34>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	; (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0112      	lsls	r2, r2, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	; (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0112      	lsls	r2, r2, #4
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	bf28      	it	cs
 8001c5a:	2304      	movcs	r3, #4
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3304      	adds	r3, #4
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b03      	subs	r3, #3
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	; 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff90 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff2d 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff42 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff35 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa2 	bl	8001ca0 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b08b      	sub	sp, #44	; 0x2c
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7a:	e179      	b.n	8002070 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	f040 8168 	bne.w	800206a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	4a96      	ldr	r2, [pc, #600]	; (8001ff8 <HAL_GPIO_Init+0x290>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d05e      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001da4:	4a94      	ldr	r2, [pc, #592]	; (8001ff8 <HAL_GPIO_Init+0x290>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d875      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001daa:	4a94      	ldr	r2, [pc, #592]	; (8001ffc <HAL_GPIO_Init+0x294>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d058      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001db0:	4a92      	ldr	r2, [pc, #584]	; (8001ffc <HAL_GPIO_Init+0x294>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d86f      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001db6:	4a92      	ldr	r2, [pc, #584]	; (8002000 <HAL_GPIO_Init+0x298>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d052      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dbc:	4a90      	ldr	r2, [pc, #576]	; (8002000 <HAL_GPIO_Init+0x298>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d869      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dc2:	4a90      	ldr	r2, [pc, #576]	; (8002004 <HAL_GPIO_Init+0x29c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d04c      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dc8:	4a8e      	ldr	r2, [pc, #568]	; (8002004 <HAL_GPIO_Init+0x29c>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d863      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dce:	4a8e      	ldr	r2, [pc, #568]	; (8002008 <HAL_GPIO_Init+0x2a0>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d046      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
 8001dd4:	4a8c      	ldr	r2, [pc, #560]	; (8002008 <HAL_GPIO_Init+0x2a0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d85d      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001dda:	2b12      	cmp	r3, #18
 8001ddc:	d82a      	bhi.n	8001e34 <HAL_GPIO_Init+0xcc>
 8001dde:	2b12      	cmp	r3, #18
 8001de0:	d859      	bhi.n	8001e96 <HAL_GPIO_Init+0x12e>
 8001de2:	a201      	add	r2, pc, #4	; (adr r2, 8001de8 <HAL_GPIO_Init+0x80>)
 8001de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de8:	08001e63 	.word	0x08001e63
 8001dec:	08001e3d 	.word	0x08001e3d
 8001df0:	08001e4f 	.word	0x08001e4f
 8001df4:	08001e91 	.word	0x08001e91
 8001df8:	08001e97 	.word	0x08001e97
 8001dfc:	08001e97 	.word	0x08001e97
 8001e00:	08001e97 	.word	0x08001e97
 8001e04:	08001e97 	.word	0x08001e97
 8001e08:	08001e97 	.word	0x08001e97
 8001e0c:	08001e97 	.word	0x08001e97
 8001e10:	08001e97 	.word	0x08001e97
 8001e14:	08001e97 	.word	0x08001e97
 8001e18:	08001e97 	.word	0x08001e97
 8001e1c:	08001e97 	.word	0x08001e97
 8001e20:	08001e97 	.word	0x08001e97
 8001e24:	08001e97 	.word	0x08001e97
 8001e28:	08001e97 	.word	0x08001e97
 8001e2c:	08001e45 	.word	0x08001e45
 8001e30:	08001e59 	.word	0x08001e59
 8001e34:	4a75      	ldr	r2, [pc, #468]	; (800200c <HAL_GPIO_Init+0x2a4>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d013      	beq.n	8001e62 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e3a:	e02c      	b.n	8001e96 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e029      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	623b      	str	r3, [r7, #32]
          break;
 8001e4c:	e024      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	3308      	adds	r3, #8
 8001e54:	623b      	str	r3, [r7, #32]
          break;
 8001e56:	e01f      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	330c      	adds	r3, #12
 8001e5e:	623b      	str	r3, [r7, #32]
          break;
 8001e60:	e01a      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d102      	bne.n	8001e70 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e013      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d105      	bne.n	8001e84 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e78:	2308      	movs	r3, #8
 8001e7a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	611a      	str	r2, [r3, #16]
          break;
 8001e82:	e009      	b.n	8001e98 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e84:	2308      	movs	r3, #8
 8001e86:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	615a      	str	r2, [r3, #20]
          break;
 8001e8e:	e003      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e90:	2300      	movs	r3, #0
 8001e92:	623b      	str	r3, [r7, #32]
          break;
 8001e94:	e000      	b.n	8001e98 <HAL_GPIO_Init+0x130>
          break;
 8001e96:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	2bff      	cmp	r3, #255	; 0xff
 8001e9c:	d801      	bhi.n	8001ea2 <HAL_GPIO_Init+0x13a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	e001      	b.n	8001ea6 <HAL_GPIO_Init+0x13e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2bff      	cmp	r3, #255	; 0xff
 8001eac:	d802      	bhi.n	8001eb4 <HAL_GPIO_Init+0x14c>
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	e002      	b.n	8001eba <HAL_GPIO_Init+0x152>
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	3b08      	subs	r3, #8
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	210f      	movs	r1, #15
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	401a      	ands	r2, r3
 8001ecc:	6a39      	ldr	r1, [r7, #32]
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 80c1 	beq.w	800206a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee8:	4b49      	ldr	r3, [pc, #292]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a48      	ldr	r2, [pc, #288]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001eee:	f043 0301 	orr.w	r3, r3, #1
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b46      	ldr	r3, [pc, #280]	; (8002010 <HAL_GPIO_Init+0x2a8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f00:	4a44      	ldr	r2, [pc, #272]	; (8002014 <HAL_GPIO_Init+0x2ac>)
 8001f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	220f      	movs	r2, #15
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	68fa      	ldr	r2, [r7, #12]
 8001f20:	4013      	ands	r3, r2
 8001f22:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a3c      	ldr	r2, [pc, #240]	; (8002018 <HAL_GPIO_Init+0x2b0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d01f      	beq.n	8001f6c <HAL_GPIO_Init+0x204>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a3b      	ldr	r2, [pc, #236]	; (800201c <HAL_GPIO_Init+0x2b4>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d019      	beq.n	8001f68 <HAL_GPIO_Init+0x200>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a3a      	ldr	r2, [pc, #232]	; (8002020 <HAL_GPIO_Init+0x2b8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d013      	beq.n	8001f64 <HAL_GPIO_Init+0x1fc>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a39      	ldr	r2, [pc, #228]	; (8002024 <HAL_GPIO_Init+0x2bc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00d      	beq.n	8001f60 <HAL_GPIO_Init+0x1f8>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a38      	ldr	r2, [pc, #224]	; (8002028 <HAL_GPIO_Init+0x2c0>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <HAL_GPIO_Init+0x1f4>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a37      	ldr	r2, [pc, #220]	; (800202c <HAL_GPIO_Init+0x2c4>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d101      	bne.n	8001f58 <HAL_GPIO_Init+0x1f0>
 8001f54:	2305      	movs	r3, #5
 8001f56:	e00a      	b.n	8001f6e <HAL_GPIO_Init+0x206>
 8001f58:	2306      	movs	r3, #6
 8001f5a:	e008      	b.n	8001f6e <HAL_GPIO_Init+0x206>
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	e006      	b.n	8001f6e <HAL_GPIO_Init+0x206>
 8001f60:	2303      	movs	r3, #3
 8001f62:	e004      	b.n	8001f6e <HAL_GPIO_Init+0x206>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x206>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_GPIO_Init+0x206>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f70:	f002 0203 	and.w	r2, r2, #3
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	4093      	lsls	r3, r2
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7e:	4925      	ldr	r1, [pc, #148]	; (8002014 <HAL_GPIO_Init+0x2ac>)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f98:	4b25      	ldr	r3, [pc, #148]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4924      	ldr	r1, [pc, #144]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fa6:	4b22      	ldr	r3, [pc, #136]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4920      	ldr	r1, [pc, #128]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fc0:	4b1b      	ldr	r3, [pc, #108]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	491a      	ldr	r1, [pc, #104]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	604b      	str	r3, [r1, #4]
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	4916      	ldr	r1, [pc, #88]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d025      	beq.n	8002034 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe8:	4b11      	ldr	r3, [pc, #68]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	4910      	ldr	r1, [pc, #64]	; (8002030 <HAL_GPIO_Init+0x2c8>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
 8001ff4:	e025      	b.n	8002042 <HAL_GPIO_Init+0x2da>
 8001ff6:	bf00      	nop
 8001ff8:	10320000 	.word	0x10320000
 8001ffc:	10310000 	.word	0x10310000
 8002000:	10220000 	.word	0x10220000
 8002004:	10210000 	.word	0x10210000
 8002008:	10120000 	.word	0x10120000
 800200c:	10110000 	.word	0x10110000
 8002010:	40021000 	.word	0x40021000
 8002014:	40010000 	.word	0x40010000
 8002018:	40010800 	.word	0x40010800
 800201c:	40010c00 	.word	0x40010c00
 8002020:	40011000 	.word	0x40011000
 8002024:	40011400 	.word	0x40011400
 8002028:	40011800 	.word	0x40011800
 800202c:	40011c00 	.word	0x40011c00
 8002030:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_GPIO_Init+0x324>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	43db      	mvns	r3, r3
 800203c:	4913      	ldr	r1, [pc, #76]	; (800208c <HAL_GPIO_Init+0x324>)
 800203e:	4013      	ands	r3, r2
 8002040:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d006      	beq.n	800205c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_GPIO_Init+0x324>)
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_GPIO_Init+0x324>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4313      	orrs	r3, r2
 8002058:	60cb      	str	r3, [r1, #12]
 800205a:	e006      	b.n	800206a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_GPIO_Init+0x324>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	43db      	mvns	r3, r3
 8002064:	4909      	ldr	r1, [pc, #36]	; (800208c <HAL_GPIO_Init+0x324>)
 8002066:	4013      	ands	r3, r2
 8002068:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	3301      	adds	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	fa22 f303 	lsr.w	r3, r2, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	f47f ae7e 	bne.w	8001d7c <HAL_GPIO_Init+0x14>
  }
}
 8002080:	bf00      	nop
 8002082:	bf00      	nop
 8002084:	372c      	adds	r7, #44	; 0x2c
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40010400 	.word	0x40010400

08002090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	807b      	strh	r3, [r7, #2]
 800209c:	4613      	mov	r3, r2
 800209e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020a0:	787b      	ldrb	r3, [r7, #1]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a6:	887a      	ldrh	r2, [r7, #2]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020ac:	e003      	b.n	80020b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	041a      	lsls	r2, r3, #16
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	611a      	str	r2, [r3, #16]
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020ca:	4b08      	ldr	r3, [pc, #32]	; (80020ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	88fb      	ldrh	r3, [r7, #6]
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d006      	beq.n	80020e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020d6:	4a05      	ldr	r2, [pc, #20]	; (80020ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020dc:	88fb      	ldrh	r3, [r7, #6]
 80020de:	4618      	mov	r0, r3
 80020e0:	f000 f806 	bl	80020f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40010400 	.word	0x40010400

080020f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e272      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8087 	beq.w	8002232 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002124:	4b92      	ldr	r3, [pc, #584]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 030c 	and.w	r3, r3, #12
 800212c:	2b04      	cmp	r3, #4
 800212e:	d00c      	beq.n	800214a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002130:	4b8f      	ldr	r3, [pc, #572]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 030c 	and.w	r3, r3, #12
 8002138:	2b08      	cmp	r3, #8
 800213a:	d112      	bne.n	8002162 <HAL_RCC_OscConfig+0x5e>
 800213c:	4b8c      	ldr	r3, [pc, #560]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002148:	d10b      	bne.n	8002162 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d06c      	beq.n	8002230 <HAL_RCC_OscConfig+0x12c>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d168      	bne.n	8002230 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e24c      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800216a:	d106      	bne.n	800217a <HAL_RCC_OscConfig+0x76>
 800216c:	4b80      	ldr	r3, [pc, #512]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a7f      	ldr	r2, [pc, #508]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002172:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	e02e      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10c      	bne.n	800219c <HAL_RCC_OscConfig+0x98>
 8002182:	4b7b      	ldr	r3, [pc, #492]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a7a      	ldr	r2, [pc, #488]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	6013      	str	r3, [r2, #0]
 800218e:	4b78      	ldr	r3, [pc, #480]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a77      	ldr	r2, [pc, #476]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e01d      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0xbc>
 80021a6:	4b72      	ldr	r3, [pc, #456]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a71      	ldr	r2, [pc, #452]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021b0:	6013      	str	r3, [r2, #0]
 80021b2:	4b6f      	ldr	r3, [pc, #444]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a6e      	ldr	r2, [pc, #440]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021bc:	6013      	str	r3, [r2, #0]
 80021be:	e00b      	b.n	80021d8 <HAL_RCC_OscConfig+0xd4>
 80021c0:	4b6b      	ldr	r3, [pc, #428]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a6a      	ldr	r2, [pc, #424]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021ca:	6013      	str	r3, [r2, #0]
 80021cc:	4b68      	ldr	r3, [pc, #416]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a67      	ldr	r2, [pc, #412]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d013      	beq.n	8002208 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe ff9c 	bl	800111c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7fe ff98 	bl	800111c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e200      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	4b5d      	ldr	r3, [pc, #372]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0xe4>
 8002206:	e014      	b.n	8002232 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7fe ff88 	bl	800111c <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7fe ff84 	bl	800111c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	; 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1ec      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002222:	4b53      	ldr	r3, [pc, #332]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1f0      	bne.n	8002210 <HAL_RCC_OscConfig+0x10c>
 800222e:	e000      	b.n	8002232 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	2b00      	cmp	r3, #0
 800223c:	d063      	beq.n	8002306 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800223e:	4b4c      	ldr	r3, [pc, #304]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 030c 	and.w	r3, r3, #12
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800224a:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 030c 	and.w	r3, r3, #12
 8002252:	2b08      	cmp	r3, #8
 8002254:	d11c      	bne.n	8002290 <HAL_RCC_OscConfig+0x18c>
 8002256:	4b46      	ldr	r3, [pc, #280]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d116      	bne.n	8002290 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002262:	4b43      	ldr	r3, [pc, #268]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_RCC_OscConfig+0x176>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d001      	beq.n	800227a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e1c0      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	4939      	ldr	r1, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228e:	e03a      	b.n	8002306 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002298:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_RCC_OscConfig+0x270>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7fe ff3d 	bl	800111c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a6:	f7fe ff39 	bl	800111c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e1a1      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b8:	4b2d      	ldr	r3, [pc, #180]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	4927      	ldr	r1, [pc, #156]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
 80022d8:	e015      	b.n	8002306 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <HAL_RCC_OscConfig+0x270>)
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e0:	f7fe ff1c 	bl	800111c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022e8:	f7fe ff18 	bl	800111c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e180      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022fa:	4b1d      	ldr	r3, [pc, #116]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1f0      	bne.n	80022e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d03a      	beq.n	8002388 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d019      	beq.n	800234e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_RCC_OscConfig+0x274>)
 800231c:	2201      	movs	r2, #1
 800231e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002320:	f7fe fefc 	bl	800111c <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002328:	f7fe fef8 	bl	800111c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e160      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_RCC_OscConfig+0x26c>)
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002346:	2001      	movs	r0, #1
 8002348:	f000 fac4 	bl	80028d4 <RCC_Delay>
 800234c:	e01c      	b.n	8002388 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_OscConfig+0x274>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002354:	f7fe fee2 	bl	800111c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe fede 	bl	800111c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d908      	bls.n	800237c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e146      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	42420000 	.word	0x42420000
 8002378:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800237c:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1e9      	bne.n	800235c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	2b00      	cmp	r3, #0
 8002392:	f000 80a6 	beq.w	80024e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800239a:	4b8b      	ldr	r3, [pc, #556]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10d      	bne.n	80023c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	4b88      	ldr	r3, [pc, #544]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	4a87      	ldr	r2, [pc, #540]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b0:	61d3      	str	r3, [r2, #28]
 80023b2:	4b85      	ldr	r3, [pc, #532]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023be:	2301      	movs	r3, #1
 80023c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c2:	4b82      	ldr	r3, [pc, #520]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ce:	4b7f      	ldr	r3, [pc, #508]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a7e      	ldr	r2, [pc, #504]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023da:	f7fe fe9f 	bl	800111c <HAL_GetTick>
 80023de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023e0:	e008      	b.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023e2:	f7fe fe9b 	bl	800111c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b64      	cmp	r3, #100	; 0x64
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e103      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023f4:	4b75      	ldr	r3, [pc, #468]	; (80025cc <HAL_RCC_OscConfig+0x4c8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f0      	beq.n	80023e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x312>
 8002408:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e02d      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x334>
 800241e:	4b6a      	ldr	r3, [pc, #424]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	4a69      	ldr	r2, [pc, #420]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	6213      	str	r3, [r2, #32]
 800242a:	4b67      	ldr	r3, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800242c:	6a1b      	ldr	r3, [r3, #32]
 800242e:	4a66      	ldr	r2, [pc, #408]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	f023 0304 	bic.w	r3, r3, #4
 8002434:	6213      	str	r3, [r2, #32]
 8002436:	e01c      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b05      	cmp	r3, #5
 800243e:	d10c      	bne.n	800245a <HAL_RCC_OscConfig+0x356>
 8002440:	4b61      	ldr	r3, [pc, #388]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	4a60      	ldr	r2, [pc, #384]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002446:	f043 0304 	orr.w	r3, r3, #4
 800244a:	6213      	str	r3, [r2, #32]
 800244c:	4b5e      	ldr	r3, [pc, #376]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4a5d      	ldr	r2, [pc, #372]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002452:	f043 0301 	orr.w	r3, r3, #1
 8002456:	6213      	str	r3, [r2, #32]
 8002458:	e00b      	b.n	8002472 <HAL_RCC_OscConfig+0x36e>
 800245a:	4b5b      	ldr	r3, [pc, #364]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	6a1b      	ldr	r3, [r3, #32]
 800245e:	4a5a      	ldr	r2, [pc, #360]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6213      	str	r3, [r2, #32]
 8002466:	4b58      	ldr	r3, [pc, #352]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	4a57      	ldr	r2, [pc, #348]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800246c:	f023 0304 	bic.w	r3, r3, #4
 8002470:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d015      	beq.n	80024a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7fe fe4f 	bl	800111c <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	e00a      	b.n	8002498 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002482:	f7fe fe4b 	bl	800111c <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002490:	4293      	cmp	r3, r2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e0b1      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002498:	4b4b      	ldr	r3, [pc, #300]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ee      	beq.n	8002482 <HAL_RCC_OscConfig+0x37e>
 80024a4:	e014      	b.n	80024d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fe39 	bl	800111c <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	e00a      	b.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ae:	f7fe fe35 	bl	800111c <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e09b      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024c4:	4b40      	ldr	r3, [pc, #256]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ee      	bne.n	80024ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024d0:	7dfb      	ldrb	r3, [r7, #23]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d105      	bne.n	80024e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d6:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4a3b      	ldr	r2, [pc, #236]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 8087 	beq.w	80025fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ec:	4b36      	ldr	r3, [pc, #216]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 030c 	and.w	r3, r3, #12
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d061      	beq.n	80025bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d146      	bne.n	800258e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002500:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe fe09 	bl	800111c <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250e:	f7fe fe05 	bl	800111c <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e06d      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002520:	4b29      	ldr	r3, [pc, #164]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f0      	bne.n	800250e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002534:	d108      	bne.n	8002548 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002536:	4b24      	ldr	r3, [pc, #144]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	4921      	ldr	r1, [pc, #132]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002548:	4b1f      	ldr	r3, [pc, #124]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a19      	ldr	r1, [r3, #32]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	430b      	orrs	r3, r1
 800255a:	491b      	ldr	r1, [pc, #108]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002560:	4b1b      	ldr	r3, [pc, #108]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002562:	2201      	movs	r2, #1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7fe fdd9 	bl	800111c <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256e:	f7fe fdd5 	bl	800111c <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e03d      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x46a>
 800258c:	e035      	b.n	80025fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <HAL_RCC_OscConfig+0x4cc>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe fdc2 	bl	800111c <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259c:	f7fe fdbe 	bl	800111c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e026      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ae:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <HAL_RCC_OscConfig+0x4c4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1f0      	bne.n	800259c <HAL_RCC_OscConfig+0x498>
 80025ba:	e01e      	b.n	80025fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d107      	bne.n	80025d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e019      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40007000 	.word	0x40007000
 80025d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_OscConfig+0x500>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000

08002608 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d101      	bne.n	800261c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e0d0      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	429a      	cmp	r2, r3
 8002628:	d910      	bls.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262a:	4b67      	ldr	r3, [pc, #412]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 0207 	bic.w	r2, r3, #7
 8002632:	4965      	ldr	r1, [pc, #404]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	4313      	orrs	r3, r2
 8002638:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800263a:	4b63      	ldr	r3, [pc, #396]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d001      	beq.n	800264c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b8      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d020      	beq.n	800269a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a58      	ldr	r2, [pc, #352]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800266e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800267c:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	4a52      	ldr	r2, [pc, #328]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002682:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002686:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002688:	4b50      	ldr	r3, [pc, #320]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	494d      	ldr	r1, [pc, #308]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d040      	beq.n	8002728 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d115      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e07f      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d107      	bne.n	80026d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e073      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d6:	4b3d      	ldr	r3, [pc, #244]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e06b      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f023 0203 	bic.w	r2, r3, #3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	4936      	ldr	r1, [pc, #216]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026f8:	f7fe fd10 	bl	800111c <HAL_GetTick>
 80026fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	e00a      	b.n	8002716 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002700:	f7fe fd0c 	bl	800111c <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	f241 3288 	movw	r2, #5000	; 0x1388
 800270e:	4293      	cmp	r3, r2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e053      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002716:	4b2d      	ldr	r3, [pc, #180]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 020c 	and.w	r2, r3, #12
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	429a      	cmp	r2, r3
 8002726:	d1eb      	bne.n	8002700 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002728:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d210      	bcs.n	8002758 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002736:	4b24      	ldr	r3, [pc, #144]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f023 0207 	bic.w	r2, r3, #7
 800273e:	4922      	ldr	r1, [pc, #136]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	4313      	orrs	r3, r2
 8002744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002746:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0307 	and.w	r3, r3, #7
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	429a      	cmp	r2, r3
 8002752:	d001      	beq.n	8002758 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e032      	b.n	80027be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002764:	4b19      	ldr	r3, [pc, #100]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4916      	ldr	r1, [pc, #88]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d009      	beq.n	8002796 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	490e      	ldr	r1, [pc, #56]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 8002792:	4313      	orrs	r3, r2
 8002794:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002796:	f000 f821 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 800279a:	4602      	mov	r2, r0
 800279c:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HAL_RCC_ClockConfig+0x1c4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	f003 030f 	and.w	r3, r3, #15
 80027a6:	490a      	ldr	r1, [pc, #40]	; (80027d0 <HAL_RCC_ClockConfig+0x1c8>)
 80027a8:	5ccb      	ldrb	r3, [r1, r3]
 80027aa:	fa22 f303 	lsr.w	r3, r2, r3
 80027ae:	4a09      	ldr	r2, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1cc>)
 80027b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027b2:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <HAL_RCC_ClockConfig+0x1d0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fc6e 	bl	8001098 <HAL_InitTick>

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40022000 	.word	0x40022000
 80027cc:	40021000 	.word	0x40021000
 80027d0:	08003e4c 	.word	0x08003e4c
 80027d4:	20000000 	.word	0x20000000
 80027d8:	20000004 	.word	0x20000004

080027dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b490      	push	{r4, r7}
 80027de:	b08a      	sub	sp, #40	; 0x28
 80027e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80027e2:	4b29      	ldr	r3, [pc, #164]	; (8002888 <HAL_RCC_GetSysClockFreq+0xac>)
 80027e4:	1d3c      	adds	r4, r7, #4
 80027e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027ec:	f240 2301 	movw	r3, #513	; 0x201
 80027f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	61fb      	str	r3, [r7, #28]
 80027f6:	2300      	movs	r3, #0
 80027f8:	61bb      	str	r3, [r7, #24]
 80027fa:	2300      	movs	r3, #0
 80027fc:	627b      	str	r3, [r7, #36]	; 0x24
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002806:	4b21      	ldr	r3, [pc, #132]	; (800288c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d002      	beq.n	800281c <HAL_RCC_GetSysClockFreq+0x40>
 8002816:	2b08      	cmp	r3, #8
 8002818:	d003      	beq.n	8002822 <HAL_RCC_GetSysClockFreq+0x46>
 800281a:	e02b      	b.n	8002874 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800281c:	4b1c      	ldr	r3, [pc, #112]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 800281e:	623b      	str	r3, [r7, #32]
      break;
 8002820:	e02b      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	0c9b      	lsrs	r3, r3, #18
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	3328      	adds	r3, #40	; 0x28
 800282c:	443b      	add	r3, r7
 800282e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002832:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d012      	beq.n	8002864 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	0c5b      	lsrs	r3, r3, #17
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	3328      	adds	r3, #40	; 0x28
 800284a:	443b      	add	r3, r7
 800284c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002850:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4a0e      	ldr	r2, [pc, #56]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002856:	fb03 f202 	mul.w	r2, r3, r2
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
 8002862:	e004      	b.n	800286e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002868:	fb02 f303 	mul.w	r3, r2, r3
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	623b      	str	r3, [r7, #32]
      break;
 8002872:	e002      	b.n	800287a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002876:	623b      	str	r3, [r7, #32]
      break;
 8002878:	bf00      	nop
    }
  }
  return sysclockfreq;
 800287a:	6a3b      	ldr	r3, [r7, #32]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3728      	adds	r7, #40	; 0x28
 8002880:	46bd      	mov	sp, r7
 8002882:	bc90      	pop	{r4, r7}
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	0800383c 	.word	0x0800383c
 800288c:	40021000 	.word	0x40021000
 8002890:	007a1200 	.word	0x007a1200
 8002894:	003d0900 	.word	0x003d0900

08002898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800289c:	4b02      	ldr	r3, [pc, #8]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800289e:	681b      	ldr	r3, [r3, #0]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b0:	f7ff fff2 	bl	8002898 <HAL_RCC_GetHCLKFreq>
 80028b4:	4602      	mov	r2, r0
 80028b6:	4b05      	ldr	r3, [pc, #20]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	0adb      	lsrs	r3, r3, #11
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	4903      	ldr	r1, [pc, #12]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028c2:	5ccb      	ldrb	r3, [r1, r3]
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	08003e5c 	.word	0x08003e5c

080028d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028dc:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <RCC_Delay+0x34>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <RCC_Delay+0x38>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	0a5b      	lsrs	r3, r3, #9
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028f0:	bf00      	nop
  }
  while (Delay --);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1e5a      	subs	r2, r3, #1
 80028f6:	60fa      	str	r2, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1f9      	bne.n	80028f0 <RCC_Delay+0x1c>
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr
 8002908:	20000000 	.word	0x20000000
 800290c:	10624dd3 	.word	0x10624dd3

08002910 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	613b      	str	r3, [r7, #16]
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b00      	cmp	r3, #0
 800292a:	d07d      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002930:	4b4f      	ldr	r3, [pc, #316]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d10d      	bne.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293c:	4b4c      	ldr	r3, [pc, #304]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	4a4b      	ldr	r2, [pc, #300]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002942:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002946:	61d3      	str	r3, [r2, #28]
 8002948:	4b49      	ldr	r3, [pc, #292]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002954:	2301      	movs	r3, #1
 8002956:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002958:	4b46      	ldr	r3, [pc, #280]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d118      	bne.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a42      	ldr	r2, [pc, #264]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800296a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800296e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002970:	f7fe fbd4 	bl	800111c <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	e008      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002978:	f7fe fbd0 	bl	800111c <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b64      	cmp	r3, #100	; 0x64
 8002984:	d901      	bls.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e06d      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298a:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0f0      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002996:	4b36      	ldr	r3, [pc, #216]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800299e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d02e      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d027      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029b4:	4b2e      	ldr	r3, [pc, #184]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029be:	4b2e      	ldr	r3, [pc, #184]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029c4:	4b2c      	ldr	r3, [pc, #176]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ca:	4a29      	ldr	r2, [pc, #164]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d014      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe fb9f 	bl	800111c <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	e00a      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fb9b 	bl	800111c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e036      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ee      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a04:	4b1a      	ldr	r3, [pc, #104]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	6a1b      	ldr	r3, [r3, #32]
 8002a08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4917      	ldr	r1, [pc, #92]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a16:	7dfb      	ldrb	r3, [r7, #23]
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	4a13      	ldr	r2, [pc, #76]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a34:	4b0e      	ldr	r3, [pc, #56]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	490b      	ldr	r1, [pc, #44]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0310 	and.w	r3, r3, #16
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d008      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	4904      	ldr	r1, [pc, #16]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3718      	adds	r7, #24
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	40007000 	.word	0x40007000
 8002a78:	42420440 	.word	0x42420440

08002a7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a7c:	b590      	push	{r4, r7, lr}
 8002a7e:	b08d      	sub	sp, #52	; 0x34
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a84:	4b6a      	ldr	r3, [pc, #424]	; (8002c30 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 8002a86:	f107 040c 	add.w	r4, r7, #12
 8002a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a90:	f240 2301 	movw	r3, #513	; 0x201
 8002a94:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	2b0f      	cmp	r3, #15
 8002ab0:	f200 80b4 	bhi.w	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 8002ab4:	a201      	add	r2, pc, #4	; (adr r2, 8002abc <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002b9b 	.word	0x08002b9b
 8002ac0:	08002c01 	.word	0x08002c01
 8002ac4:	08002c1d 	.word	0x08002c1d
 8002ac8:	08002b8b 	.word	0x08002b8b
 8002acc:	08002c1d 	.word	0x08002c1d
 8002ad0:	08002c1d 	.word	0x08002c1d
 8002ad4:	08002c1d 	.word	0x08002c1d
 8002ad8:	08002b93 	.word	0x08002b93
 8002adc:	08002c1d 	.word	0x08002c1d
 8002ae0:	08002c1d 	.word	0x08002c1d
 8002ae4:	08002c1d 	.word	0x08002c1d
 8002ae8:	08002c1d 	.word	0x08002c1d
 8002aec:	08002c1d 	.word	0x08002c1d
 8002af0:	08002c1d 	.word	0x08002c1d
 8002af4:	08002c1d 	.word	0x08002c1d
 8002af8:	08002afd 	.word	0x08002afd
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8002afc:	4b4d      	ldr	r3, [pc, #308]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002b02:	4b4c      	ldr	r3, [pc, #304]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f000 8088 	beq.w	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	0c9b      	lsrs	r3, r3, #18
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	3330      	adds	r3, #48	; 0x30
 8002b1a:	443b      	add	r3, r7
 8002b1c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002b20:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d017      	beq.n	8002b5c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	0c5b      	lsrs	r3, r3, #17
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	3330      	adds	r3, #48	; 0x30
 8002b38:	443b      	add	r3, r7
 8002b3a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00d      	beq.n	8002b66 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b4a:	4a3b      	ldr	r2, [pc, #236]	; (8002c38 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	fb02 f303 	mul.w	r3, r2, r3
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5a:	e004      	b.n	8002b66 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	4a37      	ldr	r2, [pc, #220]	; (8002c3c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b66:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b72:	d102      	bne.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8002b78:	e052      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8002b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	4a30      	ldr	r2, [pc, #192]	; (8002c40 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8002b80:	fba2 2303 	umull	r2, r3, r2, r3
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b88:	e04a      	b.n	8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b8a:	f7ff fe27 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002b8e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b90:	e049      	b.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8002b92:	f7ff fe23 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002b96:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8002b98:	e045      	b.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002baa:	d108      	bne.n	8002bbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 8002bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bbc:	e01f      	b.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc8:	d109      	bne.n	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 8002bd6:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bdc:	e00f      	b.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002be8:	d11c      	bne.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002bea:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d016      	beq.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 8002bf6:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002bfa:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8002bfc:	e012      	b.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8002bfe:	e011      	b.n	8002c24 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c00:	f7ff fe54 	bl	80028ac <HAL_RCC_GetPCLK2Freq>
 8002c04:	4602      	mov	r2, r0
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	0b9b      	lsrs	r3, r3, #14
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	3301      	adds	r3, #1
 8002c12:	005b      	lsls	r3, r3, #1
 8002c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002c1a:	e004      	b.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 8002c1c:	bf00      	nop
 8002c1e:	e002      	b.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002c20:	bf00      	nop
 8002c22:	e000      	b.n	8002c26 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 8002c24:	bf00      	nop
    }
  }
  return (frequency);
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3734      	adds	r7, #52	; 0x34
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd90      	pop	{r4, r7, pc}
 8002c30:	0800384c 	.word	0x0800384c
 8002c34:	40021000 	.word	0x40021000
 8002c38:	007a1200 	.word	0x007a1200
 8002c3c:	003d0900 	.word	0x003d0900
 8002c40:	aaaaaaab 	.word	0xaaaaaaab

08002c44 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <HAL_SRAM_Init+0x1c>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5e:	d101      	bne.n	8002c64 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e038      	b.n	8002cd6 <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7fe f945 	bl	8000f08 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3308      	adds	r3, #8
 8002c86:	4619      	mov	r1, r3
 8002c88:	4610      	mov	r0, r2
 8002c8a:	f000 f829 	bl	8002ce0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	461a      	mov	r2, r3
 8002c98:	68b9      	ldr	r1, [r7, #8]
 8002c9a:	f000 f88b 	bl	8002db4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6858      	ldr	r0, [r3, #4]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	f000 f8b6 	bl	8002e1c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	6892      	ldr	r2, [r2, #8]
 8002cc4:	f041 0101 	orr.w	r1, r1, #1
 8002cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
	...

08002ce0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	6812      	ldr	r2, [r2, #0]
 8002cf8:	f023 0101 	bic.w	r1, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d102      	bne.n	8002d10 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002d0a:	2340      	movs	r3, #64	; 0x40
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	e001      	b.n	8002d14 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002d20:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002d26:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002d2c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002d32:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002d38:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002d3e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002d44:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8002d4a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002d50:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <FSMC_NORSRAM_Init+0xd0>)
 8002d70:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d78:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8002d80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	ea02 0103 	and.w	r1, r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4319      	orrs	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	0008fb7f 	.word	0x0008fb7f

08002db4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dca:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	431a      	orrs	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	041b      	lsls	r3, r3, #16
 8002de8:	431a      	orrs	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	051b      	lsls	r3, r3, #20
 8002df2:	431a      	orrs	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	3b02      	subs	r3, #2
 8002dfa:	061b      	lsls	r3, r3, #24
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	699b      	ldr	r3, [r3, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	3201      	adds	r2, #1
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bc80      	pop	{r7}
 8002e1a:	4770      	bx	lr

08002e1c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e30:	d11d      	bne.n	8002e6e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	6811      	ldr	r1, [r2, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	6852      	ldr	r2, [r2, #4]
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	4311      	orrs	r1, r2
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	6892      	ldr	r2, [r2, #8]
 8002e4e:	0212      	lsls	r2, r2, #8
 8002e50:	4311      	orrs	r1, r2
 8002e52:	68ba      	ldr	r2, [r7, #8]
 8002e54:	6992      	ldr	r2, [r2, #24]
 8002e56:	4311      	orrs	r1, r2
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	68d2      	ldr	r2, [r2, #12]
 8002e5c:	0412      	lsls	r2, r2, #16
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	ea43 0102 	orr.w	r1, r3, r2
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002e6c:	e005      	b.n	8002e7a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002e76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	cff00000 	.word	0xcff00000

08002e8c <__errno>:
 8002e8c:	4b01      	ldr	r3, [pc, #4]	; (8002e94 <__errno+0x8>)
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	2000000c 	.word	0x2000000c

08002e98 <__libc_init_array>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	2600      	movs	r6, #0
 8002e9c:	4d0c      	ldr	r5, [pc, #48]	; (8002ed0 <__libc_init_array+0x38>)
 8002e9e:	4c0d      	ldr	r4, [pc, #52]	; (8002ed4 <__libc_init_array+0x3c>)
 8002ea0:	1b64      	subs	r4, r4, r5
 8002ea2:	10a4      	asrs	r4, r4, #2
 8002ea4:	42a6      	cmp	r6, r4
 8002ea6:	d109      	bne.n	8002ebc <__libc_init_array+0x24>
 8002ea8:	f000 fc9c 	bl	80037e4 <_init>
 8002eac:	2600      	movs	r6, #0
 8002eae:	4d0a      	ldr	r5, [pc, #40]	; (8002ed8 <__libc_init_array+0x40>)
 8002eb0:	4c0a      	ldr	r4, [pc, #40]	; (8002edc <__libc_init_array+0x44>)
 8002eb2:	1b64      	subs	r4, r4, r5
 8002eb4:	10a4      	asrs	r4, r4, #2
 8002eb6:	42a6      	cmp	r6, r4
 8002eb8:	d105      	bne.n	8002ec6 <__libc_init_array+0x2e>
 8002eba:	bd70      	pop	{r4, r5, r6, pc}
 8002ebc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ec0:	4798      	blx	r3
 8002ec2:	3601      	adds	r6, #1
 8002ec4:	e7ee      	b.n	8002ea4 <__libc_init_array+0xc>
 8002ec6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eca:	4798      	blx	r3
 8002ecc:	3601      	adds	r6, #1
 8002ece:	e7f2      	b.n	8002eb6 <__libc_init_array+0x1e>
 8002ed0:	08003e98 	.word	0x08003e98
 8002ed4:	08003e98 	.word	0x08003e98
 8002ed8:	08003e98 	.word	0x08003e98
 8002edc:	08003e9c 	.word	0x08003e9c

08002ee0 <memset>:
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4402      	add	r2, r0
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d100      	bne.n	8002eea <memset+0xa>
 8002ee8:	4770      	bx	lr
 8002eea:	f803 1b01 	strb.w	r1, [r3], #1
 8002eee:	e7f9      	b.n	8002ee4 <memset+0x4>

08002ef0 <siprintf>:
 8002ef0:	b40e      	push	{r1, r2, r3}
 8002ef2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ef6:	b500      	push	{lr}
 8002ef8:	b09c      	sub	sp, #112	; 0x70
 8002efa:	ab1d      	add	r3, sp, #116	; 0x74
 8002efc:	9002      	str	r0, [sp, #8]
 8002efe:	9006      	str	r0, [sp, #24]
 8002f00:	9107      	str	r1, [sp, #28]
 8002f02:	9104      	str	r1, [sp, #16]
 8002f04:	4808      	ldr	r0, [pc, #32]	; (8002f28 <siprintf+0x38>)
 8002f06:	4909      	ldr	r1, [pc, #36]	; (8002f2c <siprintf+0x3c>)
 8002f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8002f0c:	9105      	str	r1, [sp, #20]
 8002f0e:	6800      	ldr	r0, [r0, #0]
 8002f10:	a902      	add	r1, sp, #8
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	f000 f868 	bl	8002fe8 <_svfiprintf_r>
 8002f18:	2200      	movs	r2, #0
 8002f1a:	9b02      	ldr	r3, [sp, #8]
 8002f1c:	701a      	strb	r2, [r3, #0]
 8002f1e:	b01c      	add	sp, #112	; 0x70
 8002f20:	f85d eb04 	ldr.w	lr, [sp], #4
 8002f24:	b003      	add	sp, #12
 8002f26:	4770      	bx	lr
 8002f28:	2000000c 	.word	0x2000000c
 8002f2c:	ffff0208 	.word	0xffff0208

08002f30 <__ssputs_r>:
 8002f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f34:	688e      	ldr	r6, [r1, #8]
 8002f36:	4682      	mov	sl, r0
 8002f38:	429e      	cmp	r6, r3
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	4690      	mov	r8, r2
 8002f3e:	461f      	mov	r7, r3
 8002f40:	d838      	bhi.n	8002fb4 <__ssputs_r+0x84>
 8002f42:	898a      	ldrh	r2, [r1, #12]
 8002f44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002f48:	d032      	beq.n	8002fb0 <__ssputs_r+0x80>
 8002f4a:	6825      	ldr	r5, [r4, #0]
 8002f4c:	6909      	ldr	r1, [r1, #16]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	eba5 0901 	sub.w	r9, r5, r1
 8002f54:	6965      	ldr	r5, [r4, #20]
 8002f56:	444b      	add	r3, r9
 8002f58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002f60:	106d      	asrs	r5, r5, #1
 8002f62:	429d      	cmp	r5, r3
 8002f64:	bf38      	it	cc
 8002f66:	461d      	movcc	r5, r3
 8002f68:	0553      	lsls	r3, r2, #21
 8002f6a:	d531      	bpl.n	8002fd0 <__ssputs_r+0xa0>
 8002f6c:	4629      	mov	r1, r5
 8002f6e:	f000 fb6f 	bl	8003650 <_malloc_r>
 8002f72:	4606      	mov	r6, r0
 8002f74:	b950      	cbnz	r0, 8002f8c <__ssputs_r+0x5c>
 8002f76:	230c      	movs	r3, #12
 8002f78:	f04f 30ff 	mov.w	r0, #4294967295
 8002f7c:	f8ca 3000 	str.w	r3, [sl]
 8002f80:	89a3      	ldrh	r3, [r4, #12]
 8002f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f86:	81a3      	strh	r3, [r4, #12]
 8002f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f8c:	464a      	mov	r2, r9
 8002f8e:	6921      	ldr	r1, [r4, #16]
 8002f90:	f000 face 	bl	8003530 <memcpy>
 8002f94:	89a3      	ldrh	r3, [r4, #12]
 8002f96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002f9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f9e:	81a3      	strh	r3, [r4, #12]
 8002fa0:	6126      	str	r6, [r4, #16]
 8002fa2:	444e      	add	r6, r9
 8002fa4:	6026      	str	r6, [r4, #0]
 8002fa6:	463e      	mov	r6, r7
 8002fa8:	6165      	str	r5, [r4, #20]
 8002faa:	eba5 0509 	sub.w	r5, r5, r9
 8002fae:	60a5      	str	r5, [r4, #8]
 8002fb0:	42be      	cmp	r6, r7
 8002fb2:	d900      	bls.n	8002fb6 <__ssputs_r+0x86>
 8002fb4:	463e      	mov	r6, r7
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	4641      	mov	r1, r8
 8002fba:	6820      	ldr	r0, [r4, #0]
 8002fbc:	f000 fac6 	bl	800354c <memmove>
 8002fc0:	68a3      	ldr	r3, [r4, #8]
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	1b9b      	subs	r3, r3, r6
 8002fc6:	60a3      	str	r3, [r4, #8]
 8002fc8:	6823      	ldr	r3, [r4, #0]
 8002fca:	4433      	add	r3, r6
 8002fcc:	6023      	str	r3, [r4, #0]
 8002fce:	e7db      	b.n	8002f88 <__ssputs_r+0x58>
 8002fd0:	462a      	mov	r2, r5
 8002fd2:	f000 fbb1 	bl	8003738 <_realloc_r>
 8002fd6:	4606      	mov	r6, r0
 8002fd8:	2800      	cmp	r0, #0
 8002fda:	d1e1      	bne.n	8002fa0 <__ssputs_r+0x70>
 8002fdc:	4650      	mov	r0, sl
 8002fde:	6921      	ldr	r1, [r4, #16]
 8002fe0:	f000 face 	bl	8003580 <_free_r>
 8002fe4:	e7c7      	b.n	8002f76 <__ssputs_r+0x46>
	...

08002fe8 <_svfiprintf_r>:
 8002fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fec:	4698      	mov	r8, r3
 8002fee:	898b      	ldrh	r3, [r1, #12]
 8002ff0:	4607      	mov	r7, r0
 8002ff2:	061b      	lsls	r3, r3, #24
 8002ff4:	460d      	mov	r5, r1
 8002ff6:	4614      	mov	r4, r2
 8002ff8:	b09d      	sub	sp, #116	; 0x74
 8002ffa:	d50e      	bpl.n	800301a <_svfiprintf_r+0x32>
 8002ffc:	690b      	ldr	r3, [r1, #16]
 8002ffe:	b963      	cbnz	r3, 800301a <_svfiprintf_r+0x32>
 8003000:	2140      	movs	r1, #64	; 0x40
 8003002:	f000 fb25 	bl	8003650 <_malloc_r>
 8003006:	6028      	str	r0, [r5, #0]
 8003008:	6128      	str	r0, [r5, #16]
 800300a:	b920      	cbnz	r0, 8003016 <_svfiprintf_r+0x2e>
 800300c:	230c      	movs	r3, #12
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	f04f 30ff 	mov.w	r0, #4294967295
 8003014:	e0d1      	b.n	80031ba <_svfiprintf_r+0x1d2>
 8003016:	2340      	movs	r3, #64	; 0x40
 8003018:	616b      	str	r3, [r5, #20]
 800301a:	2300      	movs	r3, #0
 800301c:	9309      	str	r3, [sp, #36]	; 0x24
 800301e:	2320      	movs	r3, #32
 8003020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003024:	2330      	movs	r3, #48	; 0x30
 8003026:	f04f 0901 	mov.w	r9, #1
 800302a:	f8cd 800c 	str.w	r8, [sp, #12]
 800302e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80031d4 <_svfiprintf_r+0x1ec>
 8003032:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003036:	4623      	mov	r3, r4
 8003038:	469a      	mov	sl, r3
 800303a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800303e:	b10a      	cbz	r2, 8003044 <_svfiprintf_r+0x5c>
 8003040:	2a25      	cmp	r2, #37	; 0x25
 8003042:	d1f9      	bne.n	8003038 <_svfiprintf_r+0x50>
 8003044:	ebba 0b04 	subs.w	fp, sl, r4
 8003048:	d00b      	beq.n	8003062 <_svfiprintf_r+0x7a>
 800304a:	465b      	mov	r3, fp
 800304c:	4622      	mov	r2, r4
 800304e:	4629      	mov	r1, r5
 8003050:	4638      	mov	r0, r7
 8003052:	f7ff ff6d 	bl	8002f30 <__ssputs_r>
 8003056:	3001      	adds	r0, #1
 8003058:	f000 80aa 	beq.w	80031b0 <_svfiprintf_r+0x1c8>
 800305c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800305e:	445a      	add	r2, fp
 8003060:	9209      	str	r2, [sp, #36]	; 0x24
 8003062:	f89a 3000 	ldrb.w	r3, [sl]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a2 	beq.w	80031b0 <_svfiprintf_r+0x1c8>
 800306c:	2300      	movs	r3, #0
 800306e:	f04f 32ff 	mov.w	r2, #4294967295
 8003072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003076:	f10a 0a01 	add.w	sl, sl, #1
 800307a:	9304      	str	r3, [sp, #16]
 800307c:	9307      	str	r3, [sp, #28]
 800307e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003082:	931a      	str	r3, [sp, #104]	; 0x68
 8003084:	4654      	mov	r4, sl
 8003086:	2205      	movs	r2, #5
 8003088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800308c:	4851      	ldr	r0, [pc, #324]	; (80031d4 <_svfiprintf_r+0x1ec>)
 800308e:	f000 fa41 	bl	8003514 <memchr>
 8003092:	9a04      	ldr	r2, [sp, #16]
 8003094:	b9d8      	cbnz	r0, 80030ce <_svfiprintf_r+0xe6>
 8003096:	06d0      	lsls	r0, r2, #27
 8003098:	bf44      	itt	mi
 800309a:	2320      	movmi	r3, #32
 800309c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030a0:	0711      	lsls	r1, r2, #28
 80030a2:	bf44      	itt	mi
 80030a4:	232b      	movmi	r3, #43	; 0x2b
 80030a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80030aa:	f89a 3000 	ldrb.w	r3, [sl]
 80030ae:	2b2a      	cmp	r3, #42	; 0x2a
 80030b0:	d015      	beq.n	80030de <_svfiprintf_r+0xf6>
 80030b2:	4654      	mov	r4, sl
 80030b4:	2000      	movs	r0, #0
 80030b6:	f04f 0c0a 	mov.w	ip, #10
 80030ba:	9a07      	ldr	r2, [sp, #28]
 80030bc:	4621      	mov	r1, r4
 80030be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80030c2:	3b30      	subs	r3, #48	; 0x30
 80030c4:	2b09      	cmp	r3, #9
 80030c6:	d94e      	bls.n	8003166 <_svfiprintf_r+0x17e>
 80030c8:	b1b0      	cbz	r0, 80030f8 <_svfiprintf_r+0x110>
 80030ca:	9207      	str	r2, [sp, #28]
 80030cc:	e014      	b.n	80030f8 <_svfiprintf_r+0x110>
 80030ce:	eba0 0308 	sub.w	r3, r0, r8
 80030d2:	fa09 f303 	lsl.w	r3, r9, r3
 80030d6:	4313      	orrs	r3, r2
 80030d8:	46a2      	mov	sl, r4
 80030da:	9304      	str	r3, [sp, #16]
 80030dc:	e7d2      	b.n	8003084 <_svfiprintf_r+0x9c>
 80030de:	9b03      	ldr	r3, [sp, #12]
 80030e0:	1d19      	adds	r1, r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	9103      	str	r1, [sp, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	bfbb      	ittet	lt
 80030ea:	425b      	neglt	r3, r3
 80030ec:	f042 0202 	orrlt.w	r2, r2, #2
 80030f0:	9307      	strge	r3, [sp, #28]
 80030f2:	9307      	strlt	r3, [sp, #28]
 80030f4:	bfb8      	it	lt
 80030f6:	9204      	strlt	r2, [sp, #16]
 80030f8:	7823      	ldrb	r3, [r4, #0]
 80030fa:	2b2e      	cmp	r3, #46	; 0x2e
 80030fc:	d10c      	bne.n	8003118 <_svfiprintf_r+0x130>
 80030fe:	7863      	ldrb	r3, [r4, #1]
 8003100:	2b2a      	cmp	r3, #42	; 0x2a
 8003102:	d135      	bne.n	8003170 <_svfiprintf_r+0x188>
 8003104:	9b03      	ldr	r3, [sp, #12]
 8003106:	3402      	adds	r4, #2
 8003108:	1d1a      	adds	r2, r3, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	9203      	str	r2, [sp, #12]
 800310e:	2b00      	cmp	r3, #0
 8003110:	bfb8      	it	lt
 8003112:	f04f 33ff 	movlt.w	r3, #4294967295
 8003116:	9305      	str	r3, [sp, #20]
 8003118:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80031d8 <_svfiprintf_r+0x1f0>
 800311c:	2203      	movs	r2, #3
 800311e:	4650      	mov	r0, sl
 8003120:	7821      	ldrb	r1, [r4, #0]
 8003122:	f000 f9f7 	bl	8003514 <memchr>
 8003126:	b140      	cbz	r0, 800313a <_svfiprintf_r+0x152>
 8003128:	2340      	movs	r3, #64	; 0x40
 800312a:	eba0 000a 	sub.w	r0, r0, sl
 800312e:	fa03 f000 	lsl.w	r0, r3, r0
 8003132:	9b04      	ldr	r3, [sp, #16]
 8003134:	3401      	adds	r4, #1
 8003136:	4303      	orrs	r3, r0
 8003138:	9304      	str	r3, [sp, #16]
 800313a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800313e:	2206      	movs	r2, #6
 8003140:	4826      	ldr	r0, [pc, #152]	; (80031dc <_svfiprintf_r+0x1f4>)
 8003142:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003146:	f000 f9e5 	bl	8003514 <memchr>
 800314a:	2800      	cmp	r0, #0
 800314c:	d038      	beq.n	80031c0 <_svfiprintf_r+0x1d8>
 800314e:	4b24      	ldr	r3, [pc, #144]	; (80031e0 <_svfiprintf_r+0x1f8>)
 8003150:	bb1b      	cbnz	r3, 800319a <_svfiprintf_r+0x1b2>
 8003152:	9b03      	ldr	r3, [sp, #12]
 8003154:	3307      	adds	r3, #7
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	3308      	adds	r3, #8
 800315c:	9303      	str	r3, [sp, #12]
 800315e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003160:	4433      	add	r3, r6
 8003162:	9309      	str	r3, [sp, #36]	; 0x24
 8003164:	e767      	b.n	8003036 <_svfiprintf_r+0x4e>
 8003166:	460c      	mov	r4, r1
 8003168:	2001      	movs	r0, #1
 800316a:	fb0c 3202 	mla	r2, ip, r2, r3
 800316e:	e7a5      	b.n	80030bc <_svfiprintf_r+0xd4>
 8003170:	2300      	movs	r3, #0
 8003172:	f04f 0c0a 	mov.w	ip, #10
 8003176:	4619      	mov	r1, r3
 8003178:	3401      	adds	r4, #1
 800317a:	9305      	str	r3, [sp, #20]
 800317c:	4620      	mov	r0, r4
 800317e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003182:	3a30      	subs	r2, #48	; 0x30
 8003184:	2a09      	cmp	r2, #9
 8003186:	d903      	bls.n	8003190 <_svfiprintf_r+0x1a8>
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0c5      	beq.n	8003118 <_svfiprintf_r+0x130>
 800318c:	9105      	str	r1, [sp, #20]
 800318e:	e7c3      	b.n	8003118 <_svfiprintf_r+0x130>
 8003190:	4604      	mov	r4, r0
 8003192:	2301      	movs	r3, #1
 8003194:	fb0c 2101 	mla	r1, ip, r1, r2
 8003198:	e7f0      	b.n	800317c <_svfiprintf_r+0x194>
 800319a:	ab03      	add	r3, sp, #12
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	462a      	mov	r2, r5
 80031a0:	4638      	mov	r0, r7
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <_svfiprintf_r+0x1fc>)
 80031a4:	a904      	add	r1, sp, #16
 80031a6:	f3af 8000 	nop.w
 80031aa:	1c42      	adds	r2, r0, #1
 80031ac:	4606      	mov	r6, r0
 80031ae:	d1d6      	bne.n	800315e <_svfiprintf_r+0x176>
 80031b0:	89ab      	ldrh	r3, [r5, #12]
 80031b2:	065b      	lsls	r3, r3, #25
 80031b4:	f53f af2c 	bmi.w	8003010 <_svfiprintf_r+0x28>
 80031b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80031ba:	b01d      	add	sp, #116	; 0x74
 80031bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031c0:	ab03      	add	r3, sp, #12
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	462a      	mov	r2, r5
 80031c6:	4638      	mov	r0, r7
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <_svfiprintf_r+0x1fc>)
 80031ca:	a904      	add	r1, sp, #16
 80031cc:	f000 f87c 	bl	80032c8 <_printf_i>
 80031d0:	e7eb      	b.n	80031aa <_svfiprintf_r+0x1c2>
 80031d2:	bf00      	nop
 80031d4:	08003e64 	.word	0x08003e64
 80031d8:	08003e6a 	.word	0x08003e6a
 80031dc:	08003e6e 	.word	0x08003e6e
 80031e0:	00000000 	.word	0x00000000
 80031e4:	08002f31 	.word	0x08002f31

080031e8 <_printf_common>:
 80031e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031ec:	4616      	mov	r6, r2
 80031ee:	4699      	mov	r9, r3
 80031f0:	688a      	ldr	r2, [r1, #8]
 80031f2:	690b      	ldr	r3, [r1, #16]
 80031f4:	4607      	mov	r7, r0
 80031f6:	4293      	cmp	r3, r2
 80031f8:	bfb8      	it	lt
 80031fa:	4613      	movlt	r3, r2
 80031fc:	6033      	str	r3, [r6, #0]
 80031fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003202:	460c      	mov	r4, r1
 8003204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003208:	b10a      	cbz	r2, 800320e <_printf_common+0x26>
 800320a:	3301      	adds	r3, #1
 800320c:	6033      	str	r3, [r6, #0]
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	0699      	lsls	r1, r3, #26
 8003212:	bf42      	ittt	mi
 8003214:	6833      	ldrmi	r3, [r6, #0]
 8003216:	3302      	addmi	r3, #2
 8003218:	6033      	strmi	r3, [r6, #0]
 800321a:	6825      	ldr	r5, [r4, #0]
 800321c:	f015 0506 	ands.w	r5, r5, #6
 8003220:	d106      	bne.n	8003230 <_printf_common+0x48>
 8003222:	f104 0a19 	add.w	sl, r4, #25
 8003226:	68e3      	ldr	r3, [r4, #12]
 8003228:	6832      	ldr	r2, [r6, #0]
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	42ab      	cmp	r3, r5
 800322e:	dc28      	bgt.n	8003282 <_printf_common+0x9a>
 8003230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003234:	1e13      	subs	r3, r2, #0
 8003236:	6822      	ldr	r2, [r4, #0]
 8003238:	bf18      	it	ne
 800323a:	2301      	movne	r3, #1
 800323c:	0692      	lsls	r2, r2, #26
 800323e:	d42d      	bmi.n	800329c <_printf_common+0xb4>
 8003240:	4649      	mov	r1, r9
 8003242:	4638      	mov	r0, r7
 8003244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003248:	47c0      	blx	r8
 800324a:	3001      	adds	r0, #1
 800324c:	d020      	beq.n	8003290 <_printf_common+0xa8>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	68e5      	ldr	r5, [r4, #12]
 8003252:	f003 0306 	and.w	r3, r3, #6
 8003256:	2b04      	cmp	r3, #4
 8003258:	bf18      	it	ne
 800325a:	2500      	movne	r5, #0
 800325c:	6832      	ldr	r2, [r6, #0]
 800325e:	f04f 0600 	mov.w	r6, #0
 8003262:	68a3      	ldr	r3, [r4, #8]
 8003264:	bf08      	it	eq
 8003266:	1aad      	subeq	r5, r5, r2
 8003268:	6922      	ldr	r2, [r4, #16]
 800326a:	bf08      	it	eq
 800326c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003270:	4293      	cmp	r3, r2
 8003272:	bfc4      	itt	gt
 8003274:	1a9b      	subgt	r3, r3, r2
 8003276:	18ed      	addgt	r5, r5, r3
 8003278:	341a      	adds	r4, #26
 800327a:	42b5      	cmp	r5, r6
 800327c:	d11a      	bne.n	80032b4 <_printf_common+0xcc>
 800327e:	2000      	movs	r0, #0
 8003280:	e008      	b.n	8003294 <_printf_common+0xac>
 8003282:	2301      	movs	r3, #1
 8003284:	4652      	mov	r2, sl
 8003286:	4649      	mov	r1, r9
 8003288:	4638      	mov	r0, r7
 800328a:	47c0      	blx	r8
 800328c:	3001      	adds	r0, #1
 800328e:	d103      	bne.n	8003298 <_printf_common+0xb0>
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003298:	3501      	adds	r5, #1
 800329a:	e7c4      	b.n	8003226 <_printf_common+0x3e>
 800329c:	2030      	movs	r0, #48	; 0x30
 800329e:	18e1      	adds	r1, r4, r3
 80032a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80032aa:	4422      	add	r2, r4
 80032ac:	3302      	adds	r3, #2
 80032ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80032b2:	e7c5      	b.n	8003240 <_printf_common+0x58>
 80032b4:	2301      	movs	r3, #1
 80032b6:	4622      	mov	r2, r4
 80032b8:	4649      	mov	r1, r9
 80032ba:	4638      	mov	r0, r7
 80032bc:	47c0      	blx	r8
 80032be:	3001      	adds	r0, #1
 80032c0:	d0e6      	beq.n	8003290 <_printf_common+0xa8>
 80032c2:	3601      	adds	r6, #1
 80032c4:	e7d9      	b.n	800327a <_printf_common+0x92>
	...

080032c8 <_printf_i>:
 80032c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80032cc:	7e0f      	ldrb	r7, [r1, #24]
 80032ce:	4691      	mov	r9, r2
 80032d0:	2f78      	cmp	r7, #120	; 0x78
 80032d2:	4680      	mov	r8, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	469a      	mov	sl, r3
 80032d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80032da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80032de:	d807      	bhi.n	80032f0 <_printf_i+0x28>
 80032e0:	2f62      	cmp	r7, #98	; 0x62
 80032e2:	d80a      	bhi.n	80032fa <_printf_i+0x32>
 80032e4:	2f00      	cmp	r7, #0
 80032e6:	f000 80d9 	beq.w	800349c <_printf_i+0x1d4>
 80032ea:	2f58      	cmp	r7, #88	; 0x58
 80032ec:	f000 80a4 	beq.w	8003438 <_printf_i+0x170>
 80032f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80032f8:	e03a      	b.n	8003370 <_printf_i+0xa8>
 80032fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80032fe:	2b15      	cmp	r3, #21
 8003300:	d8f6      	bhi.n	80032f0 <_printf_i+0x28>
 8003302:	a101      	add	r1, pc, #4	; (adr r1, 8003308 <_printf_i+0x40>)
 8003304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003308:	08003361 	.word	0x08003361
 800330c:	08003375 	.word	0x08003375
 8003310:	080032f1 	.word	0x080032f1
 8003314:	080032f1 	.word	0x080032f1
 8003318:	080032f1 	.word	0x080032f1
 800331c:	080032f1 	.word	0x080032f1
 8003320:	08003375 	.word	0x08003375
 8003324:	080032f1 	.word	0x080032f1
 8003328:	080032f1 	.word	0x080032f1
 800332c:	080032f1 	.word	0x080032f1
 8003330:	080032f1 	.word	0x080032f1
 8003334:	08003483 	.word	0x08003483
 8003338:	080033a5 	.word	0x080033a5
 800333c:	08003465 	.word	0x08003465
 8003340:	080032f1 	.word	0x080032f1
 8003344:	080032f1 	.word	0x080032f1
 8003348:	080034a5 	.word	0x080034a5
 800334c:	080032f1 	.word	0x080032f1
 8003350:	080033a5 	.word	0x080033a5
 8003354:	080032f1 	.word	0x080032f1
 8003358:	080032f1 	.word	0x080032f1
 800335c:	0800346d 	.word	0x0800346d
 8003360:	682b      	ldr	r3, [r5, #0]
 8003362:	1d1a      	adds	r2, r3, #4
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	602a      	str	r2, [r5, #0]
 8003368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800336c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003370:	2301      	movs	r3, #1
 8003372:	e0a4      	b.n	80034be <_printf_i+0x1f6>
 8003374:	6820      	ldr	r0, [r4, #0]
 8003376:	6829      	ldr	r1, [r5, #0]
 8003378:	0606      	lsls	r6, r0, #24
 800337a:	f101 0304 	add.w	r3, r1, #4
 800337e:	d50a      	bpl.n	8003396 <_printf_i+0xce>
 8003380:	680e      	ldr	r6, [r1, #0]
 8003382:	602b      	str	r3, [r5, #0]
 8003384:	2e00      	cmp	r6, #0
 8003386:	da03      	bge.n	8003390 <_printf_i+0xc8>
 8003388:	232d      	movs	r3, #45	; 0x2d
 800338a:	4276      	negs	r6, r6
 800338c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003390:	230a      	movs	r3, #10
 8003392:	485e      	ldr	r0, [pc, #376]	; (800350c <_printf_i+0x244>)
 8003394:	e019      	b.n	80033ca <_printf_i+0x102>
 8003396:	680e      	ldr	r6, [r1, #0]
 8003398:	f010 0f40 	tst.w	r0, #64	; 0x40
 800339c:	602b      	str	r3, [r5, #0]
 800339e:	bf18      	it	ne
 80033a0:	b236      	sxthne	r6, r6
 80033a2:	e7ef      	b.n	8003384 <_printf_i+0xbc>
 80033a4:	682b      	ldr	r3, [r5, #0]
 80033a6:	6820      	ldr	r0, [r4, #0]
 80033a8:	1d19      	adds	r1, r3, #4
 80033aa:	6029      	str	r1, [r5, #0]
 80033ac:	0601      	lsls	r1, r0, #24
 80033ae:	d501      	bpl.n	80033b4 <_printf_i+0xec>
 80033b0:	681e      	ldr	r6, [r3, #0]
 80033b2:	e002      	b.n	80033ba <_printf_i+0xf2>
 80033b4:	0646      	lsls	r6, r0, #25
 80033b6:	d5fb      	bpl.n	80033b0 <_printf_i+0xe8>
 80033b8:	881e      	ldrh	r6, [r3, #0]
 80033ba:	2f6f      	cmp	r7, #111	; 0x6f
 80033bc:	bf0c      	ite	eq
 80033be:	2308      	moveq	r3, #8
 80033c0:	230a      	movne	r3, #10
 80033c2:	4852      	ldr	r0, [pc, #328]	; (800350c <_printf_i+0x244>)
 80033c4:	2100      	movs	r1, #0
 80033c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80033ca:	6865      	ldr	r5, [r4, #4]
 80033cc:	2d00      	cmp	r5, #0
 80033ce:	bfa8      	it	ge
 80033d0:	6821      	ldrge	r1, [r4, #0]
 80033d2:	60a5      	str	r5, [r4, #8]
 80033d4:	bfa4      	itt	ge
 80033d6:	f021 0104 	bicge.w	r1, r1, #4
 80033da:	6021      	strge	r1, [r4, #0]
 80033dc:	b90e      	cbnz	r6, 80033e2 <_printf_i+0x11a>
 80033de:	2d00      	cmp	r5, #0
 80033e0:	d04d      	beq.n	800347e <_printf_i+0x1b6>
 80033e2:	4615      	mov	r5, r2
 80033e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80033e8:	fb03 6711 	mls	r7, r3, r1, r6
 80033ec:	5dc7      	ldrb	r7, [r0, r7]
 80033ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80033f2:	4637      	mov	r7, r6
 80033f4:	42bb      	cmp	r3, r7
 80033f6:	460e      	mov	r6, r1
 80033f8:	d9f4      	bls.n	80033e4 <_printf_i+0x11c>
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d10b      	bne.n	8003416 <_printf_i+0x14e>
 80033fe:	6823      	ldr	r3, [r4, #0]
 8003400:	07de      	lsls	r6, r3, #31
 8003402:	d508      	bpl.n	8003416 <_printf_i+0x14e>
 8003404:	6923      	ldr	r3, [r4, #16]
 8003406:	6861      	ldr	r1, [r4, #4]
 8003408:	4299      	cmp	r1, r3
 800340a:	bfde      	ittt	le
 800340c:	2330      	movle	r3, #48	; 0x30
 800340e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003412:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003416:	1b52      	subs	r2, r2, r5
 8003418:	6122      	str	r2, [r4, #16]
 800341a:	464b      	mov	r3, r9
 800341c:	4621      	mov	r1, r4
 800341e:	4640      	mov	r0, r8
 8003420:	f8cd a000 	str.w	sl, [sp]
 8003424:	aa03      	add	r2, sp, #12
 8003426:	f7ff fedf 	bl	80031e8 <_printf_common>
 800342a:	3001      	adds	r0, #1
 800342c:	d14c      	bne.n	80034c8 <_printf_i+0x200>
 800342e:	f04f 30ff 	mov.w	r0, #4294967295
 8003432:	b004      	add	sp, #16
 8003434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003438:	4834      	ldr	r0, [pc, #208]	; (800350c <_printf_i+0x244>)
 800343a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800343e:	6829      	ldr	r1, [r5, #0]
 8003440:	6823      	ldr	r3, [r4, #0]
 8003442:	f851 6b04 	ldr.w	r6, [r1], #4
 8003446:	6029      	str	r1, [r5, #0]
 8003448:	061d      	lsls	r5, r3, #24
 800344a:	d514      	bpl.n	8003476 <_printf_i+0x1ae>
 800344c:	07df      	lsls	r7, r3, #31
 800344e:	bf44      	itt	mi
 8003450:	f043 0320 	orrmi.w	r3, r3, #32
 8003454:	6023      	strmi	r3, [r4, #0]
 8003456:	b91e      	cbnz	r6, 8003460 <_printf_i+0x198>
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	f023 0320 	bic.w	r3, r3, #32
 800345e:	6023      	str	r3, [r4, #0]
 8003460:	2310      	movs	r3, #16
 8003462:	e7af      	b.n	80033c4 <_printf_i+0xfc>
 8003464:	6823      	ldr	r3, [r4, #0]
 8003466:	f043 0320 	orr.w	r3, r3, #32
 800346a:	6023      	str	r3, [r4, #0]
 800346c:	2378      	movs	r3, #120	; 0x78
 800346e:	4828      	ldr	r0, [pc, #160]	; (8003510 <_printf_i+0x248>)
 8003470:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003474:	e7e3      	b.n	800343e <_printf_i+0x176>
 8003476:	0659      	lsls	r1, r3, #25
 8003478:	bf48      	it	mi
 800347a:	b2b6      	uxthmi	r6, r6
 800347c:	e7e6      	b.n	800344c <_printf_i+0x184>
 800347e:	4615      	mov	r5, r2
 8003480:	e7bb      	b.n	80033fa <_printf_i+0x132>
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	6826      	ldr	r6, [r4, #0]
 8003486:	1d18      	adds	r0, r3, #4
 8003488:	6961      	ldr	r1, [r4, #20]
 800348a:	6028      	str	r0, [r5, #0]
 800348c:	0635      	lsls	r5, r6, #24
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	d501      	bpl.n	8003496 <_printf_i+0x1ce>
 8003492:	6019      	str	r1, [r3, #0]
 8003494:	e002      	b.n	800349c <_printf_i+0x1d4>
 8003496:	0670      	lsls	r0, r6, #25
 8003498:	d5fb      	bpl.n	8003492 <_printf_i+0x1ca>
 800349a:	8019      	strh	r1, [r3, #0]
 800349c:	2300      	movs	r3, #0
 800349e:	4615      	mov	r5, r2
 80034a0:	6123      	str	r3, [r4, #16]
 80034a2:	e7ba      	b.n	800341a <_printf_i+0x152>
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	2100      	movs	r1, #0
 80034a8:	1d1a      	adds	r2, r3, #4
 80034aa:	602a      	str	r2, [r5, #0]
 80034ac:	681d      	ldr	r5, [r3, #0]
 80034ae:	6862      	ldr	r2, [r4, #4]
 80034b0:	4628      	mov	r0, r5
 80034b2:	f000 f82f 	bl	8003514 <memchr>
 80034b6:	b108      	cbz	r0, 80034bc <_printf_i+0x1f4>
 80034b8:	1b40      	subs	r0, r0, r5
 80034ba:	6060      	str	r0, [r4, #4]
 80034bc:	6863      	ldr	r3, [r4, #4]
 80034be:	6123      	str	r3, [r4, #16]
 80034c0:	2300      	movs	r3, #0
 80034c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80034c6:	e7a8      	b.n	800341a <_printf_i+0x152>
 80034c8:	462a      	mov	r2, r5
 80034ca:	4649      	mov	r1, r9
 80034cc:	4640      	mov	r0, r8
 80034ce:	6923      	ldr	r3, [r4, #16]
 80034d0:	47d0      	blx	sl
 80034d2:	3001      	adds	r0, #1
 80034d4:	d0ab      	beq.n	800342e <_printf_i+0x166>
 80034d6:	6823      	ldr	r3, [r4, #0]
 80034d8:	079b      	lsls	r3, r3, #30
 80034da:	d413      	bmi.n	8003504 <_printf_i+0x23c>
 80034dc:	68e0      	ldr	r0, [r4, #12]
 80034de:	9b03      	ldr	r3, [sp, #12]
 80034e0:	4298      	cmp	r0, r3
 80034e2:	bfb8      	it	lt
 80034e4:	4618      	movlt	r0, r3
 80034e6:	e7a4      	b.n	8003432 <_printf_i+0x16a>
 80034e8:	2301      	movs	r3, #1
 80034ea:	4632      	mov	r2, r6
 80034ec:	4649      	mov	r1, r9
 80034ee:	4640      	mov	r0, r8
 80034f0:	47d0      	blx	sl
 80034f2:	3001      	adds	r0, #1
 80034f4:	d09b      	beq.n	800342e <_printf_i+0x166>
 80034f6:	3501      	adds	r5, #1
 80034f8:	68e3      	ldr	r3, [r4, #12]
 80034fa:	9903      	ldr	r1, [sp, #12]
 80034fc:	1a5b      	subs	r3, r3, r1
 80034fe:	42ab      	cmp	r3, r5
 8003500:	dcf2      	bgt.n	80034e8 <_printf_i+0x220>
 8003502:	e7eb      	b.n	80034dc <_printf_i+0x214>
 8003504:	2500      	movs	r5, #0
 8003506:	f104 0619 	add.w	r6, r4, #25
 800350a:	e7f5      	b.n	80034f8 <_printf_i+0x230>
 800350c:	08003e75 	.word	0x08003e75
 8003510:	08003e86 	.word	0x08003e86

08003514 <memchr>:
 8003514:	4603      	mov	r3, r0
 8003516:	b510      	push	{r4, lr}
 8003518:	b2c9      	uxtb	r1, r1
 800351a:	4402      	add	r2, r0
 800351c:	4293      	cmp	r3, r2
 800351e:	4618      	mov	r0, r3
 8003520:	d101      	bne.n	8003526 <memchr+0x12>
 8003522:	2000      	movs	r0, #0
 8003524:	e003      	b.n	800352e <memchr+0x1a>
 8003526:	7804      	ldrb	r4, [r0, #0]
 8003528:	3301      	adds	r3, #1
 800352a:	428c      	cmp	r4, r1
 800352c:	d1f6      	bne.n	800351c <memchr+0x8>
 800352e:	bd10      	pop	{r4, pc}

08003530 <memcpy>:
 8003530:	440a      	add	r2, r1
 8003532:	4291      	cmp	r1, r2
 8003534:	f100 33ff 	add.w	r3, r0, #4294967295
 8003538:	d100      	bne.n	800353c <memcpy+0xc>
 800353a:	4770      	bx	lr
 800353c:	b510      	push	{r4, lr}
 800353e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003542:	4291      	cmp	r1, r2
 8003544:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003548:	d1f9      	bne.n	800353e <memcpy+0xe>
 800354a:	bd10      	pop	{r4, pc}

0800354c <memmove>:
 800354c:	4288      	cmp	r0, r1
 800354e:	b510      	push	{r4, lr}
 8003550:	eb01 0402 	add.w	r4, r1, r2
 8003554:	d902      	bls.n	800355c <memmove+0x10>
 8003556:	4284      	cmp	r4, r0
 8003558:	4623      	mov	r3, r4
 800355a:	d807      	bhi.n	800356c <memmove+0x20>
 800355c:	1e43      	subs	r3, r0, #1
 800355e:	42a1      	cmp	r1, r4
 8003560:	d008      	beq.n	8003574 <memmove+0x28>
 8003562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003566:	f803 2f01 	strb.w	r2, [r3, #1]!
 800356a:	e7f8      	b.n	800355e <memmove+0x12>
 800356c:	4601      	mov	r1, r0
 800356e:	4402      	add	r2, r0
 8003570:	428a      	cmp	r2, r1
 8003572:	d100      	bne.n	8003576 <memmove+0x2a>
 8003574:	bd10      	pop	{r4, pc}
 8003576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800357a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800357e:	e7f7      	b.n	8003570 <memmove+0x24>

08003580 <_free_r>:
 8003580:	b538      	push	{r3, r4, r5, lr}
 8003582:	4605      	mov	r5, r0
 8003584:	2900      	cmp	r1, #0
 8003586:	d040      	beq.n	800360a <_free_r+0x8a>
 8003588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800358c:	1f0c      	subs	r4, r1, #4
 800358e:	2b00      	cmp	r3, #0
 8003590:	bfb8      	it	lt
 8003592:	18e4      	addlt	r4, r4, r3
 8003594:	f000 f910 	bl	80037b8 <__malloc_lock>
 8003598:	4a1c      	ldr	r2, [pc, #112]	; (800360c <_free_r+0x8c>)
 800359a:	6813      	ldr	r3, [r2, #0]
 800359c:	b933      	cbnz	r3, 80035ac <_free_r+0x2c>
 800359e:	6063      	str	r3, [r4, #4]
 80035a0:	6014      	str	r4, [r2, #0]
 80035a2:	4628      	mov	r0, r5
 80035a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035a8:	f000 b90c 	b.w	80037c4 <__malloc_unlock>
 80035ac:	42a3      	cmp	r3, r4
 80035ae:	d908      	bls.n	80035c2 <_free_r+0x42>
 80035b0:	6820      	ldr	r0, [r4, #0]
 80035b2:	1821      	adds	r1, r4, r0
 80035b4:	428b      	cmp	r3, r1
 80035b6:	bf01      	itttt	eq
 80035b8:	6819      	ldreq	r1, [r3, #0]
 80035ba:	685b      	ldreq	r3, [r3, #4]
 80035bc:	1809      	addeq	r1, r1, r0
 80035be:	6021      	streq	r1, [r4, #0]
 80035c0:	e7ed      	b.n	800359e <_free_r+0x1e>
 80035c2:	461a      	mov	r2, r3
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	b10b      	cbz	r3, 80035cc <_free_r+0x4c>
 80035c8:	42a3      	cmp	r3, r4
 80035ca:	d9fa      	bls.n	80035c2 <_free_r+0x42>
 80035cc:	6811      	ldr	r1, [r2, #0]
 80035ce:	1850      	adds	r0, r2, r1
 80035d0:	42a0      	cmp	r0, r4
 80035d2:	d10b      	bne.n	80035ec <_free_r+0x6c>
 80035d4:	6820      	ldr	r0, [r4, #0]
 80035d6:	4401      	add	r1, r0
 80035d8:	1850      	adds	r0, r2, r1
 80035da:	4283      	cmp	r3, r0
 80035dc:	6011      	str	r1, [r2, #0]
 80035de:	d1e0      	bne.n	80035a2 <_free_r+0x22>
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	4401      	add	r1, r0
 80035e6:	6011      	str	r1, [r2, #0]
 80035e8:	6053      	str	r3, [r2, #4]
 80035ea:	e7da      	b.n	80035a2 <_free_r+0x22>
 80035ec:	d902      	bls.n	80035f4 <_free_r+0x74>
 80035ee:	230c      	movs	r3, #12
 80035f0:	602b      	str	r3, [r5, #0]
 80035f2:	e7d6      	b.n	80035a2 <_free_r+0x22>
 80035f4:	6820      	ldr	r0, [r4, #0]
 80035f6:	1821      	adds	r1, r4, r0
 80035f8:	428b      	cmp	r3, r1
 80035fa:	bf01      	itttt	eq
 80035fc:	6819      	ldreq	r1, [r3, #0]
 80035fe:	685b      	ldreq	r3, [r3, #4]
 8003600:	1809      	addeq	r1, r1, r0
 8003602:	6021      	streq	r1, [r4, #0]
 8003604:	6063      	str	r3, [r4, #4]
 8003606:	6054      	str	r4, [r2, #4]
 8003608:	e7cb      	b.n	80035a2 <_free_r+0x22>
 800360a:	bd38      	pop	{r3, r4, r5, pc}
 800360c:	2000014c 	.word	0x2000014c

08003610 <sbrk_aligned>:
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	4e0e      	ldr	r6, [pc, #56]	; (800364c <sbrk_aligned+0x3c>)
 8003614:	460c      	mov	r4, r1
 8003616:	6831      	ldr	r1, [r6, #0]
 8003618:	4605      	mov	r5, r0
 800361a:	b911      	cbnz	r1, 8003622 <sbrk_aligned+0x12>
 800361c:	f000 f8bc 	bl	8003798 <_sbrk_r>
 8003620:	6030      	str	r0, [r6, #0]
 8003622:	4621      	mov	r1, r4
 8003624:	4628      	mov	r0, r5
 8003626:	f000 f8b7 	bl	8003798 <_sbrk_r>
 800362a:	1c43      	adds	r3, r0, #1
 800362c:	d00a      	beq.n	8003644 <sbrk_aligned+0x34>
 800362e:	1cc4      	adds	r4, r0, #3
 8003630:	f024 0403 	bic.w	r4, r4, #3
 8003634:	42a0      	cmp	r0, r4
 8003636:	d007      	beq.n	8003648 <sbrk_aligned+0x38>
 8003638:	1a21      	subs	r1, r4, r0
 800363a:	4628      	mov	r0, r5
 800363c:	f000 f8ac 	bl	8003798 <_sbrk_r>
 8003640:	3001      	adds	r0, #1
 8003642:	d101      	bne.n	8003648 <sbrk_aligned+0x38>
 8003644:	f04f 34ff 	mov.w	r4, #4294967295
 8003648:	4620      	mov	r0, r4
 800364a:	bd70      	pop	{r4, r5, r6, pc}
 800364c:	20000150 	.word	0x20000150

08003650 <_malloc_r>:
 8003650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003654:	1ccd      	adds	r5, r1, #3
 8003656:	f025 0503 	bic.w	r5, r5, #3
 800365a:	3508      	adds	r5, #8
 800365c:	2d0c      	cmp	r5, #12
 800365e:	bf38      	it	cc
 8003660:	250c      	movcc	r5, #12
 8003662:	2d00      	cmp	r5, #0
 8003664:	4607      	mov	r7, r0
 8003666:	db01      	blt.n	800366c <_malloc_r+0x1c>
 8003668:	42a9      	cmp	r1, r5
 800366a:	d905      	bls.n	8003678 <_malloc_r+0x28>
 800366c:	230c      	movs	r3, #12
 800366e:	2600      	movs	r6, #0
 8003670:	603b      	str	r3, [r7, #0]
 8003672:	4630      	mov	r0, r6
 8003674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003678:	4e2e      	ldr	r6, [pc, #184]	; (8003734 <_malloc_r+0xe4>)
 800367a:	f000 f89d 	bl	80037b8 <__malloc_lock>
 800367e:	6833      	ldr	r3, [r6, #0]
 8003680:	461c      	mov	r4, r3
 8003682:	bb34      	cbnz	r4, 80036d2 <_malloc_r+0x82>
 8003684:	4629      	mov	r1, r5
 8003686:	4638      	mov	r0, r7
 8003688:	f7ff ffc2 	bl	8003610 <sbrk_aligned>
 800368c:	1c43      	adds	r3, r0, #1
 800368e:	4604      	mov	r4, r0
 8003690:	d14d      	bne.n	800372e <_malloc_r+0xde>
 8003692:	6834      	ldr	r4, [r6, #0]
 8003694:	4626      	mov	r6, r4
 8003696:	2e00      	cmp	r6, #0
 8003698:	d140      	bne.n	800371c <_malloc_r+0xcc>
 800369a:	6823      	ldr	r3, [r4, #0]
 800369c:	4631      	mov	r1, r6
 800369e:	4638      	mov	r0, r7
 80036a0:	eb04 0803 	add.w	r8, r4, r3
 80036a4:	f000 f878 	bl	8003798 <_sbrk_r>
 80036a8:	4580      	cmp	r8, r0
 80036aa:	d13a      	bne.n	8003722 <_malloc_r+0xd2>
 80036ac:	6821      	ldr	r1, [r4, #0]
 80036ae:	3503      	adds	r5, #3
 80036b0:	1a6d      	subs	r5, r5, r1
 80036b2:	f025 0503 	bic.w	r5, r5, #3
 80036b6:	3508      	adds	r5, #8
 80036b8:	2d0c      	cmp	r5, #12
 80036ba:	bf38      	it	cc
 80036bc:	250c      	movcc	r5, #12
 80036be:	4638      	mov	r0, r7
 80036c0:	4629      	mov	r1, r5
 80036c2:	f7ff ffa5 	bl	8003610 <sbrk_aligned>
 80036c6:	3001      	adds	r0, #1
 80036c8:	d02b      	beq.n	8003722 <_malloc_r+0xd2>
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	442b      	add	r3, r5
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	e00e      	b.n	80036f0 <_malloc_r+0xa0>
 80036d2:	6822      	ldr	r2, [r4, #0]
 80036d4:	1b52      	subs	r2, r2, r5
 80036d6:	d41e      	bmi.n	8003716 <_malloc_r+0xc6>
 80036d8:	2a0b      	cmp	r2, #11
 80036da:	d916      	bls.n	800370a <_malloc_r+0xba>
 80036dc:	1961      	adds	r1, r4, r5
 80036de:	42a3      	cmp	r3, r4
 80036e0:	6025      	str	r5, [r4, #0]
 80036e2:	bf18      	it	ne
 80036e4:	6059      	strne	r1, [r3, #4]
 80036e6:	6863      	ldr	r3, [r4, #4]
 80036e8:	bf08      	it	eq
 80036ea:	6031      	streq	r1, [r6, #0]
 80036ec:	5162      	str	r2, [r4, r5]
 80036ee:	604b      	str	r3, [r1, #4]
 80036f0:	4638      	mov	r0, r7
 80036f2:	f104 060b 	add.w	r6, r4, #11
 80036f6:	f000 f865 	bl	80037c4 <__malloc_unlock>
 80036fa:	f026 0607 	bic.w	r6, r6, #7
 80036fe:	1d23      	adds	r3, r4, #4
 8003700:	1af2      	subs	r2, r6, r3
 8003702:	d0b6      	beq.n	8003672 <_malloc_r+0x22>
 8003704:	1b9b      	subs	r3, r3, r6
 8003706:	50a3      	str	r3, [r4, r2]
 8003708:	e7b3      	b.n	8003672 <_malloc_r+0x22>
 800370a:	6862      	ldr	r2, [r4, #4]
 800370c:	42a3      	cmp	r3, r4
 800370e:	bf0c      	ite	eq
 8003710:	6032      	streq	r2, [r6, #0]
 8003712:	605a      	strne	r2, [r3, #4]
 8003714:	e7ec      	b.n	80036f0 <_malloc_r+0xa0>
 8003716:	4623      	mov	r3, r4
 8003718:	6864      	ldr	r4, [r4, #4]
 800371a:	e7b2      	b.n	8003682 <_malloc_r+0x32>
 800371c:	4634      	mov	r4, r6
 800371e:	6876      	ldr	r6, [r6, #4]
 8003720:	e7b9      	b.n	8003696 <_malloc_r+0x46>
 8003722:	230c      	movs	r3, #12
 8003724:	4638      	mov	r0, r7
 8003726:	603b      	str	r3, [r7, #0]
 8003728:	f000 f84c 	bl	80037c4 <__malloc_unlock>
 800372c:	e7a1      	b.n	8003672 <_malloc_r+0x22>
 800372e:	6025      	str	r5, [r4, #0]
 8003730:	e7de      	b.n	80036f0 <_malloc_r+0xa0>
 8003732:	bf00      	nop
 8003734:	2000014c 	.word	0x2000014c

08003738 <_realloc_r>:
 8003738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800373c:	4680      	mov	r8, r0
 800373e:	4614      	mov	r4, r2
 8003740:	460e      	mov	r6, r1
 8003742:	b921      	cbnz	r1, 800374e <_realloc_r+0x16>
 8003744:	4611      	mov	r1, r2
 8003746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800374a:	f7ff bf81 	b.w	8003650 <_malloc_r>
 800374e:	b92a      	cbnz	r2, 800375c <_realloc_r+0x24>
 8003750:	f7ff ff16 	bl	8003580 <_free_r>
 8003754:	4625      	mov	r5, r4
 8003756:	4628      	mov	r0, r5
 8003758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800375c:	f000 f838 	bl	80037d0 <_malloc_usable_size_r>
 8003760:	4284      	cmp	r4, r0
 8003762:	4607      	mov	r7, r0
 8003764:	d802      	bhi.n	800376c <_realloc_r+0x34>
 8003766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800376a:	d812      	bhi.n	8003792 <_realloc_r+0x5a>
 800376c:	4621      	mov	r1, r4
 800376e:	4640      	mov	r0, r8
 8003770:	f7ff ff6e 	bl	8003650 <_malloc_r>
 8003774:	4605      	mov	r5, r0
 8003776:	2800      	cmp	r0, #0
 8003778:	d0ed      	beq.n	8003756 <_realloc_r+0x1e>
 800377a:	42bc      	cmp	r4, r7
 800377c:	4622      	mov	r2, r4
 800377e:	4631      	mov	r1, r6
 8003780:	bf28      	it	cs
 8003782:	463a      	movcs	r2, r7
 8003784:	f7ff fed4 	bl	8003530 <memcpy>
 8003788:	4631      	mov	r1, r6
 800378a:	4640      	mov	r0, r8
 800378c:	f7ff fef8 	bl	8003580 <_free_r>
 8003790:	e7e1      	b.n	8003756 <_realloc_r+0x1e>
 8003792:	4635      	mov	r5, r6
 8003794:	e7df      	b.n	8003756 <_realloc_r+0x1e>
	...

08003798 <_sbrk_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	2300      	movs	r3, #0
 800379c:	4d05      	ldr	r5, [pc, #20]	; (80037b4 <_sbrk_r+0x1c>)
 800379e:	4604      	mov	r4, r0
 80037a0:	4608      	mov	r0, r1
 80037a2:	602b      	str	r3, [r5, #0]
 80037a4:	f7fd fc00 	bl	8000fa8 <_sbrk>
 80037a8:	1c43      	adds	r3, r0, #1
 80037aa:	d102      	bne.n	80037b2 <_sbrk_r+0x1a>
 80037ac:	682b      	ldr	r3, [r5, #0]
 80037ae:	b103      	cbz	r3, 80037b2 <_sbrk_r+0x1a>
 80037b0:	6023      	str	r3, [r4, #0]
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	20000154 	.word	0x20000154

080037b8 <__malloc_lock>:
 80037b8:	4801      	ldr	r0, [pc, #4]	; (80037c0 <__malloc_lock+0x8>)
 80037ba:	f000 b811 	b.w	80037e0 <__retarget_lock_acquire_recursive>
 80037be:	bf00      	nop
 80037c0:	20000158 	.word	0x20000158

080037c4 <__malloc_unlock>:
 80037c4:	4801      	ldr	r0, [pc, #4]	; (80037cc <__malloc_unlock+0x8>)
 80037c6:	f000 b80c 	b.w	80037e2 <__retarget_lock_release_recursive>
 80037ca:	bf00      	nop
 80037cc:	20000158 	.word	0x20000158

080037d0 <_malloc_usable_size_r>:
 80037d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d4:	1f18      	subs	r0, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bfbc      	itt	lt
 80037da:	580b      	ldrlt	r3, [r1, r0]
 80037dc:	18c0      	addlt	r0, r0, r3
 80037de:	4770      	bx	lr

080037e0 <__retarget_lock_acquire_recursive>:
 80037e0:	4770      	bx	lr

080037e2 <__retarget_lock_release_recursive>:
 80037e2:	4770      	bx	lr

080037e4 <_init>:
 80037e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e6:	bf00      	nop
 80037e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ea:	bc08      	pop	{r3}
 80037ec:	469e      	mov	lr, r3
 80037ee:	4770      	bx	lr

080037f0 <_fini>:
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037f2:	bf00      	nop
 80037f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037f6:	bc08      	pop	{r3}
 80037f8:	469e      	mov	lr, r3
 80037fa:	4770      	bx	lr
