
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005094  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  08005280  08005280  00015280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005958  08005958  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005958  08005958  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005958  08005958  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005958  08005958  00015958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800595c  0800595c  0001595c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005960  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  080059d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  080059d0  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b69a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024c5  00000000  00000000  0002b733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af8  00000000  00000000  0002dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002e6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a059  00000000  00000000  0002f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee2f  00000000  00000000  00049121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009759e  00000000  00000000  00057f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef4ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000319c  00000000  00000000  000ef540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000070 	.word	0x20000070
 8000204:	00000000 	.word	0x00000000
 8000208:	08005264 	.word	0x08005264

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000074 	.word	0x20000074
 8000224:	08005264 	.word	0x08005264

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b34:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b36:	4a19      	ldr	r2, [pc, #100]	; (8000b9c <MX_ADC1_Init+0x78>)
 8000b38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b4e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000b52:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b62:	f000 ff91 	bl	8001a88 <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000b6c:	f000 fe27 	bl	80017be <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b70:	2305      	movs	r3, #5
 8000b72:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8000b78:	2305      	movs	r3, #5
 8000b7a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_ADC1_Init+0x74>)
 8000b82:	f001 f86b 	bl	8001c5c <HAL_ADC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b8c:	f000 fe17 	bl	80017be <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	2000008c 	.word	0x2000008c
 8000b9c:	40012400 	.word	0x40012400

08000ba0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <HAL_ADC_MspInit+0x6c>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d121      	bne.n	8000c04 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <HAL_ADC_MspInit+0x70>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <HAL_ADC_MspInit+0x70>)
 8000bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_ADC_MspInit+0x70>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <HAL_ADC_MspInit+0x70>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a0c      	ldr	r2, [pc, #48]	; (8000c10 <HAL_ADC_MspInit+0x70>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_ADC_MspInit+0x70>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bf0:	2320      	movs	r3, #32
 8000bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bf4:	2303      	movs	r3, #3
 8000bf6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_ADC_MspInit+0x74>)
 8000c00:	f001 fb7a 	bl	80022f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40012400 	.word	0x40012400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010800 	.word	0x40010800

08000c18 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
 8000c2c:	615a      	str	r2, [r3, #20]
 8000c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000c30:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c32:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000c36:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c3a:	4a27      	ldr	r2, [pc, #156]	; (8000cd8 <MX_FSMC_Init+0xc0>)
 8000c3c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000c44:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000c50:	4b20      	ldr	r3, [pc, #128]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c52:	2210      	movs	r2, #16
 8000c54:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c5c:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c82:	4b14      	ldr	r3, [pc, #80]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000c88:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000c8e:	230f      	movs	r3, #15
 8000c90:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000c92:	230f      	movs	r3, #15
 8000c94:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000c96:	23ff      	movs	r3, #255	; 0xff
 8000c98:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000c9a:	230f      	movs	r3, #15
 8000c9c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000c9e:	2310      	movs	r3, #16
 8000ca0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000ca2:	2311      	movs	r3, #17
 8000ca4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000caa:	1d3b      	adds	r3, r7, #4
 8000cac:	2200      	movs	r2, #0
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <MX_FSMC_Init+0xbc>)
 8000cb2:	f003 faa3 	bl	80041fc <HAL_SRAM_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8000cbc:	f000 fd7f 	bl	80017be <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_FSMC_Init+0xc4>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <MX_FSMC_Init+0xc4>)
 8000cc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cca:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000bc 	.word	0x200000bc
 8000cd8:	a0000104 	.word	0xa0000104
 8000cdc:	40010000 	.word	0x40010000

08000ce0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0308 	add.w	r3, r7, #8
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <HAL_FSMC_MspInit+0x78>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d129      	bne.n	8000d50 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <HAL_FSMC_MspInit+0x78>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_FSMC_MspInit+0x7c>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <HAL_FSMC_MspInit+0x7c>)
 8000d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0c:	6153      	str	r3, [r2, #20]
 8000d0e:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_FSMC_MspInit+0x7c>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000d1a:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000d1e:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d20:	2302      	movs	r3, #2
 8000d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <HAL_FSMC_MspInit+0x80>)
 8000d30:	f001 fae2 	bl	80022f8 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d34:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8000d38:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	4806      	ldr	r0, [pc, #24]	; (8000d64 <HAL_FSMC_MspInit+0x84>)
 8000d4a:	f001 fad5 	bl	80022f8 <HAL_GPIO_Init>
 8000d4e:	e000      	b.n	8000d52 <HAL_FSMC_MspInit+0x72>
    return;
 8000d50:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8000d52:	3718      	adds	r7, #24
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000104 	.word	0x20000104
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40011800 	.word	0x40011800
 8000d64:	40011400 	.word	0x40011400

08000d68 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000d70:	f7ff ffb6 	bl	8000ce0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000d74:	bf00      	nop
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d90:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000d96:	f043 0310 	orr.w	r3, r3, #16
 8000d9a:	6193      	str	r3, [r2, #24]
 8000d9c:	4b3b      	ldr	r3, [pc, #236]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000d9e:	699b      	ldr	r3, [r3, #24]
 8000da0:	f003 0310 	and.w	r3, r3, #16
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a37      	ldr	r2, [pc, #220]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000dae:	f043 0304 	orr.w	r3, r3, #4
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b35      	ldr	r3, [pc, #212]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f003 0304 	and.w	r3, r3, #4
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc0:	4b32      	ldr	r3, [pc, #200]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a31      	ldr	r2, [pc, #196]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a2b      	ldr	r2, [pc, #172]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df0:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000df6:	f043 0320 	orr.w	r3, r3, #32
 8000dfa:	6193      	str	r3, [r2, #24]
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <MX_GPIO_Init+0x110>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	f003 0320 	and.w	r3, r3, #32
 8000e04:	607b      	str	r3, [r7, #4]
 8000e06:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	4820      	ldr	r0, [pc, #128]	; (8000e90 <MX_GPIO_Init+0x114>)
 8000e10:	f001 fc06 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2102      	movs	r1, #2
 8000e18:	481e      	ldr	r0, [pc, #120]	; (8000e94 <MX_GPIO_Init+0x118>)
 8000e1a:	f001 fc01 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <MX_GPIO_Init+0x11c>)
 8000e26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	4619      	mov	r1, r3
 8000e32:	481a      	ldr	r0, [pc, #104]	; (8000e9c <MX_GPIO_Init+0x120>)
 8000e34:	f001 fa60 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e46:	2303      	movs	r3, #3
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480f      	ldr	r0, [pc, #60]	; (8000e90 <MX_GPIO_Init+0x114>)
 8000e52:	f001 fa51 	bl	80022f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0318 	add.w	r3, r7, #24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <MX_GPIO_Init+0x118>)
 8000e6e:	f001 fa43 	bl	80022f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2028      	movs	r0, #40	; 0x28
 8000e78:	f001 fa07 	bl	800228a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7c:	2028      	movs	r0, #40	; 0x28
 8000e7e:	f001 fa20 	bl	80022c2 <HAL_NVIC_EnableIRQ>

}
 8000e82:	bf00      	nop
 8000e84:	3728      	adds	r7, #40	; 0x28
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40011400 	.word	0x40011400
 8000e94:	40011800 	.word	0x40011800
 8000e98:	10110000 	.word	0x10110000
 8000e9c:	40011000 	.word	0x40011000

08000ea0 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000ea6:	4a13      	ldr	r2, [pc, #76]	; (8000ef4 <MX_I2C2_Init+0x54>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000eac:	4a12      	ldr	r2, [pc, #72]	; (8000ef8 <MX_I2C2_Init+0x58>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	; (8000ef0 <MX_I2C2_Init+0x50>)
 8000ede:	f001 fbd9 	bl	8002694 <HAL_I2C_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ee8:	f000 fc69 	bl	80017be <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000108 	.word	0x20000108
 8000ef4:	40005800 	.word	0x40005800
 8000ef8:	000186a0 	.word	0x000186a0

08000efc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C2)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a16      	ldr	r2, [pc, #88]	; (8000f70 <HAL_I2C_MspInit+0x74>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d124      	bne.n	8000f66 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <HAL_I2C_MspInit+0x78>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <HAL_I2C_MspInit+0x78>)
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_I2C_MspInit+0x78>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0308 	and.w	r3, r3, #8
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f3a:	2312      	movs	r3, #18
 8000f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4619      	mov	r1, r3
 8000f48:	480b      	ldr	r0, [pc, #44]	; (8000f78 <HAL_I2C_MspInit+0x7c>)
 8000f4a:	f001 f9d5 	bl	80022f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	; (8000f74 <HAL_I2C_MspInit+0x78>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <HAL_I2C_MspInit+0x78>)
 8000f54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f58:	61d3      	str	r3, [r2, #28]
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_I2C_MspInit+0x78>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3720      	adds	r7, #32
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40005800 	.word	0x40005800
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010c00 	.word	0x40010c00

08000f7c <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	e002      	b.n	8000f8c <Delay+0x10>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f9      	bne.n	8000f86 <Delay+0xa>
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <LCD_INIT>:

void LCD_INIT ( void )
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);      
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f000 f829 	bl	8000ffc <LCD_BackLed_Control>
	LCD_Rst();
 8000faa:	f000 f80f 	bl	8000fcc <LCD_Rst>
	LCD_REG_Config();
 8000fae:	f000 f85f 	bl	8001070 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000fbc:	22f0      	movs	r2, #240	; 0xf0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 f9e6 	bl	8001392 <LCD_Clear>
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <LCD_Rst+0x28>)
 8000fd6:	f001 fb23 	bl	8002620 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000fda:	4807      	ldr	r0, [pc, #28]	; (8000ff8 <LCD_Rst+0x2c>)
 8000fdc:	f7ff ffce 	bl	8000f7c <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <LCD_Rst+0x28>)
 8000fe6:	f001 fb1b 	bl	8002620 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000fea:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <LCD_Rst+0x2c>)
 8000fec:	f7ff ffc6 	bl	8000f7c <Delay>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40011800 	.word	0x40011800
 8000ff8:	0002bffc 	.word	0x0002bffc

08000ffc <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d006      	beq.n	800101a <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <LCD_BackLed_Control+0x34>)
 8001014:	f001 fb04 	bl	8002620 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8001018:	e005      	b.n	8001026 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 800101a:	2201      	movs	r2, #1
 800101c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <LCD_BackLed_Control+0x34>)
 8001022:	f001 fafd 	bl	8002620 <HAL_GPIO_WritePin>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40011400 	.word	0x40011400

08001034 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 800103e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001042:	88fb      	ldrh	r3, [r7, #6]
 8001044:	8013      	strh	r3, [r2, #0]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800105a:	4a04      	ldr	r2, [pc, #16]	; (800106c <LCD_Write_Data+0x1c>)
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	8013      	strh	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	60020000 	.word	0x60020000

08001070 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001074:	20cf      	movs	r0, #207	; 0xcf
 8001076:	f7ff ffdd 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800107a:	2000      	movs	r0, #0
 800107c:	f7ff ffe8 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8001080:	2081      	movs	r0, #129	; 0x81
 8001082:	f7ff ffe5 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001086:	2030      	movs	r0, #48	; 0x30
 8001088:	f7ff ffe2 	bl	8001050 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 800108c:	20ed      	movs	r0, #237	; 0xed
 800108e:	f7ff ffd1 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8001092:	2064      	movs	r0, #100	; 0x64
 8001094:	f7ff ffdc 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001098:	2003      	movs	r0, #3
 800109a:	f7ff ffd9 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800109e:	2012      	movs	r0, #18
 80010a0:	f7ff ffd6 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 80010a4:	2081      	movs	r0, #129	; 0x81
 80010a6:	f7ff ffd3 	bl	8001050 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 80010aa:	20e8      	movs	r0, #232	; 0xe8
 80010ac:	f7ff ffc2 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 80010b0:	2085      	movs	r0, #133	; 0x85
 80010b2:	f7ff ffcd 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80010b6:	2010      	movs	r0, #16
 80010b8:	f7ff ffca 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 80010bc:	2078      	movs	r0, #120	; 0x78
 80010be:	f7ff ffc7 	bl	8001050 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 80010c2:	20cb      	movs	r0, #203	; 0xcb
 80010c4:	f7ff ffb6 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 80010c8:	2039      	movs	r0, #57	; 0x39
 80010ca:	f7ff ffc1 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 80010ce:	202c      	movs	r0, #44	; 0x2c
 80010d0:	f7ff ffbe 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff ffbb 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 80010da:	2034      	movs	r0, #52	; 0x34
 80010dc:	f7ff ffb8 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 80010e0:	2002      	movs	r0, #2
 80010e2:	f7ff ffb5 	bl	8001050 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80010e6:	20f7      	movs	r0, #247	; 0xf7
 80010e8:	f7ff ffa4 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80010ec:	2020      	movs	r0, #32
 80010ee:	f7ff ffaf 	bl	8001050 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80010f2:	20ea      	movs	r0, #234	; 0xea
 80010f4:	f7ff ff9e 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff ffa9 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff ffa6 	bl	8001050 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8001104:	20b1      	movs	r0, #177	; 0xb1
 8001106:	f7ff ff95 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 800110a:	2000      	movs	r0, #0
 800110c:	f7ff ffa0 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8001110:	201b      	movs	r0, #27
 8001112:	f7ff ff9d 	bl	8001050 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8001116:	20b6      	movs	r0, #182	; 0xb6
 8001118:	f7ff ff8c 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 800111c:	200a      	movs	r0, #10
 800111e:	f7ff ff97 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8001122:	20a2      	movs	r0, #162	; 0xa2
 8001124:	f7ff ff94 	bl	8001050 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8001128:	20c0      	movs	r0, #192	; 0xc0
 800112a:	f7ff ff83 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 800112e:	2035      	movs	r0, #53	; 0x35
 8001130:	f7ff ff8e 	bl	8001050 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8001134:	20c1      	movs	r0, #193	; 0xc1
 8001136:	f7ff ff7d 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 800113a:	2011      	movs	r0, #17
 800113c:	f7ff ff88 	bl	8001050 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8001140:	20c5      	movs	r0, #197	; 0xc5
 8001142:	f7ff ff77 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001146:	2045      	movs	r0, #69	; 0x45
 8001148:	f7ff ff82 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 800114c:	2045      	movs	r0, #69	; 0x45
 800114e:	f7ff ff7f 	bl	8001050 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8001152:	20c7      	movs	r0, #199	; 0xc7
 8001154:	f7ff ff6e 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001158:	20a2      	movs	r0, #162	; 0xa2
 800115a:	f7ff ff79 	bl	8001050 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800115e:	20f2      	movs	r0, #242	; 0xf2
 8001160:	f7ff ff68 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff ff73 	bl	8001050 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 800116a:	2026      	movs	r0, #38	; 0x26
 800116c:	f7ff ff62 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff ff6d 	bl	8001050 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001176:	20e0      	movs	r0, #224	; 0xe0
 8001178:	f7ff ff5c 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 800117c:	200f      	movs	r0, #15
 800117e:	f7ff ff67 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8001182:	2026      	movs	r0, #38	; 0x26
 8001184:	f7ff ff64 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001188:	2024      	movs	r0, #36	; 0x24
 800118a:	f7ff ff61 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800118e:	200b      	movs	r0, #11
 8001190:	f7ff ff5e 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001194:	200e      	movs	r0, #14
 8001196:	f7ff ff5b 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800119a:	2009      	movs	r0, #9
 800119c:	f7ff ff58 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 80011a0:	2054      	movs	r0, #84	; 0x54
 80011a2:	f7ff ff55 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 80011a6:	20a8      	movs	r0, #168	; 0xa8
 80011a8:	f7ff ff52 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 80011ac:	2046      	movs	r0, #70	; 0x46
 80011ae:	f7ff ff4f 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 80011b2:	200c      	movs	r0, #12
 80011b4:	f7ff ff4c 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 80011b8:	2017      	movs	r0, #23
 80011ba:	f7ff ff49 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 80011be:	2009      	movs	r0, #9
 80011c0:	f7ff ff46 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80011c4:	200f      	movs	r0, #15
 80011c6:	f7ff ff43 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80011ca:	2007      	movs	r0, #7
 80011cc:	f7ff ff40 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff3d 	bl	8001050 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 80011d6:	20e1      	movs	r0, #225	; 0xe1
 80011d8:	f7ff ff2c 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff ff37 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 80011e2:	2019      	movs	r0, #25
 80011e4:	f7ff ff34 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80011e8:	201b      	movs	r0, #27
 80011ea:	f7ff ff31 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80011ee:	2004      	movs	r0, #4
 80011f0:	f7ff ff2e 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80011f4:	2010      	movs	r0, #16
 80011f6:	f7ff ff2b 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80011fa:	2007      	movs	r0, #7
 80011fc:	f7ff ff28 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8001200:	202a      	movs	r0, #42	; 0x2a
 8001202:	f7ff ff25 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8001206:	2047      	movs	r0, #71	; 0x47
 8001208:	f7ff ff22 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 800120c:	2039      	movs	r0, #57	; 0x39
 800120e:	f7ff ff1f 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001212:	2003      	movs	r0, #3
 8001214:	f7ff ff1c 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8001218:	2006      	movs	r0, #6
 800121a:	f7ff ff19 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 800121e:	2006      	movs	r0, #6
 8001220:	f7ff ff16 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8001224:	2030      	movs	r0, #48	; 0x30
 8001226:	f7ff ff13 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 800122a:	2038      	movs	r0, #56	; 0x38
 800122c:	f7ff ff10 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001230:	200f      	movs	r0, #15
 8001232:	f7ff ff0d 	bl	8001050 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8001236:	2036      	movs	r0, #54	; 0x36
 8001238:	f7ff fefc 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 800123c:	20c8      	movs	r0, #200	; 0xc8
 800123e:	f7ff ff07 	bl	8001050 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8001242:	202a      	movs	r0, #42	; 0x2a
 8001244:	f7ff fef6 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001248:	2000      	movs	r0, #0
 800124a:	f7ff ff01 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800124e:	2000      	movs	r0, #0
 8001250:	f7ff fefe 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001254:	2000      	movs	r0, #0
 8001256:	f7ff fefb 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 800125a:	20ef      	movs	r0, #239	; 0xef
 800125c:	f7ff fef8 	bl	8001050 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8001260:	202b      	movs	r0, #43	; 0x2b
 8001262:	f7ff fee7 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fef2 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff feef 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff feec 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001278:	203f      	movs	r0, #63	; 0x3f
 800127a:	f7ff fee9 	bl	8001050 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800127e:	203a      	movs	r0, #58	; 0x3a
 8001280:	f7ff fed8 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001284:	2055      	movs	r0, #85	; 0x55
 8001286:	f7ff fee3 	bl	8001050 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 800128a:	2011      	movs	r0, #17
 800128c:	f7ff fed2 	bl	8001034 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <LCD_REG_Config+0x230>)
 8001292:	f7ff fe73 	bl	8000f7c <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001296:	2029      	movs	r0, #41	; 0x29
 8001298:	f7ff fecc 	bl	8001034 <LCD_Write_Cmd>
	
	
}
 800129c:	bf00      	nop
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	0002bffc 	.word	0x0002bffc

080012a4 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 80012a4:	b590      	push	{r4, r7, lr}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4604      	mov	r4, r0
 80012ac:	4608      	mov	r0, r1
 80012ae:	4611      	mov	r1, r2
 80012b0:	461a      	mov	r2, r3
 80012b2:	4623      	mov	r3, r4
 80012b4:	80fb      	strh	r3, [r7, #6]
 80012b6:	4603      	mov	r3, r0
 80012b8:	80bb      	strh	r3, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]
 80012be:	4613      	mov	r3, r2
 80012c0:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 80012c2:	202a      	movs	r0, #42	; 0x2a
 80012c4:	f7ff feb6 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	0a1b      	lsrs	r3, r3, #8
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff febe 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 80012d4:	88fb      	ldrh	r3, [r7, #6]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff feb8 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	4413      	add	r3, r2
 80012e6:	3b01      	subs	r3, #1
 80012e8:	121b      	asrs	r3, r3, #8
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff feaf 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4413      	add	r3, r2
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	b29b      	uxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff fea4 	bl	8001050 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8001308:	202b      	movs	r0, #43	; 0x2b
 800130a:	f7ff fe93 	bl	8001034 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	b29b      	uxth	r3, r3
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff fe9b 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	b29b      	uxth	r3, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fe95 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8001326:	88ba      	ldrh	r2, [r7, #4]
 8001328:	883b      	ldrh	r3, [r7, #0]
 800132a:	4413      	add	r3, r2
 800132c:	3b01      	subs	r3, #1
 800132e:	121b      	asrs	r3, r3, #8
 8001330:	b29b      	uxth	r3, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fe8c 	bl	8001050 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8001338:	88ba      	ldrh	r2, [r7, #4]
 800133a:	883b      	ldrh	r3, [r7, #0]
 800133c:	4413      	add	r3, r2
 800133e:	b29b      	uxth	r3, r3
 8001340:	3b01      	subs	r3, #1
 8001342:	b29b      	uxth	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	b29b      	uxth	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff fe81 	bl	8001050 <LCD_Write_Data>
	
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	bd90      	pop	{r4, r7, pc}

08001356 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	460b      	mov	r3, r1
 8001360:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001366:	202c      	movs	r0, #44	; 0x2c
 8001368:	f7ff fe64 	bl	8001034 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e006      	b.n	8001380 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fe6b 	bl	8001050 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3301      	adds	r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	429a      	cmp	r2, r3
 8001386:	d3f4      	bcc.n	8001372 <LCD_FillColor+0x1c>
		
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8001392:	b590      	push	{r4, r7, lr}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	4604      	mov	r4, r0
 800139a:	4608      	mov	r0, r1
 800139c:	4611      	mov	r1, r2
 800139e:	461a      	mov	r2, r3
 80013a0:	4623      	mov	r3, r4
 80013a2:	80fb      	strh	r3, [r7, #6]
 80013a4:	4603      	mov	r3, r0
 80013a6:	80bb      	strh	r3, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
 80013ac:	4613      	mov	r3, r2
 80013ae:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 80013b0:	883b      	ldrh	r3, [r7, #0]
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	88b9      	ldrh	r1, [r7, #4]
 80013b6:	88f8      	ldrh	r0, [r7, #6]
 80013b8:	f7ff ff74 	bl	80012a4 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	883a      	ldrh	r2, [r7, #0]
 80013c0:	fb02 f303 	mul.w	r3, r2, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	8b3b      	ldrh	r3, [r7, #24]
 80013c8:	4619      	mov	r1, r3
 80013ca:	4610      	mov	r0, r2
 80013cc:	f7ff ffc3 	bl	8001356 <LCD_FillColor>
	
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd90      	pop	{r4, r7, pc}

080013d8 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
 80013e2:	460b      	mov	r3, r1
 80013e4:	80bb      	strh	r3, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	3b20      	subs	r3, #32
 80013ee:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 80013f0:	88b9      	ldrh	r1, [r7, #4]
 80013f2:	88f8      	ldrh	r0, [r7, #6]
 80013f4:	2310      	movs	r3, #16
 80013f6:	2208      	movs	r2, #8
 80013f8:	f7ff ff54 	bl	80012a4 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 80013fc:	202c      	movs	r0, #44	; 0x2c
 80013fe:	f7ff fe19 	bl	8001034 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001402:	2300      	movs	r3, #0
 8001404:	73bb      	strb	r3, [r7, #14]
 8001406:	e023      	b.n	8001450 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8001408:	7b3a      	ldrb	r2, [r7, #12]
 800140a:	7bbb      	ldrb	r3, [r7, #14]
 800140c:	4914      	ldr	r1, [pc, #80]	; (8001460 <LCD_DrawChar+0x88>)
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	440a      	add	r2, r1
 8001412:	4413      	add	r3, r2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001418:	2300      	movs	r3, #0
 800141a:	737b      	strb	r3, [r7, #13]
 800141c:	e012      	b.n	8001444 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	2b00      	cmp	r3, #0
 8001426:	d003      	beq.n	8001430 <LCD_DrawChar+0x58>
				LCD_Write_Data ( 0x001F );
 8001428:	201f      	movs	r0, #31
 800142a:	f7ff fe11 	bl	8001050 <LCD_Write_Data>
 800142e:	e003      	b.n	8001438 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  0xFFFF );								
 8001430:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001434:	f7ff fe0c 	bl	8001050 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	085b      	lsrs	r3, r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 800143e:	7b7b      	ldrb	r3, [r7, #13]
 8001440:	3301      	adds	r3, #1
 8001442:	737b      	strb	r3, [r7, #13]
 8001444:	7b7b      	ldrb	r3, [r7, #13]
 8001446:	2b07      	cmp	r3, #7
 8001448:	d9e9      	bls.n	800141e <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 800144a:	7bbb      	ldrb	r3, [r7, #14]
 800144c:	3301      	adds	r3, #1
 800144e:	73bb      	strb	r3, [r7, #14]
 8001450:	7bbb      	ldrb	r3, [r7, #14]
 8001452:	2b0f      	cmp	r3, #15
 8001454:	d9d8      	bls.n	8001408 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8001456:	bf00      	nop
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	080052ac 	.word	0x080052ac

08001464 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	603a      	str	r2, [r7, #0]
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	460b      	mov	r3, r1
 8001472:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8001474:	e01c      	b.n	80014b0 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	2be8      	cmp	r3, #232	; 0xe8
 800147a:	d904      	bls.n	8001486 <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800147c:	2300      	movs	r3, #0
 800147e:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001480:	88bb      	ldrh	r3, [r7, #4]
 8001482:	3310      	adds	r3, #16
 8001484:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8001486:	88bb      	ldrh	r3, [r7, #4]
 8001488:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 800148c:	d903      	bls.n	8001496 <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 800148e:	2300      	movs	r3, #0
 8001490:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8001492:	2300      	movs	r3, #0
 8001494:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	781a      	ldrb	r2, [r3, #0]
 800149a:	88b9      	ldrh	r1, [r7, #4]
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff ff9a 	bl	80013d8 <LCD_DrawChar>
		
		pStr ++;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	3301      	adds	r3, #1
 80014a8:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 80014aa:	88fb      	ldrh	r3, [r7, #6]
 80014ac:	3308      	adds	r3, #8
 80014ae:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1de      	bne.n	8001476 <LCD_DrawString+0x12>
		
	}
	
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	0000      	movs	r0, r0
 80014c4:	0000      	movs	r0, r0
	...

080014c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c8:	b5b0      	push	{r4, r5, r7, lr}
 80014ca:	b08e      	sub	sp, #56	; 0x38
 80014cc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f000 fa55 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f917 	bl	8001704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f7ff fc51 	bl	8000d7c <MX_GPIO_Init>
  MX_FSMC_Init();
 80014da:	f7ff fb9d 	bl	8000c18 <MX_FSMC_Init>
  MX_ADC1_Init();
 80014de:	f7ff fb21 	bl	8000b24 <MX_ADC1_Init>
  MX_I2C2_Init();
 80014e2:	f7ff fcdd 	bl	8000ea0 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  LCD_INIT();
 80014e6:	f7ff fd5a 	bl	8000f9e <LCD_INIT>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80014ea:	4881      	ldr	r0, [pc, #516]	; (80016f0 <main+0x228>)
 80014ec:	f000 fd4a 	bl	8001f84 <HAL_ADCEx_Calibration_Start>
  uint8_t HMC5883L_Addr = 0x1E<<1;
 80014f0:	233c      	movs	r3, #60	; 0x3c
 80014f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t CRA = 0x70;
 80014f6:	2370      	movs	r3, #112	; 0x70
 80014f8:	76fb      	strb	r3, [r7, #27]
  uint8_t CRB = 0xA0;
 80014fa:	23a0      	movs	r3, #160	; 0xa0
 80014fc:	76bb      	strb	r3, [r7, #26]
  uint8_t X_MSB = 0x03;
 80014fe:	2303      	movs	r3, #3
 8001500:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  uint8_t X_LSB = 0x04;
 8001504:	2304      	movs	r3, #4
 8001506:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint8_t Z_MSB = 0x05;
 800150a:	2305      	movs	r3, #5
 800150c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  uint8_t Z_LSB = 0x06;
 8001510:	2306      	movs	r3, #6
 8001512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t Y_MSB = 0x07;
 8001516:	2307      	movs	r3, #7
 8001518:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  uint8_t Y_LSB = 0x08;
 800151c:	2308      	movs	r3, #8
 800151e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  int angle;
  HAL_I2C_Mem_Write(&hi2c2,HMC5883L_Addr<<1,0x00,1,&CRA,1,100);
 8001522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001526:	b29b      	uxth	r3, r3
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	b299      	uxth	r1, r3
 800152c:	2364      	movs	r3, #100	; 0x64
 800152e:	9302      	str	r3, [sp, #8]
 8001530:	2301      	movs	r3, #1
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	f107 031b 	add.w	r3, r7, #27
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2301      	movs	r3, #1
 800153c:	2200      	movs	r2, #0
 800153e:	486d      	ldr	r0, [pc, #436]	; (80016f4 <main+0x22c>)
 8001540:	f001 f9ec 	bl	800291c <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c2,HMC5883L_Addr<<1,0x01,1,&CRB,1,100);
 8001544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001548:	b29b      	uxth	r3, r3
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	b299      	uxth	r1, r3
 800154e:	2364      	movs	r3, #100	; 0x64
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	2301      	movs	r3, #1
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	f107 031a 	add.w	r3, r7, #26
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	2301      	movs	r3, #1
 800155e:	2201      	movs	r2, #1
 8001560:	4864      	ldr	r0, [pc, #400]	; (80016f4 <main+0x22c>)
 8001562:	f001 f9db 	bl	800291c <HAL_I2C_Mem_Write>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr,X_MSB,1,&data_direction[0],1,100);
 8001566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800156a:	b299      	uxth	r1, r3
 800156c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001570:	b29a      	uxth	r2, r3
 8001572:	2364      	movs	r3, #100	; 0x64
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	2301      	movs	r3, #1
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2301      	movs	r3, #1
 8001582:	485c      	ldr	r0, [pc, #368]	; (80016f4 <main+0x22c>)
 8001584:	f001 fac4 	bl	8002b10 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr,X_LSB,1,&data_direction[1],1,100);
 8001588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800158c:	b299      	uxth	r1, r3
 800158e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001592:	b29a      	uxth	r2, r3
 8001594:	2364      	movs	r3, #100	; 0x64
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	2301      	movs	r3, #1
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	3301      	adds	r3, #1
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2301      	movs	r3, #1
 80015a6:	4853      	ldr	r0, [pc, #332]	; (80016f4 <main+0x22c>)
 80015a8:	f001 fab2 	bl	8002b10 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr,Y_MSB,1,&data_direction[2],1,100);
 80015ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015b0:	b299      	uxth	r1, r3
 80015b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	2364      	movs	r3, #100	; 0x64
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	2301      	movs	r3, #1
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	f107 0314 	add.w	r3, r7, #20
 80015c4:	3302      	adds	r3, #2
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2301      	movs	r3, #1
 80015ca:	484a      	ldr	r0, [pc, #296]	; (80016f4 <main+0x22c>)
 80015cc:	f001 faa0 	bl	8002b10 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr,Y_LSB,1,&data_direction[3],1,100);
 80015d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d4:	b299      	uxth	r1, r3
 80015d6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80015da:	b29a      	uxth	r2, r3
 80015dc:	2364      	movs	r3, #100	; 0x64
 80015de:	9302      	str	r3, [sp, #8]
 80015e0:	2301      	movs	r3, #1
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	3303      	adds	r3, #3
 80015ea:	9300      	str	r3, [sp, #0]
 80015ec:	2301      	movs	r3, #1
 80015ee:	4841      	ldr	r0, [pc, #260]	; (80016f4 <main+0x22c>)
 80015f0:	f001 fa8e 	bl	8002b10 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr,Z_MSB,1,&data_direction[4],1,100);
 80015f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015f8:	b299      	uxth	r1, r3
 80015fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015fe:	b29a      	uxth	r2, r3
 8001600:	2364      	movs	r3, #100	; 0x64
 8001602:	9302      	str	r3, [sp, #8]
 8001604:	2301      	movs	r3, #1
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	3304      	adds	r3, #4
 800160e:	9300      	str	r3, [sp, #0]
 8001610:	2301      	movs	r3, #1
 8001612:	4838      	ldr	r0, [pc, #224]	; (80016f4 <main+0x22c>)
 8001614:	f001 fa7c 	bl	8002b10 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr,Z_LSB,1,&data_direction[5],1,100);
 8001618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800161c:	b299      	uxth	r1, r3
 800161e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001622:	b29a      	uxth	r2, r3
 8001624:	2364      	movs	r3, #100	; 0x64
 8001626:	9302      	str	r3, [sp, #8]
 8001628:	2301      	movs	r3, #1
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	3305      	adds	r3, #5
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	2301      	movs	r3, #1
 8001636:	482f      	ldr	r0, [pc, #188]	; (80016f4 <main+0x22c>)
 8001638:	f001 fa6a 	bl	8002b10 <HAL_I2C_Mem_Read>

	  whole_value[0] = (int16_t)((data_direction[0] << 8)|data_direction[1]);
 800163c:	7d3b      	ldrb	r3, [r7, #20]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7d7b      	ldrb	r3, [r7, #21]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21b      	sxth	r3, r3
 800164a:	81bb      	strh	r3, [r7, #12]
	  whole_value[1] = (int16_t)((data_direction[2] << 8)|data_direction[3]);
 800164c:	7dbb      	ldrb	r3, [r7, #22]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b21a      	sxth	r2, r3
 8001652:	7dfb      	ldrb	r3, [r7, #23]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	81fb      	strh	r3, [r7, #14]
	  whole_value[2] = (int16_t)((data_direction[4] << 8)|data_direction[5]);
 800165c:	7e3b      	ldrb	r3, [r7, #24]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	b21a      	sxth	r2, r3
 8001662:	7e7b      	ldrb	r3, [r7, #25]
 8001664:	b21b      	sxth	r3, r3
 8001666:	4313      	orrs	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	823b      	strh	r3, [r7, #16]

	  angle = atan2(whole_value[1],whole_value[0])*(180/3.14)+180;
 800166c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001670:	4618      	mov	r0, r3
 8001672:	f7fe ff2b 	bl	80004cc <__aeabi_i2d>
 8001676:	4604      	mov	r4, r0
 8001678:	460d      	mov	r5, r1
 800167a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff24 	bl	80004cc <__aeabi_i2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4620      	mov	r0, r4
 800168a:	4629      	mov	r1, r5
 800168c:	f003 fb86 	bl	8004d9c <atan2>
 8001690:	a315      	add	r3, pc, #84	; (adr r3, 80016e8 <main+0x220>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7fe ff83 	bl	80005a0 <__aeabi_dmul>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <main+0x230>)
 80016a8:	f7fe fdc4 	bl	8000234 <__adddf3>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4610      	mov	r0, r2
 80016b2:	4619      	mov	r1, r3
 80016b4:	f7ff fa0e 	bl	8000ad4 <__aeabi_d2iz>
 80016b8:	4603      	mov	r3, r0
 80016ba:	61fb      	str	r3, [r7, #28]

	  char char_angle[10];
	  sprintf(char_angle,"%d",angle);
 80016bc:	463b      	mov	r3, r7
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	490e      	ldr	r1, [pc, #56]	; (80016fc <main+0x234>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f002 fef0 	bl	80044a8 <siprintf>
	  LCD_DrawString(20, 40, "angle");
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <main+0x238>)
 80016ca:	2128      	movs	r1, #40	; 0x28
 80016cc:	2014      	movs	r0, #20
 80016ce:	f7ff fec9 	bl	8001464 <LCD_DrawString>
	  LCD_DrawString(20, 60, char_angle);
 80016d2:	463b      	mov	r3, r7
 80016d4:	461a      	mov	r2, r3
 80016d6:	213c      	movs	r1, #60	; 0x3c
 80016d8:	2014      	movs	r0, #20
 80016da:	f7ff fec3 	bl	8001464 <LCD_DrawString>
	  HAL_Delay(100);
 80016de:	2064      	movs	r0, #100	; 0x64
 80016e0:	f000 f9ae 	bl	8001a40 <HAL_Delay>
  {
 80016e4:	e73f      	b.n	8001566 <main+0x9e>
 80016e6:	bf00      	nop
 80016e8:	61d59ae7 	.word	0x61d59ae7
 80016ec:	404ca994 	.word	0x404ca994
 80016f0:	2000008c 	.word	0x2000008c
 80016f4:	20000108 	.word	0x20000108
 80016f8:	40668000 	.word	0x40668000
 80016fc:	08005280 	.word	0x08005280
 8001700:	08005284 	.word	0x08005284

08001704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b096      	sub	sp, #88	; 0x58
 8001708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800170a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800170e:	2228      	movs	r2, #40	; 0x28
 8001710:	2100      	movs	r1, #0
 8001712:	4618      	mov	r0, r3
 8001714:	f002 fec0 	bl	8004498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001718:	f107 031c 	add.w	r3, r7, #28
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
 8001736:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001738:	2301      	movs	r3, #1
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800173c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001740:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001746:	2301      	movs	r3, #1
 8001748:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001752:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001754:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001758:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800175e:	4618      	mov	r0, r3
 8001760:	f001 ff98 	bl	8003694 <HAL_RCC_OscConfig>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800176a:	f000 f828 	bl	80017be <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176e:	230f      	movs	r3, #15
 8001770:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001772:	2302      	movs	r3, #2
 8001774:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	2102      	movs	r1, #2
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fa04 	bl	8003b98 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001796:	f000 f812 	bl	80017be <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800179a:	2302      	movs	r3, #2
 800179c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800179e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4618      	mov	r0, r3
 80017a8:	f002 fb8e 	bl	8003ec8 <HAL_RCCEx_PeriphCLKConfig>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80017b2:	f000 f804 	bl	80017be <Error_Handler>
  }
}
 80017b6:	bf00      	nop
 80017b8:	3758      	adds	r7, #88	; 0x58
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c2:	b672      	cpsid	i
}
 80017c4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017c6:	e7fe      	b.n	80017c6 <Error_Handler+0x8>

080017c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_MspInit+0x5c>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	4a14      	ldr	r2, [pc, #80]	; (8001824 <HAL_MspInit+0x5c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6193      	str	r3, [r2, #24]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_MspInit+0x5c>)
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_MspInit+0x5c>)
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <HAL_MspInit+0x5c>)
 80017ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f0:	61d3      	str	r3, [r2, #28]
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_MspInit+0x5c>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80017fe:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <HAL_MspInit+0x60>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_MspInit+0x60>)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	3714      	adds	r7, #20
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr
 8001824:	40021000 	.word	0x40021000
 8001828:	40010000 	.word	0x40010000

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <NMI_Handler+0x4>

08001832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <MemManage_Handler+0x4>

0800183e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <BusFault_Handler+0x4>

08001844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <UsageFault_Handler+0x4>

0800184a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	bc80      	pop	{r7}
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	bc80      	pop	{r7}
 800186c:	4770      	bx	lr

0800186e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001872:	f000 f8c9 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8001880:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <EXTI15_10_IRQHandler+0x34>)
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <EXTI15_10_IRQHandler+0x26>
  {
    isrFlag = 1;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <EXTI15_10_IRQHandler+0x38>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8001892:	4b07      	ldr	r3, [pc, #28]	; (80018b0 <EXTI15_10_IRQHandler+0x34>)
 8001894:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001898:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 800189a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800189e:	f000 feef 	bl	8002680 <HAL_GPIO_EXTI_Callback>
  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018a2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018a6:	f000 fed3 	bl	8002650 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40010400 	.word	0x40010400
 80018b4:	2000015c 	.word	0x2000015c

080018b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c0:	4a14      	ldr	r2, [pc, #80]	; (8001914 <_sbrk+0x5c>)
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <_sbrk+0x60>)
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <_sbrk+0x64>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <_sbrk+0x64>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <_sbrk+0x68>)
 80018d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <_sbrk+0x64>)
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4413      	add	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d207      	bcs.n	80018f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018e8:	f002 fdac 	bl	8004444 <__errno>
 80018ec:	4603      	mov	r3, r0
 80018ee:	220c      	movs	r2, #12
 80018f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f2:	f04f 33ff 	mov.w	r3, #4294967295
 80018f6:	e009      	b.n	800190c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018f8:	4b08      	ldr	r3, [pc, #32]	; (800191c <_sbrk+0x64>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <_sbrk+0x64>)
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4413      	add	r3, r2
 8001906:	4a05      	ldr	r2, [pc, #20]	; (800191c <_sbrk+0x64>)
 8001908:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20010000 	.word	0x20010000
 8001918:	00000400 	.word	0x00000400
 800191c:	20000160 	.word	0x20000160
 8001920:	20000178 	.word	0x20000178

08001924 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001930:	f7ff fff8 	bl	8001924 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001934:	480b      	ldr	r0, [pc, #44]	; (8001964 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001936:	490c      	ldr	r1, [pc, #48]	; (8001968 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001938:	4a0c      	ldr	r2, [pc, #48]	; (800196c <LoopFillZerobss+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800193c:	e002      	b.n	8001944 <LoopCopyDataInit>

0800193e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001942:	3304      	adds	r3, #4

08001944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001948:	d3f9      	bcc.n	800193e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800194c:	4c09      	ldr	r4, [pc, #36]	; (8001974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800194e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001950:	e001      	b.n	8001956 <LoopFillZerobss>

08001952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001954:	3204      	adds	r2, #4

08001956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001958:	d3fb      	bcc.n	8001952 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800195a:	f002 fd79 	bl	8004450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800195e:	f7ff fdb3 	bl	80014c8 <main>
  bx lr
 8001962:	4770      	bx	lr
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800196c:	08005960 	.word	0x08005960
  ldr r2, =_sbss
 8001970:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001974:	20000178 	.word	0x20000178

08001978 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC1_2_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_Init+0x28>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_Init+0x28>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 fc71 	bl	8002274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001992:	200f      	movs	r0, #15
 8001994:	f000 f808 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff ff16 	bl	80017c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40022000 	.word	0x40022000

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 fc89 	bl	80022de <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 fc51 	bl	800228a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000000 	.word	0x20000000
 8001a00:	20000008 	.word	0x20000008
 8001a04:	20000004 	.word	0x20000004

08001a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <HAL_IncTick+0x1c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_IncTick+0x20>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a03      	ldr	r2, [pc, #12]	; (8001a28 <HAL_IncTick+0x20>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000164 	.word	0x20000164

08001a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b02      	ldr	r3, [pc, #8]	; (8001a3c <HAL_GetTick+0x10>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000164 	.word	0x20000164

08001a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fff0 	bl	8001a2c <HAL_GetTick>
 8001a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a58:	d005      	beq.n	8001a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_Delay+0x44>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4413      	add	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a66:	bf00      	nop
 8001a68:	f7ff ffe0 	bl	8001a2c <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d8f7      	bhi.n	8001a68 <HAL_Delay+0x28>
  {
  }
}
 8001a78:	bf00      	nop
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20000008 	.word	0x20000008

08001a88 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d101      	bne.n	8001aaa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0ce      	b.n	8001c48 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d109      	bne.n	8001acc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff f86a 	bl	8000ba0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 fa17 	bl	8001f00 <ADC_ConversionStop_Disable>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	f040 80a9 	bne.w	8001c36 <HAL_ADC_Init+0x1ae>
 8001ae4:	7dfb      	ldrb	r3, [r7, #23]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f040 80a5 	bne.w	8001c36 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001af4:	f023 0302 	bic.w	r3, r3, #2
 8001af8:	f043 0202 	orr.w	r2, r3, #2
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4951      	ldr	r1, [pc, #324]	; (8001c50 <HAL_ADC_Init+0x1c8>)
 8001b0a:	428b      	cmp	r3, r1
 8001b0c:	d10a      	bne.n	8001b24 <HAL_ADC_Init+0x9c>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001b16:	d002      	beq.n	8001b1e <HAL_ADC_Init+0x96>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
 8001b1c:	e004      	b.n	8001b28 <HAL_ADC_Init+0xa0>
 8001b1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001b22:	e001      	b.n	8001b28 <HAL_ADC_Init+0xa0>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b28:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7b1b      	ldrb	r3, [r3, #12]
 8001b2e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b30:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b40:	d003      	beq.n	8001b4a <HAL_ADC_Init+0xc2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d102      	bne.n	8001b50 <HAL_ADC_Init+0xc8>
 8001b4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b4e:	e000      	b.n	8001b52 <HAL_ADC_Init+0xca>
 8001b50:	2300      	movs	r3, #0
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7d1b      	ldrb	r3, [r3, #20]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d119      	bne.n	8001b94 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7b1b      	ldrb	r3, [r3, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d109      	bne.n	8001b7c <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	035a      	lsls	r2, r3, #13
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	e00b      	b.n	8001b94 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	f043 0220 	orr.w	r2, r3, #32
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f043 0201 	orr.w	r2, r3, #1
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_ADC_Init+0x1cc>)
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6812      	ldr	r2, [r2, #0]
 8001bb6:	68b9      	ldr	r1, [r7, #8]
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bc4:	d003      	beq.n	8001bce <HAL_ADC_Init+0x146>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d104      	bne.n	8001bd8 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	051b      	lsls	r3, r3, #20
 8001bd6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_ADC_Init+0x1d0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d10b      	bne.n	8001c14 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c06:	f023 0303 	bic.w	r3, r3, #3
 8001c0a:	f043 0201 	orr.w	r2, r3, #1
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c12:	e018      	b.n	8001c46 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c18:	f023 0312 	bic.w	r3, r3, #18
 8001c1c:	f043 0210 	orr.w	r2, r3, #16
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c28:	f043 0201 	orr.w	r2, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c34:	e007      	b.n	8001c46 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c3a:	f043 0210 	orr.w	r2, r3, #16
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3718      	adds	r7, #24
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40013c00 	.word	0x40013c00
 8001c54:	ffe1f7fd 	.word	0xffe1f7fd
 8001c58:	ff1f0efe 	.word	0xff1f0efe

08001c5c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d101      	bne.n	8001c7c <HAL_ADC_ConfigChannel+0x20>
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e0dc      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x1da>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b06      	cmp	r3, #6
 8001c8a:	d81c      	bhi.n	8001cc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	4613      	mov	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3b05      	subs	r3, #5
 8001c9e:	221f      	movs	r2, #31
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	4019      	ands	r1, r3
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3b05      	subs	r3, #5
 8001cb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	635a      	str	r2, [r3, #52]	; 0x34
 8001cc4:	e03c      	b.n	8001d40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d81c      	bhi.n	8001d08 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	4413      	add	r3, r2
 8001cde:	3b23      	subs	r3, #35	; 0x23
 8001ce0:	221f      	movs	r2, #31
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	4019      	ands	r1, r3
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6818      	ldr	r0, [r3, #0]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3b23      	subs	r3, #35	; 0x23
 8001cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	631a      	str	r2, [r3, #48]	; 0x30
 8001d06:	e01b      	b.n	8001d40 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	4613      	mov	r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	4413      	add	r3, r2
 8001d18:	3b41      	subs	r3, #65	; 0x41
 8001d1a:	221f      	movs	r2, #31
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4019      	ands	r1, r3
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685a      	ldr	r2, [r3, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	4413      	add	r3, r2
 8001d32:	3b41      	subs	r3, #65	; 0x41
 8001d34:	fa00 f203 	lsl.w	r2, r0, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b09      	cmp	r3, #9
 8001d46:	d91c      	bls.n	8001d82 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68d9      	ldr	r1, [r3, #12]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	3b1e      	subs	r3, #30
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	43db      	mvns	r3, r3
 8001d62:	4019      	ands	r1, r3
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	6898      	ldr	r0, [r3, #8]
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	3b1e      	subs	r3, #30
 8001d74:	fa00 f203 	lsl.w	r2, r0, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	e019      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6919      	ldr	r1, [r3, #16]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4413      	add	r3, r2
 8001d92:	2207      	movs	r2, #7
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4019      	ands	r1, r3
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6898      	ldr	r0, [r3, #8]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	fa00 f203 	lsl.w	r2, r0, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	430a      	orrs	r2, r1
 8001db4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d003      	beq.n	8001dc6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001dc2:	2b11      	cmp	r3, #17
 8001dc4:	d132      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a1d      	ldr	r2, [pc, #116]	; (8001e40 <HAL_ADC_ConfigChannel+0x1e4>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d125      	bne.n	8001e1c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d126      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001dec:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b10      	cmp	r3, #16
 8001df4:	d11a      	bne.n	8001e2c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001df6:	4b13      	ldr	r3, [pc, #76]	; (8001e44 <HAL_ADC_ConfigChannel+0x1e8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a13      	ldr	r2, [pc, #76]	; (8001e48 <HAL_ADC_ConfigChannel+0x1ec>)
 8001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001e00:	0c9a      	lsrs	r2, r3, #18
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e0c:	e002      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f9      	bne.n	8001e0e <HAL_ADC_ConfigChannel+0x1b2>
 8001e1a:	e007      	b.n	8001e2c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e20:	f043 0220 	orr.w	r2, r3, #32
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	40012400 	.word	0x40012400
 8001e44:	20000000 	.word	0x20000000
 8001e48:	431bde83 	.word	0x431bde83

08001e4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d040      	beq.n	8001eec <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f042 0201 	orr.w	r2, r2, #1
 8001e78:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <ADC_Enable+0xac>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a1f      	ldr	r2, [pc, #124]	; (8001efc <ADC_Enable+0xb0>)
 8001e80:	fba2 2303 	umull	r2, r3, r2, r3
 8001e84:	0c9b      	lsrs	r3, r3, #18
 8001e86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e88:	e002      	b.n	8001e90 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f9      	bne.n	8001e8a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e96:	f7ff fdc9 	bl	8001a2c <HAL_GetTick>
 8001e9a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001e9c:	e01f      	b.n	8001ede <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e9e:	f7ff fdc5 	bl	8001a2c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d918      	bls.n	8001ede <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d011      	beq.n	8001ede <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebe:	f043 0210 	orr.w	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eca:	f043 0201 	orr.w	r2, r3, #1
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e007      	b.n	8001eee <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d1d8      	bne.n	8001e9e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d12e      	bne.n	8001f78 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 0201 	bic.w	r2, r2, #1
 8001f28:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f2a:	f7ff fd7f 	bl	8001a2c <HAL_GetTick>
 8001f2e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f30:	e01b      	b.n	8001f6a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f32:	f7ff fd7b 	bl	8001a2c <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d914      	bls.n	8001f6a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10d      	bne.n	8001f6a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f52:	f043 0210 	orr.w	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f043 0201 	orr.w	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e007      	b.n	8001f7a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d0dc      	beq.n	8001f32 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_ADCEx_Calibration_Start+0x1e>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e095      	b.n	80020ce <HAL_ADCEx_Calibration_Start+0x14a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff ffa8 	bl	8001f00 <ADC_ConversionStop_Disable>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001fb4:	7dfb      	ldrb	r3, [r7, #23]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f040 8084 	bne.w	80020c4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fc4:	f023 0302 	bic.w	r3, r3, #2
 8001fc8:	f043 0202 	orr.w	r2, r3, #2
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001fd0:	4b41      	ldr	r3, [pc, #260]	; (80020d8 <HAL_ADCEx_Calibration_Start+0x154>)
 8001fd2:	681c      	ldr	r4, [r3, #0]
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	f002 f82d 	bl	8004034 <HAL_RCCEx_GetPeriphCLKFreq>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001fe0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001fe2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001fe4:	e002      	b.n	8001fec <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f9      	bne.n	8001fe6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff ff2a 	bl	8001e4c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0208 	orr.w	r2, r2, #8
 8002006:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002008:	f7ff fd10 	bl	8001a2c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800200e:	e01b      	b.n	8002048 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002010:	f7ff fd0c 	bl	8001a2c <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b0a      	cmp	r3, #10
 800201c:	d914      	bls.n	8002048 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d00d      	beq.n	8002048 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002030:	f023 0312 	bic.w	r3, r3, #18
 8002034:	f043 0210 	orr.w	r2, r3, #16
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e042      	b.n	80020ce <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1dc      	bne.n	8002010 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0204 	orr.w	r2, r2, #4
 8002064:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002066:	f7ff fce1 	bl	8001a2c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800206c:	e01b      	b.n	80020a6 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800206e:	f7ff fcdd 	bl	8001a2c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b0a      	cmp	r3, #10
 800207a:	d914      	bls.n	80020a6 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00d      	beq.n	80020a6 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	f023 0312 	bic.w	r3, r3, #18
 8002092:	f043 0210 	orr.w	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e013      	b.n	80020ce <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0304 	and.w	r3, r3, #4
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1dc      	bne.n	800206e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	f023 0303 	bic.w	r3, r3, #3
 80020bc:	f043 0201 	orr.w	r2, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd90      	pop	{r4, r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000000 	.word	0x20000000

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	e000ed00 	.word	0xe000ed00

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4906      	ldr	r1, [pc, #24]	; (8002174 <__NVIC_EnableIRQ+0x34>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100

08002178 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	6039      	str	r1, [r7, #0]
 8002182:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002184:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002188:	2b00      	cmp	r3, #0
 800218a:	db0a      	blt.n	80021a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	b2da      	uxtb	r2, r3
 8002190:	490c      	ldr	r1, [pc, #48]	; (80021c4 <__NVIC_SetPriority+0x4c>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	0112      	lsls	r2, r2, #4
 8002198:	b2d2      	uxtb	r2, r2
 800219a:	440b      	add	r3, r1
 800219c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a0:	e00a      	b.n	80021b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4908      	ldr	r1, [pc, #32]	; (80021c8 <__NVIC_SetPriority+0x50>)
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	f003 030f 	and.w	r3, r3, #15
 80021ae:	3b04      	subs	r3, #4
 80021b0:	0112      	lsls	r2, r2, #4
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	440b      	add	r3, r1
 80021b6:	761a      	strb	r2, [r3, #24]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e100 	.word	0xe000e100
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b089      	sub	sp, #36	; 0x24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	60b9      	str	r1, [r7, #8]
 80021d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f003 0307 	and.w	r3, r3, #7
 80021de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f1c3 0307 	rsb	r3, r3, #7
 80021e6:	2b04      	cmp	r3, #4
 80021e8:	bf28      	it	cs
 80021ea:	2304      	movcs	r3, #4
 80021ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3304      	adds	r3, #4
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d902      	bls.n	80021fc <NVIC_EncodePriority+0x30>
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3b03      	subs	r3, #3
 80021fa:	e000      	b.n	80021fe <NVIC_EncodePriority+0x32>
 80021fc:	2300      	movs	r3, #0
 80021fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002200:	f04f 32ff 	mov.w	r2, #4294967295
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	43da      	mvns	r2, r3
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	401a      	ands	r2, r3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	fa01 f303 	lsl.w	r3, r1, r3
 800221e:	43d9      	mvns	r1, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	4313      	orrs	r3, r2
         );
}
 8002226:	4618      	mov	r0, r3
 8002228:	3724      	adds	r7, #36	; 0x24
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3b01      	subs	r3, #1
 800223c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002240:	d301      	bcc.n	8002246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002242:	2301      	movs	r3, #1
 8002244:	e00f      	b.n	8002266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <SysTick_Config+0x40>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3b01      	subs	r3, #1
 800224c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800224e:	210f      	movs	r1, #15
 8002250:	f04f 30ff 	mov.w	r0, #4294967295
 8002254:	f7ff ff90 	bl	8002178 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <SysTick_Config+0x40>)
 800225a:	2200      	movs	r2, #0
 800225c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800225e:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SysTick_Config+0x40>)
 8002260:	2207      	movs	r2, #7
 8002262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	e000e010 	.word	0xe000e010

08002274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff ff2d 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002298:	2300      	movs	r3, #0
 800229a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800229c:	f7ff ff42 	bl	8002124 <__NVIC_GetPriorityGrouping>
 80022a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68b9      	ldr	r1, [r7, #8]
 80022a6:	6978      	ldr	r0, [r7, #20]
 80022a8:	f7ff ff90 	bl	80021cc <NVIC_EncodePriority>
 80022ac:	4602      	mov	r2, r0
 80022ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022b2:	4611      	mov	r1, r2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff5f 	bl	8002178 <__NVIC_SetPriority>
}
 80022ba:	bf00      	nop
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b082      	sub	sp, #8
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	4603      	mov	r3, r0
 80022ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff35 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffa2 	bl	8002230 <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
	...

080022f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b08b      	sub	sp, #44	; 0x2c
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	e179      	b.n	8002600 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800230c:	2201      	movs	r2, #1
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	429a      	cmp	r2, r3
 8002326:	f040 8168 	bne.w	80025fa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a96      	ldr	r2, [pc, #600]	; (8002588 <HAL_GPIO_Init+0x290>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d05e      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002334:	4a94      	ldr	r2, [pc, #592]	; (8002588 <HAL_GPIO_Init+0x290>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d875      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800233a:	4a94      	ldr	r2, [pc, #592]	; (800258c <HAL_GPIO_Init+0x294>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d058      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002340:	4a92      	ldr	r2, [pc, #584]	; (800258c <HAL_GPIO_Init+0x294>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d86f      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002346:	4a92      	ldr	r2, [pc, #584]	; (8002590 <HAL_GPIO_Init+0x298>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d052      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 800234c:	4a90      	ldr	r2, [pc, #576]	; (8002590 <HAL_GPIO_Init+0x298>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d869      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002352:	4a90      	ldr	r2, [pc, #576]	; (8002594 <HAL_GPIO_Init+0x29c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d04c      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002358:	4a8e      	ldr	r2, [pc, #568]	; (8002594 <HAL_GPIO_Init+0x29c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d863      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800235e:	4a8e      	ldr	r2, [pc, #568]	; (8002598 <HAL_GPIO_Init+0x2a0>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d046      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
 8002364:	4a8c      	ldr	r2, [pc, #560]	; (8002598 <HAL_GPIO_Init+0x2a0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d85d      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 800236a:	2b12      	cmp	r3, #18
 800236c:	d82a      	bhi.n	80023c4 <HAL_GPIO_Init+0xcc>
 800236e:	2b12      	cmp	r3, #18
 8002370:	d859      	bhi.n	8002426 <HAL_GPIO_Init+0x12e>
 8002372:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <HAL_GPIO_Init+0x80>)
 8002374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002378:	080023f3 	.word	0x080023f3
 800237c:	080023cd 	.word	0x080023cd
 8002380:	080023df 	.word	0x080023df
 8002384:	08002421 	.word	0x08002421
 8002388:	08002427 	.word	0x08002427
 800238c:	08002427 	.word	0x08002427
 8002390:	08002427 	.word	0x08002427
 8002394:	08002427 	.word	0x08002427
 8002398:	08002427 	.word	0x08002427
 800239c:	08002427 	.word	0x08002427
 80023a0:	08002427 	.word	0x08002427
 80023a4:	08002427 	.word	0x08002427
 80023a8:	08002427 	.word	0x08002427
 80023ac:	08002427 	.word	0x08002427
 80023b0:	08002427 	.word	0x08002427
 80023b4:	08002427 	.word	0x08002427
 80023b8:	08002427 	.word	0x08002427
 80023bc:	080023d5 	.word	0x080023d5
 80023c0:	080023e9 	.word	0x080023e9
 80023c4:	4a75      	ldr	r2, [pc, #468]	; (800259c <HAL_GPIO_Init+0x2a4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ca:	e02c      	b.n	8002426 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	623b      	str	r3, [r7, #32]
          break;
 80023d2:	e029      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	3304      	adds	r3, #4
 80023da:	623b      	str	r3, [r7, #32]
          break;
 80023dc:	e024      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	3308      	adds	r3, #8
 80023e4:	623b      	str	r3, [r7, #32]
          break;
 80023e6:	e01f      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	330c      	adds	r3, #12
 80023ee:	623b      	str	r3, [r7, #32]
          break;
 80023f0:	e01a      	b.n	8002428 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d102      	bne.n	8002400 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023fa:	2304      	movs	r3, #4
 80023fc:	623b      	str	r3, [r7, #32]
          break;
 80023fe:	e013      	b.n	8002428 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002408:	2308      	movs	r3, #8
 800240a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69fa      	ldr	r2, [r7, #28]
 8002410:	611a      	str	r2, [r3, #16]
          break;
 8002412:	e009      	b.n	8002428 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002414:	2308      	movs	r3, #8
 8002416:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69fa      	ldr	r2, [r7, #28]
 800241c:	615a      	str	r2, [r3, #20]
          break;
 800241e:	e003      	b.n	8002428 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002420:	2300      	movs	r3, #0
 8002422:	623b      	str	r3, [r7, #32]
          break;
 8002424:	e000      	b.n	8002428 <HAL_GPIO_Init+0x130>
          break;
 8002426:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	2bff      	cmp	r3, #255	; 0xff
 800242c:	d801      	bhi.n	8002432 <HAL_GPIO_Init+0x13a>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	e001      	b.n	8002436 <HAL_GPIO_Init+0x13e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3304      	adds	r3, #4
 8002436:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	2bff      	cmp	r3, #255	; 0xff
 800243c:	d802      	bhi.n	8002444 <HAL_GPIO_Init+0x14c>
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	e002      	b.n	800244a <HAL_GPIO_Init+0x152>
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	3b08      	subs	r3, #8
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	210f      	movs	r1, #15
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	fa01 f303 	lsl.w	r3, r1, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	401a      	ands	r2, r3
 800245c:	6a39      	ldr	r1, [r7, #32]
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	431a      	orrs	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 80c1 	beq.w	80025fa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002478:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <HAL_GPIO_Init+0x2a8>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a48      	ldr	r2, [pc, #288]	; (80025a0 <HAL_GPIO_Init+0x2a8>)
 800247e:	f043 0301 	orr.w	r3, r3, #1
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <HAL_GPIO_Init+0x2a8>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	60bb      	str	r3, [r7, #8]
 800248e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002490:	4a44      	ldr	r2, [pc, #272]	; (80025a4 <HAL_GPIO_Init+0x2ac>)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	089b      	lsrs	r3, r3, #2
 8002496:	3302      	adds	r3, #2
 8002498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800249c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800249e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	220f      	movs	r2, #15
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	68fa      	ldr	r2, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3c      	ldr	r2, [pc, #240]	; (80025a8 <HAL_GPIO_Init+0x2b0>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d01f      	beq.n	80024fc <HAL_GPIO_Init+0x204>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a3b      	ldr	r2, [pc, #236]	; (80025ac <HAL_GPIO_Init+0x2b4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d019      	beq.n	80024f8 <HAL_GPIO_Init+0x200>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3a      	ldr	r2, [pc, #232]	; (80025b0 <HAL_GPIO_Init+0x2b8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <HAL_GPIO_Init+0x1fc>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a39      	ldr	r2, [pc, #228]	; (80025b4 <HAL_GPIO_Init+0x2bc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00d      	beq.n	80024f0 <HAL_GPIO_Init+0x1f8>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a38      	ldr	r2, [pc, #224]	; (80025b8 <HAL_GPIO_Init+0x2c0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x1f4>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a37      	ldr	r2, [pc, #220]	; (80025bc <HAL_GPIO_Init+0x2c4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_GPIO_Init+0x1f0>
 80024e4:	2305      	movs	r3, #5
 80024e6:	e00a      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024e8:	2306      	movs	r3, #6
 80024ea:	e008      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024ec:	2304      	movs	r3, #4
 80024ee:	e006      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024f0:	2303      	movs	r3, #3
 80024f2:	e004      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024f4:	2302      	movs	r3, #2
 80024f6:	e002      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024f8:	2301      	movs	r3, #1
 80024fa:	e000      	b.n	80024fe <HAL_GPIO_Init+0x206>
 80024fc:	2300      	movs	r3, #0
 80024fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002500:	f002 0203 	and.w	r2, r2, #3
 8002504:	0092      	lsls	r2, r2, #2
 8002506:	4093      	lsls	r3, r2
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	4313      	orrs	r3, r2
 800250c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800250e:	4925      	ldr	r1, [pc, #148]	; (80025a4 <HAL_GPIO_Init+0x2ac>)
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d006      	beq.n	8002536 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	4924      	ldr	r1, [pc, #144]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	600b      	str	r3, [r1, #0]
 8002534:	e006      	b.n	8002544 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002536:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	43db      	mvns	r3, r3
 800253e:	4920      	ldr	r1, [pc, #128]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 8002540:	4013      	ands	r3, r2
 8002542:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d006      	beq.n	800255e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002550:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	491a      	ldr	r1, [pc, #104]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]
 800255c:	e006      	b.n	800256c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	43db      	mvns	r3, r3
 8002566:	4916      	ldr	r1, [pc, #88]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 8002568:	4013      	ands	r3, r2
 800256a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d025      	beq.n	80025c4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	4910      	ldr	r1, [pc, #64]	; (80025c0 <HAL_GPIO_Init+0x2c8>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	4313      	orrs	r3, r2
 8002582:	608b      	str	r3, [r1, #8]
 8002584:	e025      	b.n	80025d2 <HAL_GPIO_Init+0x2da>
 8002586:	bf00      	nop
 8002588:	10320000 	.word	0x10320000
 800258c:	10310000 	.word	0x10310000
 8002590:	10220000 	.word	0x10220000
 8002594:	10210000 	.word	0x10210000
 8002598:	10120000 	.word	0x10120000
 800259c:	10110000 	.word	0x10110000
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40010000 	.word	0x40010000
 80025a8:	40010800 	.word	0x40010800
 80025ac:	40010c00 	.word	0x40010c00
 80025b0:	40011000 	.word	0x40011000
 80025b4:	40011400 	.word	0x40011400
 80025b8:	40011800 	.word	0x40011800
 80025bc:	40011c00 	.word	0x40011c00
 80025c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <HAL_GPIO_Init+0x324>)
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	4913      	ldr	r1, [pc, #76]	; (800261c <HAL_GPIO_Init+0x324>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d006      	beq.n	80025ec <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80025de:	4b0f      	ldr	r3, [pc, #60]	; (800261c <HAL_GPIO_Init+0x324>)
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	490e      	ldr	r1, [pc, #56]	; (800261c <HAL_GPIO_Init+0x324>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	60cb      	str	r3, [r1, #12]
 80025ea:	e006      	b.n	80025fa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_GPIO_Init+0x324>)
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	4909      	ldr	r1, [pc, #36]	; (800261c <HAL_GPIO_Init+0x324>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	3301      	adds	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	f47f ae7e 	bne.w	800230c <HAL_GPIO_Init+0x14>
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	372c      	adds	r7, #44	; 0x2c
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d006      	beq.n	8002674 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002666:	4a05      	ldr	r2, [pc, #20]	; (800267c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002668:	88fb      	ldrh	r3, [r7, #6]
 800266a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f806 	bl	8002680 <HAL_GPIO_EXTI_Callback>
  }
}
 8002674:	bf00      	nop
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	4603      	mov	r3, r0
 8002688:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e12b      	b.n	80028fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d106      	bne.n	80026c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7fe fc1e 	bl	8000efc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2224      	movs	r2, #36	; 0x24
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f022 0201 	bic.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026f8:	f001 fba0 	bl	8003e3c <HAL_RCC_GetPCLK1Freq>
 80026fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4a81      	ldr	r2, [pc, #516]	; (8002908 <HAL_I2C_Init+0x274>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d807      	bhi.n	8002718 <HAL_I2C_Init+0x84>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	4a80      	ldr	r2, [pc, #512]	; (800290c <HAL_I2C_Init+0x278>)
 800270c:	4293      	cmp	r3, r2
 800270e:	bf94      	ite	ls
 8002710:	2301      	movls	r3, #1
 8002712:	2300      	movhi	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	e006      	b.n	8002726 <HAL_I2C_Init+0x92>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4a7d      	ldr	r2, [pc, #500]	; (8002910 <HAL_I2C_Init+0x27c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	bf94      	ite	ls
 8002720:	2301      	movls	r3, #1
 8002722:	2300      	movhi	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e0e7      	b.n	80028fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4a78      	ldr	r2, [pc, #480]	; (8002914 <HAL_I2C_Init+0x280>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0c9b      	lsrs	r3, r3, #18
 8002738:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	430a      	orrs	r2, r1
 800274c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6a1b      	ldr	r3, [r3, #32]
 8002754:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a6a      	ldr	r2, [pc, #424]	; (8002908 <HAL_I2C_Init+0x274>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d802      	bhi.n	8002768 <HAL_I2C_Init+0xd4>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	3301      	adds	r3, #1
 8002766:	e009      	b.n	800277c <HAL_I2C_Init+0xe8>
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800276e:	fb02 f303 	mul.w	r3, r2, r3
 8002772:	4a69      	ldr	r2, [pc, #420]	; (8002918 <HAL_I2C_Init+0x284>)
 8002774:	fba2 2303 	umull	r2, r3, r2, r3
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	3301      	adds	r3, #1
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	430b      	orrs	r3, r1
 8002782:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800278e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	495c      	ldr	r1, [pc, #368]	; (8002908 <HAL_I2C_Init+0x274>)
 8002798:	428b      	cmp	r3, r1
 800279a:	d819      	bhi.n	80027d0 <HAL_I2C_Init+0x13c>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1e59      	subs	r1, r3, #1
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027aa:	1c59      	adds	r1, r3, #1
 80027ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027b0:	400b      	ands	r3, r1
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_I2C_Init+0x138>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1e59      	subs	r1, r3, #1
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ca:	e051      	b.n	8002870 <HAL_I2C_Init+0x1dc>
 80027cc:	2304      	movs	r3, #4
 80027ce:	e04f      	b.n	8002870 <HAL_I2C_Init+0x1dc>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d111      	bne.n	80027fc <HAL_I2C_Init+0x168>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	440b      	add	r3, r1
 80027e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ea:	3301      	adds	r3, #1
 80027ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	bf0c      	ite	eq
 80027f4:	2301      	moveq	r3, #1
 80027f6:	2300      	movne	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e012      	b.n	8002822 <HAL_I2C_Init+0x18e>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	1e58      	subs	r0, r3, #1
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	0099      	lsls	r1, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002812:	3301      	adds	r3, #1
 8002814:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Init+0x196>
 8002826:	2301      	movs	r3, #1
 8002828:	e022      	b.n	8002870 <HAL_I2C_Init+0x1dc>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d10e      	bne.n	8002850 <HAL_I2C_Init+0x1bc>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1e58      	subs	r0, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	460b      	mov	r3, r1
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	440b      	add	r3, r1
 8002840:	fbb0 f3f3 	udiv	r3, r0, r3
 8002844:	3301      	adds	r3, #1
 8002846:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800284e:	e00f      	b.n	8002870 <HAL_I2C_Init+0x1dc>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e58      	subs	r0, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6859      	ldr	r1, [r3, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	0099      	lsls	r1, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	fbb0 f3f3 	udiv	r3, r0, r3
 8002866:	3301      	adds	r3, #1
 8002868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	6809      	ldr	r1, [r1, #0]
 8002874:	4313      	orrs	r3, r2
 8002876:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69da      	ldr	r2, [r3, #28]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800289e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6911      	ldr	r1, [r2, #16]
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	68d2      	ldr	r2, [r2, #12]
 80028aa:	4311      	orrs	r1, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	431a      	orrs	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2220      	movs	r2, #32
 80028ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	000186a0 	.word	0x000186a0
 800290c:	001e847f 	.word	0x001e847f
 8002910:	003d08ff 	.word	0x003d08ff
 8002914:	431bde83 	.word	0x431bde83
 8002918:	10624dd3 	.word	0x10624dd3

0800291c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af02      	add	r7, sp, #8
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	4608      	mov	r0, r1
 8002926:	4611      	mov	r1, r2
 8002928:	461a      	mov	r2, r3
 800292a:	4603      	mov	r3, r0
 800292c:	817b      	strh	r3, [r7, #10]
 800292e:	460b      	mov	r3, r1
 8002930:	813b      	strh	r3, [r7, #8]
 8002932:	4613      	mov	r3, r2
 8002934:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002936:	f7ff f879 	bl	8001a2c <HAL_GetTick>
 800293a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b20      	cmp	r3, #32
 8002946:	f040 80d9 	bne.w	8002afc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2319      	movs	r3, #25
 8002950:	2201      	movs	r2, #1
 8002952:	496d      	ldr	r1, [pc, #436]	; (8002b08 <HAL_I2C_Mem_Write+0x1ec>)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 fcc1 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002960:	2302      	movs	r3, #2
 8002962:	e0cc      	b.n	8002afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_I2C_Mem_Write+0x56>
 800296e:	2302      	movs	r3, #2
 8002970:	e0c5      	b.n	8002afe <HAL_I2C_Mem_Write+0x1e2>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d007      	beq.n	8002998 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2221      	movs	r2, #33	; 0x21
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2240      	movs	r2, #64	; 0x40
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6a3a      	ldr	r2, [r7, #32]
 80029c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80029c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ce:	b29a      	uxth	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a4d      	ldr	r2, [pc, #308]	; (8002b0c <HAL_I2C_Mem_Write+0x1f0>)
 80029d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029da:	88f8      	ldrh	r0, [r7, #6]
 80029dc:	893a      	ldrh	r2, [r7, #8]
 80029de:	8979      	ldrh	r1, [r7, #10]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	4603      	mov	r3, r0
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 faf8 	bl	8002fe0 <I2C_RequestMemoryWrite>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d052      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e081      	b.n	8002afe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fd42 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00d      	beq.n	8002a26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d107      	bne.n	8002a22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e06b      	b.n	8002afe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d11b      	bne.n	8002a9c <HAL_I2C_Mem_Write+0x180>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d017      	beq.n	8002a9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	3b01      	subs	r3, #1
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1aa      	bne.n	80029fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fd2e 	bl	800350a <I2C_WaitOnBTFFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d107      	bne.n	8002acc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e016      	b.n	8002afe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	00100002 	.word	0x00100002
 8002b0c:	ffff0000 	.word	0xffff0000

08002b10 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b08c      	sub	sp, #48	; 0x30
 8002b14:	af02      	add	r7, sp, #8
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	4608      	mov	r0, r1
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4603      	mov	r3, r0
 8002b20:	817b      	strh	r3, [r7, #10]
 8002b22:	460b      	mov	r3, r1
 8002b24:	813b      	strh	r3, [r7, #8]
 8002b26:	4613      	mov	r3, r2
 8002b28:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b2e:	f7fe ff7d 	bl	8001a2c <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	f040 8244 	bne.w	8002fca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	2319      	movs	r3, #25
 8002b48:	2201      	movs	r2, #1
 8002b4a:	4982      	ldr	r1, [pc, #520]	; (8002d54 <HAL_I2C_Mem_Read+0x244>)
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fbc5 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e237      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_I2C_Mem_Read+0x5a>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e230      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d007      	beq.n	8002b90 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2222      	movs	r2, #34	; 0x22
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002bc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc6:	b29a      	uxth	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a62      	ldr	r2, [pc, #392]	; (8002d58 <HAL_I2C_Mem_Read+0x248>)
 8002bd0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002bd2:	88f8      	ldrh	r0, [r7, #6]
 8002bd4:	893a      	ldrh	r2, [r7, #8]
 8002bd6:	8979      	ldrh	r1, [r7, #10]
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	4603      	mov	r3, r0
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 fa92 	bl	800310c <I2C_RequestMemoryRead>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e1ec      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d113      	bne.n	8002c22 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	e1c0      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d11e      	bne.n	8002c68 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c3a:	b672      	cpsid	i
}
 8002c3c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	699b      	ldr	r3, [r3, #24]
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c62:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c64:	b662      	cpsie	i
}
 8002c66:	e035      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d11e      	bne.n	8002cae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c84:	2300      	movs	r3, #0
 8002c86:	617b      	str	r3, [r7, #20]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	617b      	str	r3, [r7, #20]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002caa:	b662      	cpsie	i
}
 8002cac:	e012      	b.n	8002cd4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cbc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	695b      	ldr	r3, [r3, #20]
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002cd4:	e166      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cda:	2b03      	cmp	r3, #3
 8002cdc:	f200 811f 	bhi.w	8002f1e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d123      	bne.n	8002d30 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fc4d 	bl	800358c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e167      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691a      	ldr	r2, [r3, #16]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d2e:	e139      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d152      	bne.n	8002dde <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	2200      	movs	r2, #0
 8002d40:	4906      	ldr	r1, [pc, #24]	; (8002d5c <HAL_I2C_Mem_Read+0x24c>)
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 faca 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e13c      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
 8002d52:	bf00      	nop
 8002d54:	00100002 	.word	0x00100002
 8002d58:	ffff0000 	.word	0xffff0000
 8002d5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d60:	b672      	cpsid	i
}
 8002d62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	b2d2      	uxtb	r2, r2
 8002d80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002da6:	b662      	cpsie	i
}
 8002da8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	1c5a      	adds	r2, r3, #1
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ddc:	e0e2      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	2200      	movs	r2, #0
 8002de6:	497b      	ldr	r1, [pc, #492]	; (8002fd4 <HAL_I2C_Mem_Read+0x4c4>)
 8002de8:	68f8      	ldr	r0, [r7, #12]
 8002dea:	f000 fa77 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e0e9      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e08:	b672      	cpsid	i
}
 8002e0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691a      	ldr	r2, [r3, #16]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	b2d2      	uxtb	r2, r2
 8002e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e3e:	4b66      	ldr	r3, [pc, #408]	; (8002fd8 <HAL_I2C_Mem_Read+0x4c8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	08db      	lsrs	r3, r3, #3
 8002e44:	4a65      	ldr	r2, [pc, #404]	; (8002fdc <HAL_I2C_Mem_Read+0x4cc>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	0a1a      	lsrs	r2, r3, #8
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	4413      	add	r3, r2
 8002e52:	00da      	lsls	r2, r3, #3
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d118      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e86:	b662      	cpsie	i
}
 8002e88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e09a      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d1d9      	bne.n	8002e58 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ee6:	b662      	cpsie	i
}
 8002ee8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	691a      	ldr	r2, [r3, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f06:	3b01      	subs	r3, #1
 8002f08:	b29a      	uxth	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f1c:	e042      	b.n	8002fa4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 fb32 	bl	800358c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e04c      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	691a      	ldr	r2, [r3, #16]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	b2d2      	uxtb	r2, r2
 8002f3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b29a      	uxth	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d118      	bne.n	8002fa4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	691a      	ldr	r2, [r3, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	b29a      	uxth	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f47f ae94 	bne.w	8002cd6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	e000      	b.n	8002fcc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
  }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3728      	adds	r7, #40	; 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	00010004 	.word	0x00010004
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	14f8b589 	.word	0x14f8b589

08002fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	813b      	strh	r3, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2200      	movs	r2, #0
 8003012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f960 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003030:	d103      	bne.n	800303a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e05f      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800304c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	492d      	ldr	r1, [pc, #180]	; (8003108 <I2C_RequestMemoryWrite+0x128>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f998 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04c      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa02 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e02b      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	611a      	str	r2, [r3, #16]
 80030b6:	e021      	b.n	80030fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030b8:	893b      	ldrh	r3, [r7, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9dc 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e005      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	00010002 	.word	0x00010002

0800310c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	4608      	mov	r0, r1
 8003116:	4611      	mov	r1, r2
 8003118:	461a      	mov	r2, r3
 800311a:	4603      	mov	r3, r0
 800311c:	817b      	strh	r3, [r7, #10]
 800311e:	460b      	mov	r3, r1
 8003120:	813b      	strh	r3, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2200      	movs	r2, #0
 800314e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8c2 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316c:	d103      	bne.n	8003176 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0aa      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003188:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	4952      	ldr	r1, [pc, #328]	; (80032d8 <I2C_RequestMemoryRead+0x1cc>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8fa 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e097      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f964 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d107      	bne.n	80031de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e076      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	e021      	b.n	8003238 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f93e 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003228:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e050      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f923 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e035      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003272:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	2200      	movs	r2, #0
 800327c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f82b 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d103      	bne.n	80032a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e013      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032a8:	897b      	ldrh	r3, [r7, #10]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	4906      	ldr	r1, [pc, #24]	; (80032d8 <I2C_RequestMemoryRead+0x1cc>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f863 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	e025      	b.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d021      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe fb99 	bl	8001a2c <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e023      	b.n	8003382 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10d      	bne.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	e00c      	b.n	800337a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	429a      	cmp	r2, r3
 800337e:	d0b6      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003398:	e051      	b.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d123      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0204 	orr.w	r2, r3, #4
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e046      	b.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d021      	beq.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe fb17 	bl	8001a2c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e020      	b.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10c      	bne.n	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	e00b      	b.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d18d      	bne.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003494:	e02d      	b.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8ce 	bl	8003638 <I2C_IsAcknowledgeFailed>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e02d      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe fabd 	bl	8001a2c <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e007      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d1ca      	bne.n	8003496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003516:	e02d      	b.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f88d 	bl	8003638 <I2C_IsAcknowledgeFailed>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e02d      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d021      	beq.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fe fa7c 	bl	8001a2c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d1ca      	bne.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003598:	e042      	b.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d119      	bne.n	80035dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e029      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035dc:	f7fe fa26 	bl	8001a2c <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d1b5      	bne.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d11b      	bne.n	8003688 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003658:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e272      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 8087 	beq.w	80037c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036b4:	4b92      	ldr	r3, [pc, #584]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d00c      	beq.n	80036da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036c0:	4b8f      	ldr	r3, [pc, #572]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d112      	bne.n	80036f2 <HAL_RCC_OscConfig+0x5e>
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d10b      	bne.n	80036f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036da:	4b89      	ldr	r3, [pc, #548]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d06c      	beq.n	80037c0 <HAL_RCC_OscConfig+0x12c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d168      	bne.n	80037c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e24c      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x76>
 80036fc:	4b80      	ldr	r3, [pc, #512]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a7f      	ldr	r2, [pc, #508]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e02e      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10c      	bne.n	800372c <HAL_RCC_OscConfig+0x98>
 8003712:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003718:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371c:	6013      	str	r3, [r2, #0]
 800371e:	4b78      	ldr	r3, [pc, #480]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a77      	ldr	r2, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003724:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	e01d      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0xbc>
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a71      	ldr	r2, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800373c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b6f      	ldr	r3, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a6e      	ldr	r2, [pc, #440]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e00b      	b.n	8003768 <HAL_RCC_OscConfig+0xd4>
 8003750:	4b6b      	ldr	r3, [pc, #428]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a6a      	ldr	r2, [pc, #424]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	6013      	str	r3, [r2, #0]
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a67      	ldr	r2, [pc, #412]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003766:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d013      	beq.n	8003798 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003770:	f7fe f95c 	bl	8001a2c <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003776:	e008      	b.n	800378a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003778:	f7fe f958 	bl	8001a2c <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e200      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d0f0      	beq.n	8003778 <HAL_RCC_OscConfig+0xe4>
 8003796:	e014      	b.n	80037c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe f948 	bl	8001a2c <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a0:	f7fe f944 	bl	8001a2c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b64      	cmp	r3, #100	; 0x64
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e1ec      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b2:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x10c>
 80037be:	e000      	b.n	80037c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d063      	beq.n	8003896 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037ce:	4b4c      	ldr	r3, [pc, #304]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00b      	beq.n	80037f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037da:	4b49      	ldr	r3, [pc, #292]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f003 030c 	and.w	r3, r3, #12
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d11c      	bne.n	8003820 <HAL_RCC_OscConfig+0x18c>
 80037e6:	4b46      	ldr	r3, [pc, #280]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d116      	bne.n	8003820 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <HAL_RCC_OscConfig+0x176>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d001      	beq.n	800380a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e1c0      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380a:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695b      	ldr	r3, [r3, #20]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4939      	ldr	r1, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800381a:	4313      	orrs	r3, r2
 800381c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800381e:	e03a      	b.n	8003896 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d020      	beq.n	800386a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003828:	4b36      	ldr	r3, [pc, #216]	; (8003904 <HAL_RCC_OscConfig+0x270>)
 800382a:	2201      	movs	r2, #1
 800382c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382e:	f7fe f8fd 	bl	8001a2c <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003836:	f7fe f8f9 	bl	8001a2c <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e1a1      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003848:	4b2d      	ldr	r3, [pc, #180]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0f0      	beq.n	8003836 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003854:	4b2a      	ldr	r3, [pc, #168]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4927      	ldr	r1, [pc, #156]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 8003864:	4313      	orrs	r3, r2
 8003866:	600b      	str	r3, [r1, #0]
 8003868:	e015      	b.n	8003896 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386a:	4b26      	ldr	r3, [pc, #152]	; (8003904 <HAL_RCC_OscConfig+0x270>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7fe f8dc 	bl	8001a2c <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003878:	f7fe f8d8 	bl	8001a2c <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e180      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800388a:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d03a      	beq.n	8003918 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d019      	beq.n	80038de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <HAL_RCC_OscConfig+0x274>)
 80038ac:	2201      	movs	r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b0:	f7fe f8bc 	bl	8001a2c <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b8:	f7fe f8b8 	bl	8001a2c <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e160      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ca:	4b0d      	ldr	r3, [pc, #52]	; (8003900 <HAL_RCC_OscConfig+0x26c>)
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038d6:	2001      	movs	r0, #1
 80038d8:	f000 fad8 	bl	8003e8c <RCC_Delay>
 80038dc:	e01c      	b.n	8003918 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038de:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <HAL_RCC_OscConfig+0x274>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038e4:	f7fe f8a2 	bl	8001a2c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ea:	e00f      	b.n	800390c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ec:	f7fe f89e 	bl	8001a2c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d908      	bls.n	800390c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e146      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
 80038fe:	bf00      	nop
 8003900:	40021000 	.word	0x40021000
 8003904:	42420000 	.word	0x42420000
 8003908:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390c:	4b92      	ldr	r3, [pc, #584]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1e9      	bne.n	80038ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a6 	beq.w	8003a72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800392a:	4b8b      	ldr	r3, [pc, #556]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10d      	bne.n	8003952 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003936:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	4a87      	ldr	r2, [pc, #540]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800393c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003940:	61d3      	str	r3, [r2, #28]
 8003942:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800394e:	2301      	movs	r3, #1
 8003950:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003952:	4b82      	ldr	r3, [pc, #520]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	2b00      	cmp	r3, #0
 800395c:	d118      	bne.n	8003990 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800395e:	4b7f      	ldr	r3, [pc, #508]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a7e      	ldr	r2, [pc, #504]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800396a:	f7fe f85f 	bl	8001a2c <HAL_GetTick>
 800396e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003970:	e008      	b.n	8003984 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003972:	f7fe f85b 	bl	8001a2c <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b64      	cmp	r3, #100	; 0x64
 800397e:	d901      	bls.n	8003984 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e103      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003984:	4b75      	ldr	r3, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x4c8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0f0      	beq.n	8003972 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	68db      	ldr	r3, [r3, #12]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d106      	bne.n	80039a6 <HAL_RCC_OscConfig+0x312>
 8003998:	4b6f      	ldr	r3, [pc, #444]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	6213      	str	r3, [r2, #32]
 80039a4:	e02d      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10c      	bne.n	80039c8 <HAL_RCC_OscConfig+0x334>
 80039ae:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	4a69      	ldr	r2, [pc, #420]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	6213      	str	r3, [r2, #32]
 80039ba:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	4a66      	ldr	r2, [pc, #408]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039c0:	f023 0304 	bic.w	r3, r3, #4
 80039c4:	6213      	str	r3, [r2, #32]
 80039c6:	e01c      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d10c      	bne.n	80039ea <HAL_RCC_OscConfig+0x356>
 80039d0:	4b61      	ldr	r3, [pc, #388]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4a60      	ldr	r2, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039d6:	f043 0304 	orr.w	r3, r3, #4
 80039da:	6213      	str	r3, [r2, #32]
 80039dc:	4b5e      	ldr	r3, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	4a5d      	ldr	r2, [pc, #372]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039e2:	f043 0301 	orr.w	r3, r3, #1
 80039e6:	6213      	str	r3, [r2, #32]
 80039e8:	e00b      	b.n	8003a02 <HAL_RCC_OscConfig+0x36e>
 80039ea:	4b5b      	ldr	r3, [pc, #364]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	4a5a      	ldr	r2, [pc, #360]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039f0:	f023 0301 	bic.w	r3, r3, #1
 80039f4:	6213      	str	r3, [r2, #32]
 80039f6:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	4a57      	ldr	r2, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f023 0304 	bic.w	r3, r3, #4
 8003a00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d015      	beq.n	8003a36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a0a:	f7fe f80f 	bl	8001a2c <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a10:	e00a      	b.n	8003a28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a12:	f7fe f80b 	bl	8001a2c <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e0b1      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a28:	4b4b      	ldr	r3, [pc, #300]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a2a:	6a1b      	ldr	r3, [r3, #32]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ee      	beq.n	8003a12 <HAL_RCC_OscConfig+0x37e>
 8003a34:	e014      	b.n	8003a60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a36:	f7fd fff9 	bl	8001a2c <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a3c:	e00a      	b.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3e:	f7fd fff5 	bl	8001a2c <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e09b      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a54:	4b40      	ldr	r3, [pc, #256]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1ee      	bne.n	8003a3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a66:	4b3c      	ldr	r3, [pc, #240]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	4a3b      	ldr	r2, [pc, #236]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69db      	ldr	r3, [r3, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 8087 	beq.w	8003b8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a7c:	4b36      	ldr	r3, [pc, #216]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d061      	beq.n	8003b4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d146      	bne.n	8003b1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a90:	4b33      	ldr	r3, [pc, #204]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a96:	f7fd ffc9 	bl	8001a2c <HAL_GetTick>
 8003a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9c:	e008      	b.n	8003ab0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a9e:	f7fd ffc5 	bl	8001a2c <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e06d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab0:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1f0      	bne.n	8003a9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac4:	d108      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	4921      	ldr	r1, [pc, #132]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ad8:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a19      	ldr	r1, [r3, #32]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	491b      	ldr	r1, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fd ff99 	bl	8001a2c <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fd ff95 	bl	8001a2c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e03d      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x46a>
 8003b1c:	e035      	b.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_OscConfig+0x4cc>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fd ff82 	bl	8001a2c <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fd ff7e 	bl	8001a2c <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e026      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x4c4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x498>
 8003b4a:	e01e      	b.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e019      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <HAL_RCC_OscConfig+0x500>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a1b      	ldr	r3, [r3, #32]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d106      	bne.n	8003b86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d001      	beq.n	8003b8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3718      	adds	r7, #24
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40021000 	.word	0x40021000

08003b98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e0d0      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bac:	4b6a      	ldr	r3, [pc, #424]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 0307 	and.w	r3, r3, #7
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d910      	bls.n	8003bdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bba:	4b67      	ldr	r3, [pc, #412]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	4965      	ldr	r1, [pc, #404]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b63      	ldr	r3, [pc, #396]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e0b8      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0304 	and.w	r3, r3, #4
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bf4:	4b59      	ldr	r3, [pc, #356]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	4a58      	ldr	r2, [pc, #352]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003bfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003bfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d005      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c0c:	4b53      	ldr	r3, [pc, #332]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4a52      	ldr	r2, [pc, #328]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c18:	4b50      	ldr	r3, [pc, #320]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	494d      	ldr	r1, [pc, #308]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d040      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b47      	ldr	r3, [pc, #284]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d115      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e07f      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d107      	bne.n	8003c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c56:	4b41      	ldr	r3, [pc, #260]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d109      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e073      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c66:	4b3d      	ldr	r3, [pc, #244]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d101      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e06b      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c76:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f023 0203 	bic.w	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4936      	ldr	r1, [pc, #216]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c88:	f7fd fed0 	bl	8001a2c <HAL_GetTick>
 8003c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	e00a      	b.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c90:	f7fd fecc 	bl	8001a2c <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e053      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca6:	4b2d      	ldr	r3, [pc, #180]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 020c 	and.w	r2, r3, #12
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d1eb      	bne.n	8003c90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d210      	bcs.n	8003ce8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc6:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 0207 	bic.w	r2, r3, #7
 8003cce:	4922      	ldr	r1, [pc, #136]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cd6:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	683a      	ldr	r2, [r7, #0]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d001      	beq.n	8003ce8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e032      	b.n	8003d4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cf4:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4916      	ldr	r1, [pc, #88]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d009      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d12:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	00db      	lsls	r3, r3, #3
 8003d20:	490e      	ldr	r1, [pc, #56]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d26:	f000 f821 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	490a      	ldr	r1, [pc, #40]	; (8003d60 <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	5ccb      	ldrb	r3, [r1, r3]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_RCC_ClockConfig+0x1cc>)
 8003d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d42:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_ClockConfig+0x1d0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd fe2e 	bl	80019a8 <HAL_InitTick>

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	40022000 	.word	0x40022000
 8003d5c:	40021000 	.word	0x40021000
 8003d60:	0800589c 	.word	0x0800589c
 8003d64:	20000000 	.word	0x20000000
 8003d68:	20000004 	.word	0x20000004

08003d6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d6c:	b490      	push	{r4, r7}
 8003d6e:	b08a      	sub	sp, #40	; 0x28
 8003d70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d72:	4b29      	ldr	r3, [pc, #164]	; (8003e18 <HAL_RCC_GetSysClockFreq+0xac>)
 8003d74:	1d3c      	adds	r4, r7, #4
 8003d76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d7c:	f240 2301 	movw	r3, #513	; 0x201
 8003d80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61fb      	str	r3, [r7, #28]
 8003d86:	2300      	movs	r3, #0
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003d92:	2300      	movs	r3, #0
 8003d94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d002      	beq.n	8003dac <HAL_RCC_GetSysClockFreq+0x40>
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d003      	beq.n	8003db2 <HAL_RCC_GetSysClockFreq+0x46>
 8003daa:	e02b      	b.n	8003e04 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dac:	4b1c      	ldr	r3, [pc, #112]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003dae:	623b      	str	r3, [r7, #32]
      break;
 8003db0:	e02b      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	0c9b      	lsrs	r3, r3, #18
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	3328      	adds	r3, #40	; 0x28
 8003dbc:	443b      	add	r3, r7
 8003dbe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dc2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d012      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dce:	4b13      	ldr	r3, [pc, #76]	; (8003e1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	0c5b      	lsrs	r3, r3, #17
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	3328      	adds	r3, #40	; 0x28
 8003dda:	443b      	add	r3, r7
 8003ddc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003de0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	4a0e      	ldr	r2, [pc, #56]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003de6:	fb03 f202 	mul.w	r2, r3, r2
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	627b      	str	r3, [r7, #36]	; 0x24
 8003df2:	e004      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	4a0b      	ldr	r2, [pc, #44]	; (8003e24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003df8:	fb02 f303 	mul.w	r3, r2, r3
 8003dfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	623b      	str	r3, [r7, #32]
      break;
 8003e02:	e002      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003e06:	623b      	str	r3, [r7, #32]
      break;
 8003e08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0a:	6a3b      	ldr	r3, [r7, #32]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc90      	pop	{r4, r7}
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	0800528c 	.word	0x0800528c
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	007a1200 	.word	0x007a1200
 8003e24:	003d0900 	.word	0x003d0900

08003e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e2c:	4b02      	ldr	r3, [pc, #8]	; (8003e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bc80      	pop	{r7}
 8003e36:	4770      	bx	lr
 8003e38:	20000000 	.word	0x20000000

08003e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e40:	f7ff fff2 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e44:	4602      	mov	r2, r0
 8003e46:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	4903      	ldr	r1, [pc, #12]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e52:	5ccb      	ldrb	r3, [r1, r3]
 8003e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	080058ac 	.word	0x080058ac

08003e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e68:	f7ff ffde 	bl	8003e28 <HAL_RCC_GetHCLKFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	0adb      	lsrs	r3, r3, #11
 8003e74:	f003 0307 	and.w	r3, r3, #7
 8003e78:	4903      	ldr	r1, [pc, #12]	; (8003e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	40021000 	.word	0x40021000
 8003e88:	080058ac 	.word	0x080058ac

08003e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e94:	4b0a      	ldr	r3, [pc, #40]	; (8003ec0 <RCC_Delay+0x34>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <RCC_Delay+0x38>)
 8003e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9e:	0a5b      	lsrs	r3, r3, #9
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ea8:	bf00      	nop
  }
  while (Delay --);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1e5a      	subs	r2, r3, #1
 8003eae:	60fa      	str	r2, [r7, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f9      	bne.n	8003ea8 <RCC_Delay+0x1c>
}
 8003eb4:	bf00      	nop
 8003eb6:	bf00      	nop
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bc80      	pop	{r7}
 8003ebe:	4770      	bx	lr
 8003ec0:	20000000 	.word	0x20000000
 8003ec4:	10624dd3 	.word	0x10624dd3

08003ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d07d      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee8:	4b4f      	ldr	r3, [pc, #316]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10d      	bne.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef4:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ef6:	69db      	ldr	r3, [r3, #28]
 8003ef8:	4a4b      	ldr	r2, [pc, #300]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	61d3      	str	r3, [r2, #28]
 8003f00:	4b49      	ldr	r3, [pc, #292]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f10:	4b46      	ldr	r3, [pc, #280]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d118      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1c:	4b43      	ldr	r3, [pc, #268]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a42      	ldr	r2, [pc, #264]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f28:	f7fd fd80 	bl	8001a2c <HAL_GetTick>
 8003f2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	e008      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f30:	f7fd fd7c 	bl	8001a2c <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	2b64      	cmp	r3, #100	; 0x64
 8003f3c:	d901      	bls.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e06d      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f42:	4b3a      	ldr	r3, [pc, #232]	; (800402c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d0f0      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f4e:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d02e      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d027      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f6c:	4b2e      	ldr	r3, [pc, #184]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f76:	4b2e      	ldr	r3, [pc, #184]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f7c:	4b2c      	ldr	r3, [pc, #176]	; (8004030 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003f82:	4a29      	ldr	r2, [pc, #164]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d014      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f92:	f7fd fd4b 	bl	8001a2c <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fd fd47 	bl	8001a2c <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e036      	b.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ee      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	4917      	ldr	r1, [pc, #92]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	69db      	ldr	r3, [r3, #28]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fde:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fec:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	490b      	ldr	r1, [pc, #44]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0310 	and.w	r3, r3, #16
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	4904      	ldr	r1, [pc, #16]	; (8004028 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004018:	4313      	orrs	r3, r2
 800401a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
 8004030:	42420440 	.word	0x42420440

08004034 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b08d      	sub	sp, #52	; 0x34
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800403c:	4b6a      	ldr	r3, [pc, #424]	; (80041e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>)
 800403e:	f107 040c 	add.w	r4, r7, #12
 8004042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004048:	f240 2301 	movw	r3, #513	; 0x201
 800404c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	2300      	movs	r3, #0
 8004054:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004056:	2300      	movs	r3, #0
 8004058:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
 800405e:	2300      	movs	r3, #0
 8004060:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3b01      	subs	r3, #1
 8004066:	2b0f      	cmp	r3, #15
 8004068:	f200 80b4 	bhi.w	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a0>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004153 	.word	0x08004153
 8004078:	080041b9 	.word	0x080041b9
 800407c:	080041d5 	.word	0x080041d5
 8004080:	08004143 	.word	0x08004143
 8004084:	080041d5 	.word	0x080041d5
 8004088:	080041d5 	.word	0x080041d5
 800408c:	080041d5 	.word	0x080041d5
 8004090:	0800414b 	.word	0x0800414b
 8004094:	080041d5 	.word	0x080041d5
 8004098:	080041d5 	.word	0x080041d5
 800409c:	080041d5 	.word	0x080041d5
 80040a0:	080041d5 	.word	0x080041d5
 80040a4:	080041d5 	.word	0x080041d5
 80040a8:	080041d5 	.word	0x080041d5
 80040ac:	080041d5 	.word	0x080041d5
 80040b0:	080040b5 	.word	0x080040b5
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 80040b4:	4b4d      	ldr	r3, [pc, #308]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80040ba:	4b4c      	ldr	r3, [pc, #304]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f000 8088 	beq.w	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	0c9b      	lsrs	r3, r3, #18
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	3330      	adds	r3, #48	; 0x30
 80040d2:	443b      	add	r3, r7
 80040d4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040d8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040e4:	4b41      	ldr	r3, [pc, #260]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	0c5b      	lsrs	r3, r3, #17
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	3330      	adds	r3, #48	; 0x30
 80040f0:	443b      	add	r3, r7
 80040f2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00d      	beq.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004102:	4a3b      	ldr	r2, [pc, #236]	; (80041f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	fbb2 f2f3 	udiv	r2, r2, r3
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	fb02 f303 	mul.w	r3, r2, r3
 8004110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004112:	e004      	b.n	800411e <HAL_RCCEx_GetPeriphCLKFreq+0xea>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004114:	6a3b      	ldr	r3, [r7, #32]
 8004116:	4a37      	ldr	r2, [pc, #220]	; (80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8004118:	fb02 f303 	mul.w	r3, r2, r3
 800411c:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800411e:	4b33      	ldr	r3, [pc, #204]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800412a:	d102      	bne.n	8004132 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8004130:	e052      	b.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
          frequency = (pllclk * 2) / 3;
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4a30      	ldr	r2, [pc, #192]	; (80041f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8004140:	e04a      	b.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 8004142:	f7ff fe13 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 8004146:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004148:	e049      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 800414a:	f7ff fe0f 	bl	8003d6c <HAL_RCC_GetSysClockFreq>
 800414e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8004150:	e045      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 8004152:	4b26      	ldr	r3, [pc, #152]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004162:	d108      	bne.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      {
        frequency = LSE_VALUE;
 800416e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
 8004174:	e01f      	b.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004180:	d109      	bne.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
 8004182:	4b1a      	ldr	r3, [pc, #104]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      {
        frequency = LSI_VALUE;
 800418e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
 8004194:	e00f      	b.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a0:	d11c      	bne.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        frequency = HSE_VALUE / 128U;
 80041ae:	f24f 4324 	movw	r3, #62500	; 0xf424
 80041b2:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 80041b4:	e012      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80041b6:	e011      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80041b8:	f7ff fe54 	bl	8003e64 <HAL_RCC_GetPCLK2Freq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	0b9b      	lsrs	r3, r3, #14
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	3301      	adds	r3, #1
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80041d2:	e004      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
    }
    default:
    {
      break;
 80041d4:	bf00      	nop
 80041d6:	e002      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80041d8:	bf00      	nop
 80041da:	e000      	b.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
      break;
 80041dc:	bf00      	nop
    }
  }
  return (frequency);
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3734      	adds	r7, #52	; 0x34
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd90      	pop	{r4, r7, pc}
 80041e8:	0800529c 	.word	0x0800529c
 80041ec:	40021000 	.word	0x40021000
 80041f0:	007a1200 	.word	0x007a1200
 80041f4:	003d0900 	.word	0x003d0900
 80041f8:	aaaaaaab 	.word	0xaaaaaaab

080041fc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <HAL_SRAM_Init+0x1c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004216:	d101      	bne.n	800421c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e038      	b.n	800428e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b00      	cmp	r3, #0
 8004226:	d106      	bne.n	8004236 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f7fc fd99 	bl	8000d68 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	3308      	adds	r3, #8
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f000 f829 	bl	8004298 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	461a      	mov	r2, r3
 8004250:	68b9      	ldr	r1, [r7, #8]
 8004252:	f000 f88b 	bl	800436c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6858      	ldr	r0, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689a      	ldr	r2, [r3, #8]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	f000 f8b6 	bl	80043d4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	6892      	ldr	r2, [r2, #8]
 8004270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	6892      	ldr	r2, [r2, #8]
 800427c:	f041 0101 	orr.w	r1, r1, #1
 8004280:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
	...

08004298 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8004298:	b480      	push	{r7}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	6812      	ldr	r2, [r2, #0]
 80042b0:	f023 0101 	bic.w	r1, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d102      	bne.n	80042c8 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80042c2:	2340      	movs	r3, #64	; 0x40
 80042c4:	617b      	str	r3, [r7, #20]
 80042c6:	e001      	b.n	80042cc <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80042d8:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80042de:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80042e4:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80042ea:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80042f0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80042f6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80042fc:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 8004302:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8004308:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800430e:	4313      	orrs	r3, r2
 8004310:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	4313      	orrs	r3, r2
 800431a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4313      	orrs	r3, r2
 8004324:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <FSMC_NORSRAM_Init+0xd0>)
 8004328:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004330:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004338:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	43db      	mvns	r3, r3
 8004348:	ea02 0103 	and.w	r1, r2, r3
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4319      	orrs	r1, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	bc80      	pop	{r7}
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	0008fb7f 	.word	0x0008fb7f

0800436c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004382:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	011b      	lsls	r3, r3, #4
 8004390:	431a      	orrs	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	431a      	orrs	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	041b      	lsls	r3, r3, #16
 80043a0:	431a      	orrs	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	051b      	lsls	r3, r3, #20
 80043aa:	431a      	orrs	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	3b02      	subs	r3, #2
 80043b2:	061b      	lsls	r3, r3, #24
 80043b4:	431a      	orrs	r2, r3
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	3201      	adds	r2, #1
 80043c0:	4319      	orrs	r1, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e8:	d11d      	bne.n	8004426 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043f2:	4b13      	ldr	r3, [pc, #76]	; (8004440 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	6811      	ldr	r1, [r2, #0]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	6852      	ldr	r2, [r2, #4]
 80043fe:	0112      	lsls	r2, r2, #4
 8004400:	4311      	orrs	r1, r2
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	6892      	ldr	r2, [r2, #8]
 8004406:	0212      	lsls	r2, r2, #8
 8004408:	4311      	orrs	r1, r2
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	6992      	ldr	r2, [r2, #24]
 800440e:	4311      	orrs	r1, r2
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	68d2      	ldr	r2, [r2, #12]
 8004414:	0412      	lsls	r2, r2, #16
 8004416:	430a      	orrs	r2, r1
 8004418:	ea43 0102 	orr.w	r1, r3, r2
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8004424:	e005      	b.n	8004432 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800442e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	cff00000 	.word	0xcff00000

08004444 <__errno>:
 8004444:	4b01      	ldr	r3, [pc, #4]	; (800444c <__errno+0x8>)
 8004446:	6818      	ldr	r0, [r3, #0]
 8004448:	4770      	bx	lr
 800444a:	bf00      	nop
 800444c:	2000000c 	.word	0x2000000c

08004450 <__libc_init_array>:
 8004450:	b570      	push	{r4, r5, r6, lr}
 8004452:	2600      	movs	r6, #0
 8004454:	4d0c      	ldr	r5, [pc, #48]	; (8004488 <__libc_init_array+0x38>)
 8004456:	4c0d      	ldr	r4, [pc, #52]	; (800448c <__libc_init_array+0x3c>)
 8004458:	1b64      	subs	r4, r4, r5
 800445a:	10a4      	asrs	r4, r4, #2
 800445c:	42a6      	cmp	r6, r4
 800445e:	d109      	bne.n	8004474 <__libc_init_array+0x24>
 8004460:	f000 ff00 	bl	8005264 <_init>
 8004464:	2600      	movs	r6, #0
 8004466:	4d0a      	ldr	r5, [pc, #40]	; (8004490 <__libc_init_array+0x40>)
 8004468:	4c0a      	ldr	r4, [pc, #40]	; (8004494 <__libc_init_array+0x44>)
 800446a:	1b64      	subs	r4, r4, r5
 800446c:	10a4      	asrs	r4, r4, #2
 800446e:	42a6      	cmp	r6, r4
 8004470:	d105      	bne.n	800447e <__libc_init_array+0x2e>
 8004472:	bd70      	pop	{r4, r5, r6, pc}
 8004474:	f855 3b04 	ldr.w	r3, [r5], #4
 8004478:	4798      	blx	r3
 800447a:	3601      	adds	r6, #1
 800447c:	e7ee      	b.n	800445c <__libc_init_array+0xc>
 800447e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004482:	4798      	blx	r3
 8004484:	3601      	adds	r6, #1
 8004486:	e7f2      	b.n	800446e <__libc_init_array+0x1e>
 8004488:	08005958 	.word	0x08005958
 800448c:	08005958 	.word	0x08005958
 8004490:	08005958 	.word	0x08005958
 8004494:	0800595c 	.word	0x0800595c

08004498 <memset>:
 8004498:	4603      	mov	r3, r0
 800449a:	4402      	add	r2, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <siprintf>:
 80044a8:	b40e      	push	{r1, r2, r3}
 80044aa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80044ae:	b500      	push	{lr}
 80044b0:	b09c      	sub	sp, #112	; 0x70
 80044b2:	ab1d      	add	r3, sp, #116	; 0x74
 80044b4:	9002      	str	r0, [sp, #8]
 80044b6:	9006      	str	r0, [sp, #24]
 80044b8:	9107      	str	r1, [sp, #28]
 80044ba:	9104      	str	r1, [sp, #16]
 80044bc:	4808      	ldr	r0, [pc, #32]	; (80044e0 <siprintf+0x38>)
 80044be:	4909      	ldr	r1, [pc, #36]	; (80044e4 <siprintf+0x3c>)
 80044c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80044c4:	9105      	str	r1, [sp, #20]
 80044c6:	6800      	ldr	r0, [r0, #0]
 80044c8:	a902      	add	r1, sp, #8
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	f000 f868 	bl	80045a0 <_svfiprintf_r>
 80044d0:	2200      	movs	r2, #0
 80044d2:	9b02      	ldr	r3, [sp, #8]
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	b01c      	add	sp, #112	; 0x70
 80044d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044dc:	b003      	add	sp, #12
 80044de:	4770      	bx	lr
 80044e0:	2000000c 	.word	0x2000000c
 80044e4:	ffff0208 	.word	0xffff0208

080044e8 <__ssputs_r>:
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	688e      	ldr	r6, [r1, #8]
 80044ee:	4682      	mov	sl, r0
 80044f0:	429e      	cmp	r6, r3
 80044f2:	460c      	mov	r4, r1
 80044f4:	4690      	mov	r8, r2
 80044f6:	461f      	mov	r7, r3
 80044f8:	d838      	bhi.n	800456c <__ssputs_r+0x84>
 80044fa:	898a      	ldrh	r2, [r1, #12]
 80044fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004500:	d032      	beq.n	8004568 <__ssputs_r+0x80>
 8004502:	6825      	ldr	r5, [r4, #0]
 8004504:	6909      	ldr	r1, [r1, #16]
 8004506:	3301      	adds	r3, #1
 8004508:	eba5 0901 	sub.w	r9, r5, r1
 800450c:	6965      	ldr	r5, [r4, #20]
 800450e:	444b      	add	r3, r9
 8004510:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004514:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004518:	106d      	asrs	r5, r5, #1
 800451a:	429d      	cmp	r5, r3
 800451c:	bf38      	it	cc
 800451e:	461d      	movcc	r5, r3
 8004520:	0553      	lsls	r3, r2, #21
 8004522:	d531      	bpl.n	8004588 <__ssputs_r+0xa0>
 8004524:	4629      	mov	r1, r5
 8004526:	f000 fb6f 	bl	8004c08 <_malloc_r>
 800452a:	4606      	mov	r6, r0
 800452c:	b950      	cbnz	r0, 8004544 <__ssputs_r+0x5c>
 800452e:	230c      	movs	r3, #12
 8004530:	f04f 30ff 	mov.w	r0, #4294967295
 8004534:	f8ca 3000 	str.w	r3, [sl]
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004544:	464a      	mov	r2, r9
 8004546:	6921      	ldr	r1, [r4, #16]
 8004548:	f000 face 	bl	8004ae8 <memcpy>
 800454c:	89a3      	ldrh	r3, [r4, #12]
 800454e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004556:	81a3      	strh	r3, [r4, #12]
 8004558:	6126      	str	r6, [r4, #16]
 800455a:	444e      	add	r6, r9
 800455c:	6026      	str	r6, [r4, #0]
 800455e:	463e      	mov	r6, r7
 8004560:	6165      	str	r5, [r4, #20]
 8004562:	eba5 0509 	sub.w	r5, r5, r9
 8004566:	60a5      	str	r5, [r4, #8]
 8004568:	42be      	cmp	r6, r7
 800456a:	d900      	bls.n	800456e <__ssputs_r+0x86>
 800456c:	463e      	mov	r6, r7
 800456e:	4632      	mov	r2, r6
 8004570:	4641      	mov	r1, r8
 8004572:	6820      	ldr	r0, [r4, #0]
 8004574:	f000 fac6 	bl	8004b04 <memmove>
 8004578:	68a3      	ldr	r3, [r4, #8]
 800457a:	2000      	movs	r0, #0
 800457c:	1b9b      	subs	r3, r3, r6
 800457e:	60a3      	str	r3, [r4, #8]
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	4433      	add	r3, r6
 8004584:	6023      	str	r3, [r4, #0]
 8004586:	e7db      	b.n	8004540 <__ssputs_r+0x58>
 8004588:	462a      	mov	r2, r5
 800458a:	f000 fbb1 	bl	8004cf0 <_realloc_r>
 800458e:	4606      	mov	r6, r0
 8004590:	2800      	cmp	r0, #0
 8004592:	d1e1      	bne.n	8004558 <__ssputs_r+0x70>
 8004594:	4650      	mov	r0, sl
 8004596:	6921      	ldr	r1, [r4, #16]
 8004598:	f000 face 	bl	8004b38 <_free_r>
 800459c:	e7c7      	b.n	800452e <__ssputs_r+0x46>
	...

080045a0 <_svfiprintf_r>:
 80045a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a4:	4698      	mov	r8, r3
 80045a6:	898b      	ldrh	r3, [r1, #12]
 80045a8:	4607      	mov	r7, r0
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	460d      	mov	r5, r1
 80045ae:	4614      	mov	r4, r2
 80045b0:	b09d      	sub	sp, #116	; 0x74
 80045b2:	d50e      	bpl.n	80045d2 <_svfiprintf_r+0x32>
 80045b4:	690b      	ldr	r3, [r1, #16]
 80045b6:	b963      	cbnz	r3, 80045d2 <_svfiprintf_r+0x32>
 80045b8:	2140      	movs	r1, #64	; 0x40
 80045ba:	f000 fb25 	bl	8004c08 <_malloc_r>
 80045be:	6028      	str	r0, [r5, #0]
 80045c0:	6128      	str	r0, [r5, #16]
 80045c2:	b920      	cbnz	r0, 80045ce <_svfiprintf_r+0x2e>
 80045c4:	230c      	movs	r3, #12
 80045c6:	603b      	str	r3, [r7, #0]
 80045c8:	f04f 30ff 	mov.w	r0, #4294967295
 80045cc:	e0d1      	b.n	8004772 <_svfiprintf_r+0x1d2>
 80045ce:	2340      	movs	r3, #64	; 0x40
 80045d0:	616b      	str	r3, [r5, #20]
 80045d2:	2300      	movs	r3, #0
 80045d4:	9309      	str	r3, [sp, #36]	; 0x24
 80045d6:	2320      	movs	r3, #32
 80045d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045dc:	2330      	movs	r3, #48	; 0x30
 80045de:	f04f 0901 	mov.w	r9, #1
 80045e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80045e6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800478c <_svfiprintf_r+0x1ec>
 80045ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045ee:	4623      	mov	r3, r4
 80045f0:	469a      	mov	sl, r3
 80045f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f6:	b10a      	cbz	r2, 80045fc <_svfiprintf_r+0x5c>
 80045f8:	2a25      	cmp	r2, #37	; 0x25
 80045fa:	d1f9      	bne.n	80045f0 <_svfiprintf_r+0x50>
 80045fc:	ebba 0b04 	subs.w	fp, sl, r4
 8004600:	d00b      	beq.n	800461a <_svfiprintf_r+0x7a>
 8004602:	465b      	mov	r3, fp
 8004604:	4622      	mov	r2, r4
 8004606:	4629      	mov	r1, r5
 8004608:	4638      	mov	r0, r7
 800460a:	f7ff ff6d 	bl	80044e8 <__ssputs_r>
 800460e:	3001      	adds	r0, #1
 8004610:	f000 80aa 	beq.w	8004768 <_svfiprintf_r+0x1c8>
 8004614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004616:	445a      	add	r2, fp
 8004618:	9209      	str	r2, [sp, #36]	; 0x24
 800461a:	f89a 3000 	ldrb.w	r3, [sl]
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 80a2 	beq.w	8004768 <_svfiprintf_r+0x1c8>
 8004624:	2300      	movs	r3, #0
 8004626:	f04f 32ff 	mov.w	r2, #4294967295
 800462a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800462e:	f10a 0a01 	add.w	sl, sl, #1
 8004632:	9304      	str	r3, [sp, #16]
 8004634:	9307      	str	r3, [sp, #28]
 8004636:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800463a:	931a      	str	r3, [sp, #104]	; 0x68
 800463c:	4654      	mov	r4, sl
 800463e:	2205      	movs	r2, #5
 8004640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004644:	4851      	ldr	r0, [pc, #324]	; (800478c <_svfiprintf_r+0x1ec>)
 8004646:	f000 fa41 	bl	8004acc <memchr>
 800464a:	9a04      	ldr	r2, [sp, #16]
 800464c:	b9d8      	cbnz	r0, 8004686 <_svfiprintf_r+0xe6>
 800464e:	06d0      	lsls	r0, r2, #27
 8004650:	bf44      	itt	mi
 8004652:	2320      	movmi	r3, #32
 8004654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004658:	0711      	lsls	r1, r2, #28
 800465a:	bf44      	itt	mi
 800465c:	232b      	movmi	r3, #43	; 0x2b
 800465e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004662:	f89a 3000 	ldrb.w	r3, [sl]
 8004666:	2b2a      	cmp	r3, #42	; 0x2a
 8004668:	d015      	beq.n	8004696 <_svfiprintf_r+0xf6>
 800466a:	4654      	mov	r4, sl
 800466c:	2000      	movs	r0, #0
 800466e:	f04f 0c0a 	mov.w	ip, #10
 8004672:	9a07      	ldr	r2, [sp, #28]
 8004674:	4621      	mov	r1, r4
 8004676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800467a:	3b30      	subs	r3, #48	; 0x30
 800467c:	2b09      	cmp	r3, #9
 800467e:	d94e      	bls.n	800471e <_svfiprintf_r+0x17e>
 8004680:	b1b0      	cbz	r0, 80046b0 <_svfiprintf_r+0x110>
 8004682:	9207      	str	r2, [sp, #28]
 8004684:	e014      	b.n	80046b0 <_svfiprintf_r+0x110>
 8004686:	eba0 0308 	sub.w	r3, r0, r8
 800468a:	fa09 f303 	lsl.w	r3, r9, r3
 800468e:	4313      	orrs	r3, r2
 8004690:	46a2      	mov	sl, r4
 8004692:	9304      	str	r3, [sp, #16]
 8004694:	e7d2      	b.n	800463c <_svfiprintf_r+0x9c>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	1d19      	adds	r1, r3, #4
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	9103      	str	r1, [sp, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	bfbb      	ittet	lt
 80046a2:	425b      	neglt	r3, r3
 80046a4:	f042 0202 	orrlt.w	r2, r2, #2
 80046a8:	9307      	strge	r3, [sp, #28]
 80046aa:	9307      	strlt	r3, [sp, #28]
 80046ac:	bfb8      	it	lt
 80046ae:	9204      	strlt	r2, [sp, #16]
 80046b0:	7823      	ldrb	r3, [r4, #0]
 80046b2:	2b2e      	cmp	r3, #46	; 0x2e
 80046b4:	d10c      	bne.n	80046d0 <_svfiprintf_r+0x130>
 80046b6:	7863      	ldrb	r3, [r4, #1]
 80046b8:	2b2a      	cmp	r3, #42	; 0x2a
 80046ba:	d135      	bne.n	8004728 <_svfiprintf_r+0x188>
 80046bc:	9b03      	ldr	r3, [sp, #12]
 80046be:	3402      	adds	r4, #2
 80046c0:	1d1a      	adds	r2, r3, #4
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	9203      	str	r2, [sp, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	bfb8      	it	lt
 80046ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80046ce:	9305      	str	r3, [sp, #20]
 80046d0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004790 <_svfiprintf_r+0x1f0>
 80046d4:	2203      	movs	r2, #3
 80046d6:	4650      	mov	r0, sl
 80046d8:	7821      	ldrb	r1, [r4, #0]
 80046da:	f000 f9f7 	bl	8004acc <memchr>
 80046de:	b140      	cbz	r0, 80046f2 <_svfiprintf_r+0x152>
 80046e0:	2340      	movs	r3, #64	; 0x40
 80046e2:	eba0 000a 	sub.w	r0, r0, sl
 80046e6:	fa03 f000 	lsl.w	r0, r3, r0
 80046ea:	9b04      	ldr	r3, [sp, #16]
 80046ec:	3401      	adds	r4, #1
 80046ee:	4303      	orrs	r3, r0
 80046f0:	9304      	str	r3, [sp, #16]
 80046f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f6:	2206      	movs	r2, #6
 80046f8:	4826      	ldr	r0, [pc, #152]	; (8004794 <_svfiprintf_r+0x1f4>)
 80046fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046fe:	f000 f9e5 	bl	8004acc <memchr>
 8004702:	2800      	cmp	r0, #0
 8004704:	d038      	beq.n	8004778 <_svfiprintf_r+0x1d8>
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <_svfiprintf_r+0x1f8>)
 8004708:	bb1b      	cbnz	r3, 8004752 <_svfiprintf_r+0x1b2>
 800470a:	9b03      	ldr	r3, [sp, #12]
 800470c:	3307      	adds	r3, #7
 800470e:	f023 0307 	bic.w	r3, r3, #7
 8004712:	3308      	adds	r3, #8
 8004714:	9303      	str	r3, [sp, #12]
 8004716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004718:	4433      	add	r3, r6
 800471a:	9309      	str	r3, [sp, #36]	; 0x24
 800471c:	e767      	b.n	80045ee <_svfiprintf_r+0x4e>
 800471e:	460c      	mov	r4, r1
 8004720:	2001      	movs	r0, #1
 8004722:	fb0c 3202 	mla	r2, ip, r2, r3
 8004726:	e7a5      	b.n	8004674 <_svfiprintf_r+0xd4>
 8004728:	2300      	movs	r3, #0
 800472a:	f04f 0c0a 	mov.w	ip, #10
 800472e:	4619      	mov	r1, r3
 8004730:	3401      	adds	r4, #1
 8004732:	9305      	str	r3, [sp, #20]
 8004734:	4620      	mov	r0, r4
 8004736:	f810 2b01 	ldrb.w	r2, [r0], #1
 800473a:	3a30      	subs	r2, #48	; 0x30
 800473c:	2a09      	cmp	r2, #9
 800473e:	d903      	bls.n	8004748 <_svfiprintf_r+0x1a8>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0c5      	beq.n	80046d0 <_svfiprintf_r+0x130>
 8004744:	9105      	str	r1, [sp, #20]
 8004746:	e7c3      	b.n	80046d0 <_svfiprintf_r+0x130>
 8004748:	4604      	mov	r4, r0
 800474a:	2301      	movs	r3, #1
 800474c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004750:	e7f0      	b.n	8004734 <_svfiprintf_r+0x194>
 8004752:	ab03      	add	r3, sp, #12
 8004754:	9300      	str	r3, [sp, #0]
 8004756:	462a      	mov	r2, r5
 8004758:	4638      	mov	r0, r7
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <_svfiprintf_r+0x1fc>)
 800475c:	a904      	add	r1, sp, #16
 800475e:	f3af 8000 	nop.w
 8004762:	1c42      	adds	r2, r0, #1
 8004764:	4606      	mov	r6, r0
 8004766:	d1d6      	bne.n	8004716 <_svfiprintf_r+0x176>
 8004768:	89ab      	ldrh	r3, [r5, #12]
 800476a:	065b      	lsls	r3, r3, #25
 800476c:	f53f af2c 	bmi.w	80045c8 <_svfiprintf_r+0x28>
 8004770:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004772:	b01d      	add	sp, #116	; 0x74
 8004774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004778:	ab03      	add	r3, sp, #12
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	462a      	mov	r2, r5
 800477e:	4638      	mov	r0, r7
 8004780:	4b06      	ldr	r3, [pc, #24]	; (800479c <_svfiprintf_r+0x1fc>)
 8004782:	a904      	add	r1, sp, #16
 8004784:	f000 f87c 	bl	8004880 <_printf_i>
 8004788:	e7eb      	b.n	8004762 <_svfiprintf_r+0x1c2>
 800478a:	bf00      	nop
 800478c:	080058b4 	.word	0x080058b4
 8004790:	080058ba 	.word	0x080058ba
 8004794:	080058be 	.word	0x080058be
 8004798:	00000000 	.word	0x00000000
 800479c:	080044e9 	.word	0x080044e9

080047a0 <_printf_common>:
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	4616      	mov	r6, r2
 80047a6:	4699      	mov	r9, r3
 80047a8:	688a      	ldr	r2, [r1, #8]
 80047aa:	690b      	ldr	r3, [r1, #16]
 80047ac:	4607      	mov	r7, r0
 80047ae:	4293      	cmp	r3, r2
 80047b0:	bfb8      	it	lt
 80047b2:	4613      	movlt	r3, r2
 80047b4:	6033      	str	r3, [r6, #0]
 80047b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047ba:	460c      	mov	r4, r1
 80047bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047c0:	b10a      	cbz	r2, 80047c6 <_printf_common+0x26>
 80047c2:	3301      	adds	r3, #1
 80047c4:	6033      	str	r3, [r6, #0]
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	0699      	lsls	r1, r3, #26
 80047ca:	bf42      	ittt	mi
 80047cc:	6833      	ldrmi	r3, [r6, #0]
 80047ce:	3302      	addmi	r3, #2
 80047d0:	6033      	strmi	r3, [r6, #0]
 80047d2:	6825      	ldr	r5, [r4, #0]
 80047d4:	f015 0506 	ands.w	r5, r5, #6
 80047d8:	d106      	bne.n	80047e8 <_printf_common+0x48>
 80047da:	f104 0a19 	add.w	sl, r4, #25
 80047de:	68e3      	ldr	r3, [r4, #12]
 80047e0:	6832      	ldr	r2, [r6, #0]
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	42ab      	cmp	r3, r5
 80047e6:	dc28      	bgt.n	800483a <_printf_common+0x9a>
 80047e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047ec:	1e13      	subs	r3, r2, #0
 80047ee:	6822      	ldr	r2, [r4, #0]
 80047f0:	bf18      	it	ne
 80047f2:	2301      	movne	r3, #1
 80047f4:	0692      	lsls	r2, r2, #26
 80047f6:	d42d      	bmi.n	8004854 <_printf_common+0xb4>
 80047f8:	4649      	mov	r1, r9
 80047fa:	4638      	mov	r0, r7
 80047fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004800:	47c0      	blx	r8
 8004802:	3001      	adds	r0, #1
 8004804:	d020      	beq.n	8004848 <_printf_common+0xa8>
 8004806:	6823      	ldr	r3, [r4, #0]
 8004808:	68e5      	ldr	r5, [r4, #12]
 800480a:	f003 0306 	and.w	r3, r3, #6
 800480e:	2b04      	cmp	r3, #4
 8004810:	bf18      	it	ne
 8004812:	2500      	movne	r5, #0
 8004814:	6832      	ldr	r2, [r6, #0]
 8004816:	f04f 0600 	mov.w	r6, #0
 800481a:	68a3      	ldr	r3, [r4, #8]
 800481c:	bf08      	it	eq
 800481e:	1aad      	subeq	r5, r5, r2
 8004820:	6922      	ldr	r2, [r4, #16]
 8004822:	bf08      	it	eq
 8004824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004828:	4293      	cmp	r3, r2
 800482a:	bfc4      	itt	gt
 800482c:	1a9b      	subgt	r3, r3, r2
 800482e:	18ed      	addgt	r5, r5, r3
 8004830:	341a      	adds	r4, #26
 8004832:	42b5      	cmp	r5, r6
 8004834:	d11a      	bne.n	800486c <_printf_common+0xcc>
 8004836:	2000      	movs	r0, #0
 8004838:	e008      	b.n	800484c <_printf_common+0xac>
 800483a:	2301      	movs	r3, #1
 800483c:	4652      	mov	r2, sl
 800483e:	4649      	mov	r1, r9
 8004840:	4638      	mov	r0, r7
 8004842:	47c0      	blx	r8
 8004844:	3001      	adds	r0, #1
 8004846:	d103      	bne.n	8004850 <_printf_common+0xb0>
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004850:	3501      	adds	r5, #1
 8004852:	e7c4      	b.n	80047de <_printf_common+0x3e>
 8004854:	2030      	movs	r0, #48	; 0x30
 8004856:	18e1      	adds	r1, r4, r3
 8004858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004862:	4422      	add	r2, r4
 8004864:	3302      	adds	r3, #2
 8004866:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800486a:	e7c5      	b.n	80047f8 <_printf_common+0x58>
 800486c:	2301      	movs	r3, #1
 800486e:	4622      	mov	r2, r4
 8004870:	4649      	mov	r1, r9
 8004872:	4638      	mov	r0, r7
 8004874:	47c0      	blx	r8
 8004876:	3001      	adds	r0, #1
 8004878:	d0e6      	beq.n	8004848 <_printf_common+0xa8>
 800487a:	3601      	adds	r6, #1
 800487c:	e7d9      	b.n	8004832 <_printf_common+0x92>
	...

08004880 <_printf_i>:
 8004880:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004884:	7e0f      	ldrb	r7, [r1, #24]
 8004886:	4691      	mov	r9, r2
 8004888:	2f78      	cmp	r7, #120	; 0x78
 800488a:	4680      	mov	r8, r0
 800488c:	460c      	mov	r4, r1
 800488e:	469a      	mov	sl, r3
 8004890:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004892:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004896:	d807      	bhi.n	80048a8 <_printf_i+0x28>
 8004898:	2f62      	cmp	r7, #98	; 0x62
 800489a:	d80a      	bhi.n	80048b2 <_printf_i+0x32>
 800489c:	2f00      	cmp	r7, #0
 800489e:	f000 80d9 	beq.w	8004a54 <_printf_i+0x1d4>
 80048a2:	2f58      	cmp	r7, #88	; 0x58
 80048a4:	f000 80a4 	beq.w	80049f0 <_printf_i+0x170>
 80048a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048b0:	e03a      	b.n	8004928 <_printf_i+0xa8>
 80048b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048b6:	2b15      	cmp	r3, #21
 80048b8:	d8f6      	bhi.n	80048a8 <_printf_i+0x28>
 80048ba:	a101      	add	r1, pc, #4	; (adr r1, 80048c0 <_printf_i+0x40>)
 80048bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048c0:	08004919 	.word	0x08004919
 80048c4:	0800492d 	.word	0x0800492d
 80048c8:	080048a9 	.word	0x080048a9
 80048cc:	080048a9 	.word	0x080048a9
 80048d0:	080048a9 	.word	0x080048a9
 80048d4:	080048a9 	.word	0x080048a9
 80048d8:	0800492d 	.word	0x0800492d
 80048dc:	080048a9 	.word	0x080048a9
 80048e0:	080048a9 	.word	0x080048a9
 80048e4:	080048a9 	.word	0x080048a9
 80048e8:	080048a9 	.word	0x080048a9
 80048ec:	08004a3b 	.word	0x08004a3b
 80048f0:	0800495d 	.word	0x0800495d
 80048f4:	08004a1d 	.word	0x08004a1d
 80048f8:	080048a9 	.word	0x080048a9
 80048fc:	080048a9 	.word	0x080048a9
 8004900:	08004a5d 	.word	0x08004a5d
 8004904:	080048a9 	.word	0x080048a9
 8004908:	0800495d 	.word	0x0800495d
 800490c:	080048a9 	.word	0x080048a9
 8004910:	080048a9 	.word	0x080048a9
 8004914:	08004a25 	.word	0x08004a25
 8004918:	682b      	ldr	r3, [r5, #0]
 800491a:	1d1a      	adds	r2, r3, #4
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	602a      	str	r2, [r5, #0]
 8004920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004928:	2301      	movs	r3, #1
 800492a:	e0a4      	b.n	8004a76 <_printf_i+0x1f6>
 800492c:	6820      	ldr	r0, [r4, #0]
 800492e:	6829      	ldr	r1, [r5, #0]
 8004930:	0606      	lsls	r6, r0, #24
 8004932:	f101 0304 	add.w	r3, r1, #4
 8004936:	d50a      	bpl.n	800494e <_printf_i+0xce>
 8004938:	680e      	ldr	r6, [r1, #0]
 800493a:	602b      	str	r3, [r5, #0]
 800493c:	2e00      	cmp	r6, #0
 800493e:	da03      	bge.n	8004948 <_printf_i+0xc8>
 8004940:	232d      	movs	r3, #45	; 0x2d
 8004942:	4276      	negs	r6, r6
 8004944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004948:	230a      	movs	r3, #10
 800494a:	485e      	ldr	r0, [pc, #376]	; (8004ac4 <_printf_i+0x244>)
 800494c:	e019      	b.n	8004982 <_printf_i+0x102>
 800494e:	680e      	ldr	r6, [r1, #0]
 8004950:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004954:	602b      	str	r3, [r5, #0]
 8004956:	bf18      	it	ne
 8004958:	b236      	sxthne	r6, r6
 800495a:	e7ef      	b.n	800493c <_printf_i+0xbc>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	6820      	ldr	r0, [r4, #0]
 8004960:	1d19      	adds	r1, r3, #4
 8004962:	6029      	str	r1, [r5, #0]
 8004964:	0601      	lsls	r1, r0, #24
 8004966:	d501      	bpl.n	800496c <_printf_i+0xec>
 8004968:	681e      	ldr	r6, [r3, #0]
 800496a:	e002      	b.n	8004972 <_printf_i+0xf2>
 800496c:	0646      	lsls	r6, r0, #25
 800496e:	d5fb      	bpl.n	8004968 <_printf_i+0xe8>
 8004970:	881e      	ldrh	r6, [r3, #0]
 8004972:	2f6f      	cmp	r7, #111	; 0x6f
 8004974:	bf0c      	ite	eq
 8004976:	2308      	moveq	r3, #8
 8004978:	230a      	movne	r3, #10
 800497a:	4852      	ldr	r0, [pc, #328]	; (8004ac4 <_printf_i+0x244>)
 800497c:	2100      	movs	r1, #0
 800497e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004982:	6865      	ldr	r5, [r4, #4]
 8004984:	2d00      	cmp	r5, #0
 8004986:	bfa8      	it	ge
 8004988:	6821      	ldrge	r1, [r4, #0]
 800498a:	60a5      	str	r5, [r4, #8]
 800498c:	bfa4      	itt	ge
 800498e:	f021 0104 	bicge.w	r1, r1, #4
 8004992:	6021      	strge	r1, [r4, #0]
 8004994:	b90e      	cbnz	r6, 800499a <_printf_i+0x11a>
 8004996:	2d00      	cmp	r5, #0
 8004998:	d04d      	beq.n	8004a36 <_printf_i+0x1b6>
 800499a:	4615      	mov	r5, r2
 800499c:	fbb6 f1f3 	udiv	r1, r6, r3
 80049a0:	fb03 6711 	mls	r7, r3, r1, r6
 80049a4:	5dc7      	ldrb	r7, [r0, r7]
 80049a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80049aa:	4637      	mov	r7, r6
 80049ac:	42bb      	cmp	r3, r7
 80049ae:	460e      	mov	r6, r1
 80049b0:	d9f4      	bls.n	800499c <_printf_i+0x11c>
 80049b2:	2b08      	cmp	r3, #8
 80049b4:	d10b      	bne.n	80049ce <_printf_i+0x14e>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	07de      	lsls	r6, r3, #31
 80049ba:	d508      	bpl.n	80049ce <_printf_i+0x14e>
 80049bc:	6923      	ldr	r3, [r4, #16]
 80049be:	6861      	ldr	r1, [r4, #4]
 80049c0:	4299      	cmp	r1, r3
 80049c2:	bfde      	ittt	le
 80049c4:	2330      	movle	r3, #48	; 0x30
 80049c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80049ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 80049ce:	1b52      	subs	r2, r2, r5
 80049d0:	6122      	str	r2, [r4, #16]
 80049d2:	464b      	mov	r3, r9
 80049d4:	4621      	mov	r1, r4
 80049d6:	4640      	mov	r0, r8
 80049d8:	f8cd a000 	str.w	sl, [sp]
 80049dc:	aa03      	add	r2, sp, #12
 80049de:	f7ff fedf 	bl	80047a0 <_printf_common>
 80049e2:	3001      	adds	r0, #1
 80049e4:	d14c      	bne.n	8004a80 <_printf_i+0x200>
 80049e6:	f04f 30ff 	mov.w	r0, #4294967295
 80049ea:	b004      	add	sp, #16
 80049ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f0:	4834      	ldr	r0, [pc, #208]	; (8004ac4 <_printf_i+0x244>)
 80049f2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80049f6:	6829      	ldr	r1, [r5, #0]
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	f851 6b04 	ldr.w	r6, [r1], #4
 80049fe:	6029      	str	r1, [r5, #0]
 8004a00:	061d      	lsls	r5, r3, #24
 8004a02:	d514      	bpl.n	8004a2e <_printf_i+0x1ae>
 8004a04:	07df      	lsls	r7, r3, #31
 8004a06:	bf44      	itt	mi
 8004a08:	f043 0320 	orrmi.w	r3, r3, #32
 8004a0c:	6023      	strmi	r3, [r4, #0]
 8004a0e:	b91e      	cbnz	r6, 8004a18 <_printf_i+0x198>
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	f023 0320 	bic.w	r3, r3, #32
 8004a16:	6023      	str	r3, [r4, #0]
 8004a18:	2310      	movs	r3, #16
 8004a1a:	e7af      	b.n	800497c <_printf_i+0xfc>
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	f043 0320 	orr.w	r3, r3, #32
 8004a22:	6023      	str	r3, [r4, #0]
 8004a24:	2378      	movs	r3, #120	; 0x78
 8004a26:	4828      	ldr	r0, [pc, #160]	; (8004ac8 <_printf_i+0x248>)
 8004a28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a2c:	e7e3      	b.n	80049f6 <_printf_i+0x176>
 8004a2e:	0659      	lsls	r1, r3, #25
 8004a30:	bf48      	it	mi
 8004a32:	b2b6      	uxthmi	r6, r6
 8004a34:	e7e6      	b.n	8004a04 <_printf_i+0x184>
 8004a36:	4615      	mov	r5, r2
 8004a38:	e7bb      	b.n	80049b2 <_printf_i+0x132>
 8004a3a:	682b      	ldr	r3, [r5, #0]
 8004a3c:	6826      	ldr	r6, [r4, #0]
 8004a3e:	1d18      	adds	r0, r3, #4
 8004a40:	6961      	ldr	r1, [r4, #20]
 8004a42:	6028      	str	r0, [r5, #0]
 8004a44:	0635      	lsls	r5, r6, #24
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	d501      	bpl.n	8004a4e <_printf_i+0x1ce>
 8004a4a:	6019      	str	r1, [r3, #0]
 8004a4c:	e002      	b.n	8004a54 <_printf_i+0x1d4>
 8004a4e:	0670      	lsls	r0, r6, #25
 8004a50:	d5fb      	bpl.n	8004a4a <_printf_i+0x1ca>
 8004a52:	8019      	strh	r1, [r3, #0]
 8004a54:	2300      	movs	r3, #0
 8004a56:	4615      	mov	r5, r2
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	e7ba      	b.n	80049d2 <_printf_i+0x152>
 8004a5c:	682b      	ldr	r3, [r5, #0]
 8004a5e:	2100      	movs	r1, #0
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	602a      	str	r2, [r5, #0]
 8004a64:	681d      	ldr	r5, [r3, #0]
 8004a66:	6862      	ldr	r2, [r4, #4]
 8004a68:	4628      	mov	r0, r5
 8004a6a:	f000 f82f 	bl	8004acc <memchr>
 8004a6e:	b108      	cbz	r0, 8004a74 <_printf_i+0x1f4>
 8004a70:	1b40      	subs	r0, r0, r5
 8004a72:	6060      	str	r0, [r4, #4]
 8004a74:	6863      	ldr	r3, [r4, #4]
 8004a76:	6123      	str	r3, [r4, #16]
 8004a78:	2300      	movs	r3, #0
 8004a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a7e:	e7a8      	b.n	80049d2 <_printf_i+0x152>
 8004a80:	462a      	mov	r2, r5
 8004a82:	4649      	mov	r1, r9
 8004a84:	4640      	mov	r0, r8
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	47d0      	blx	sl
 8004a8a:	3001      	adds	r0, #1
 8004a8c:	d0ab      	beq.n	80049e6 <_printf_i+0x166>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	079b      	lsls	r3, r3, #30
 8004a92:	d413      	bmi.n	8004abc <_printf_i+0x23c>
 8004a94:	68e0      	ldr	r0, [r4, #12]
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	4298      	cmp	r0, r3
 8004a9a:	bfb8      	it	lt
 8004a9c:	4618      	movlt	r0, r3
 8004a9e:	e7a4      	b.n	80049ea <_printf_i+0x16a>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	4632      	mov	r2, r6
 8004aa4:	4649      	mov	r1, r9
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	47d0      	blx	sl
 8004aaa:	3001      	adds	r0, #1
 8004aac:	d09b      	beq.n	80049e6 <_printf_i+0x166>
 8004aae:	3501      	adds	r5, #1
 8004ab0:	68e3      	ldr	r3, [r4, #12]
 8004ab2:	9903      	ldr	r1, [sp, #12]
 8004ab4:	1a5b      	subs	r3, r3, r1
 8004ab6:	42ab      	cmp	r3, r5
 8004ab8:	dcf2      	bgt.n	8004aa0 <_printf_i+0x220>
 8004aba:	e7eb      	b.n	8004a94 <_printf_i+0x214>
 8004abc:	2500      	movs	r5, #0
 8004abe:	f104 0619 	add.w	r6, r4, #25
 8004ac2:	e7f5      	b.n	8004ab0 <_printf_i+0x230>
 8004ac4:	080058c5 	.word	0x080058c5
 8004ac8:	080058d6 	.word	0x080058d6

08004acc <memchr>:
 8004acc:	4603      	mov	r3, r0
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	b2c9      	uxtb	r1, r1
 8004ad2:	4402      	add	r2, r0
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	d101      	bne.n	8004ade <memchr+0x12>
 8004ada:	2000      	movs	r0, #0
 8004adc:	e003      	b.n	8004ae6 <memchr+0x1a>
 8004ade:	7804      	ldrb	r4, [r0, #0]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	428c      	cmp	r4, r1
 8004ae4:	d1f6      	bne.n	8004ad4 <memchr+0x8>
 8004ae6:	bd10      	pop	{r4, pc}

08004ae8 <memcpy>:
 8004ae8:	440a      	add	r2, r1
 8004aea:	4291      	cmp	r1, r2
 8004aec:	f100 33ff 	add.w	r3, r0, #4294967295
 8004af0:	d100      	bne.n	8004af4 <memcpy+0xc>
 8004af2:	4770      	bx	lr
 8004af4:	b510      	push	{r4, lr}
 8004af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004afa:	4291      	cmp	r1, r2
 8004afc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b00:	d1f9      	bne.n	8004af6 <memcpy+0xe>
 8004b02:	bd10      	pop	{r4, pc}

08004b04 <memmove>:
 8004b04:	4288      	cmp	r0, r1
 8004b06:	b510      	push	{r4, lr}
 8004b08:	eb01 0402 	add.w	r4, r1, r2
 8004b0c:	d902      	bls.n	8004b14 <memmove+0x10>
 8004b0e:	4284      	cmp	r4, r0
 8004b10:	4623      	mov	r3, r4
 8004b12:	d807      	bhi.n	8004b24 <memmove+0x20>
 8004b14:	1e43      	subs	r3, r0, #1
 8004b16:	42a1      	cmp	r1, r4
 8004b18:	d008      	beq.n	8004b2c <memmove+0x28>
 8004b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b22:	e7f8      	b.n	8004b16 <memmove+0x12>
 8004b24:	4601      	mov	r1, r0
 8004b26:	4402      	add	r2, r0
 8004b28:	428a      	cmp	r2, r1
 8004b2a:	d100      	bne.n	8004b2e <memmove+0x2a>
 8004b2c:	bd10      	pop	{r4, pc}
 8004b2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b36:	e7f7      	b.n	8004b28 <memmove+0x24>

08004b38 <_free_r>:
 8004b38:	b538      	push	{r3, r4, r5, lr}
 8004b3a:	4605      	mov	r5, r0
 8004b3c:	2900      	cmp	r1, #0
 8004b3e:	d040      	beq.n	8004bc2 <_free_r+0x8a>
 8004b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b44:	1f0c      	subs	r4, r1, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	bfb8      	it	lt
 8004b4a:	18e4      	addlt	r4, r4, r3
 8004b4c:	f000 f910 	bl	8004d70 <__malloc_lock>
 8004b50:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <_free_r+0x8c>)
 8004b52:	6813      	ldr	r3, [r2, #0]
 8004b54:	b933      	cbnz	r3, 8004b64 <_free_r+0x2c>
 8004b56:	6063      	str	r3, [r4, #4]
 8004b58:	6014      	str	r4, [r2, #0]
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b60:	f000 b90c 	b.w	8004d7c <__malloc_unlock>
 8004b64:	42a3      	cmp	r3, r4
 8004b66:	d908      	bls.n	8004b7a <_free_r+0x42>
 8004b68:	6820      	ldr	r0, [r4, #0]
 8004b6a:	1821      	adds	r1, r4, r0
 8004b6c:	428b      	cmp	r3, r1
 8004b6e:	bf01      	itttt	eq
 8004b70:	6819      	ldreq	r1, [r3, #0]
 8004b72:	685b      	ldreq	r3, [r3, #4]
 8004b74:	1809      	addeq	r1, r1, r0
 8004b76:	6021      	streq	r1, [r4, #0]
 8004b78:	e7ed      	b.n	8004b56 <_free_r+0x1e>
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	b10b      	cbz	r3, 8004b84 <_free_r+0x4c>
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d9fa      	bls.n	8004b7a <_free_r+0x42>
 8004b84:	6811      	ldr	r1, [r2, #0]
 8004b86:	1850      	adds	r0, r2, r1
 8004b88:	42a0      	cmp	r0, r4
 8004b8a:	d10b      	bne.n	8004ba4 <_free_r+0x6c>
 8004b8c:	6820      	ldr	r0, [r4, #0]
 8004b8e:	4401      	add	r1, r0
 8004b90:	1850      	adds	r0, r2, r1
 8004b92:	4283      	cmp	r3, r0
 8004b94:	6011      	str	r1, [r2, #0]
 8004b96:	d1e0      	bne.n	8004b5a <_free_r+0x22>
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	4401      	add	r1, r0
 8004b9e:	6011      	str	r1, [r2, #0]
 8004ba0:	6053      	str	r3, [r2, #4]
 8004ba2:	e7da      	b.n	8004b5a <_free_r+0x22>
 8004ba4:	d902      	bls.n	8004bac <_free_r+0x74>
 8004ba6:	230c      	movs	r3, #12
 8004ba8:	602b      	str	r3, [r5, #0]
 8004baa:	e7d6      	b.n	8004b5a <_free_r+0x22>
 8004bac:	6820      	ldr	r0, [r4, #0]
 8004bae:	1821      	adds	r1, r4, r0
 8004bb0:	428b      	cmp	r3, r1
 8004bb2:	bf01      	itttt	eq
 8004bb4:	6819      	ldreq	r1, [r3, #0]
 8004bb6:	685b      	ldreq	r3, [r3, #4]
 8004bb8:	1809      	addeq	r1, r1, r0
 8004bba:	6021      	streq	r1, [r4, #0]
 8004bbc:	6063      	str	r3, [r4, #4]
 8004bbe:	6054      	str	r4, [r2, #4]
 8004bc0:	e7cb      	b.n	8004b5a <_free_r+0x22>
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
 8004bc4:	20000168 	.word	0x20000168

08004bc8 <sbrk_aligned>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	4e0e      	ldr	r6, [pc, #56]	; (8004c04 <sbrk_aligned+0x3c>)
 8004bcc:	460c      	mov	r4, r1
 8004bce:	6831      	ldr	r1, [r6, #0]
 8004bd0:	4605      	mov	r5, r0
 8004bd2:	b911      	cbnz	r1, 8004bda <sbrk_aligned+0x12>
 8004bd4:	f000 f8bc 	bl	8004d50 <_sbrk_r>
 8004bd8:	6030      	str	r0, [r6, #0]
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 f8b7 	bl	8004d50 <_sbrk_r>
 8004be2:	1c43      	adds	r3, r0, #1
 8004be4:	d00a      	beq.n	8004bfc <sbrk_aligned+0x34>
 8004be6:	1cc4      	adds	r4, r0, #3
 8004be8:	f024 0403 	bic.w	r4, r4, #3
 8004bec:	42a0      	cmp	r0, r4
 8004bee:	d007      	beq.n	8004c00 <sbrk_aligned+0x38>
 8004bf0:	1a21      	subs	r1, r4, r0
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 f8ac 	bl	8004d50 <_sbrk_r>
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d101      	bne.n	8004c00 <sbrk_aligned+0x38>
 8004bfc:	f04f 34ff 	mov.w	r4, #4294967295
 8004c00:	4620      	mov	r0, r4
 8004c02:	bd70      	pop	{r4, r5, r6, pc}
 8004c04:	2000016c 	.word	0x2000016c

08004c08 <_malloc_r>:
 8004c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0c:	1ccd      	adds	r5, r1, #3
 8004c0e:	f025 0503 	bic.w	r5, r5, #3
 8004c12:	3508      	adds	r5, #8
 8004c14:	2d0c      	cmp	r5, #12
 8004c16:	bf38      	it	cc
 8004c18:	250c      	movcc	r5, #12
 8004c1a:	2d00      	cmp	r5, #0
 8004c1c:	4607      	mov	r7, r0
 8004c1e:	db01      	blt.n	8004c24 <_malloc_r+0x1c>
 8004c20:	42a9      	cmp	r1, r5
 8004c22:	d905      	bls.n	8004c30 <_malloc_r+0x28>
 8004c24:	230c      	movs	r3, #12
 8004c26:	2600      	movs	r6, #0
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c30:	4e2e      	ldr	r6, [pc, #184]	; (8004cec <_malloc_r+0xe4>)
 8004c32:	f000 f89d 	bl	8004d70 <__malloc_lock>
 8004c36:	6833      	ldr	r3, [r6, #0]
 8004c38:	461c      	mov	r4, r3
 8004c3a:	bb34      	cbnz	r4, 8004c8a <_malloc_r+0x82>
 8004c3c:	4629      	mov	r1, r5
 8004c3e:	4638      	mov	r0, r7
 8004c40:	f7ff ffc2 	bl	8004bc8 <sbrk_aligned>
 8004c44:	1c43      	adds	r3, r0, #1
 8004c46:	4604      	mov	r4, r0
 8004c48:	d14d      	bne.n	8004ce6 <_malloc_r+0xde>
 8004c4a:	6834      	ldr	r4, [r6, #0]
 8004c4c:	4626      	mov	r6, r4
 8004c4e:	2e00      	cmp	r6, #0
 8004c50:	d140      	bne.n	8004cd4 <_malloc_r+0xcc>
 8004c52:	6823      	ldr	r3, [r4, #0]
 8004c54:	4631      	mov	r1, r6
 8004c56:	4638      	mov	r0, r7
 8004c58:	eb04 0803 	add.w	r8, r4, r3
 8004c5c:	f000 f878 	bl	8004d50 <_sbrk_r>
 8004c60:	4580      	cmp	r8, r0
 8004c62:	d13a      	bne.n	8004cda <_malloc_r+0xd2>
 8004c64:	6821      	ldr	r1, [r4, #0]
 8004c66:	3503      	adds	r5, #3
 8004c68:	1a6d      	subs	r5, r5, r1
 8004c6a:	f025 0503 	bic.w	r5, r5, #3
 8004c6e:	3508      	adds	r5, #8
 8004c70:	2d0c      	cmp	r5, #12
 8004c72:	bf38      	it	cc
 8004c74:	250c      	movcc	r5, #12
 8004c76:	4638      	mov	r0, r7
 8004c78:	4629      	mov	r1, r5
 8004c7a:	f7ff ffa5 	bl	8004bc8 <sbrk_aligned>
 8004c7e:	3001      	adds	r0, #1
 8004c80:	d02b      	beq.n	8004cda <_malloc_r+0xd2>
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	442b      	add	r3, r5
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	e00e      	b.n	8004ca8 <_malloc_r+0xa0>
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	1b52      	subs	r2, r2, r5
 8004c8e:	d41e      	bmi.n	8004cce <_malloc_r+0xc6>
 8004c90:	2a0b      	cmp	r2, #11
 8004c92:	d916      	bls.n	8004cc2 <_malloc_r+0xba>
 8004c94:	1961      	adds	r1, r4, r5
 8004c96:	42a3      	cmp	r3, r4
 8004c98:	6025      	str	r5, [r4, #0]
 8004c9a:	bf18      	it	ne
 8004c9c:	6059      	strne	r1, [r3, #4]
 8004c9e:	6863      	ldr	r3, [r4, #4]
 8004ca0:	bf08      	it	eq
 8004ca2:	6031      	streq	r1, [r6, #0]
 8004ca4:	5162      	str	r2, [r4, r5]
 8004ca6:	604b      	str	r3, [r1, #4]
 8004ca8:	4638      	mov	r0, r7
 8004caa:	f104 060b 	add.w	r6, r4, #11
 8004cae:	f000 f865 	bl	8004d7c <__malloc_unlock>
 8004cb2:	f026 0607 	bic.w	r6, r6, #7
 8004cb6:	1d23      	adds	r3, r4, #4
 8004cb8:	1af2      	subs	r2, r6, r3
 8004cba:	d0b6      	beq.n	8004c2a <_malloc_r+0x22>
 8004cbc:	1b9b      	subs	r3, r3, r6
 8004cbe:	50a3      	str	r3, [r4, r2]
 8004cc0:	e7b3      	b.n	8004c2a <_malloc_r+0x22>
 8004cc2:	6862      	ldr	r2, [r4, #4]
 8004cc4:	42a3      	cmp	r3, r4
 8004cc6:	bf0c      	ite	eq
 8004cc8:	6032      	streq	r2, [r6, #0]
 8004cca:	605a      	strne	r2, [r3, #4]
 8004ccc:	e7ec      	b.n	8004ca8 <_malloc_r+0xa0>
 8004cce:	4623      	mov	r3, r4
 8004cd0:	6864      	ldr	r4, [r4, #4]
 8004cd2:	e7b2      	b.n	8004c3a <_malloc_r+0x32>
 8004cd4:	4634      	mov	r4, r6
 8004cd6:	6876      	ldr	r6, [r6, #4]
 8004cd8:	e7b9      	b.n	8004c4e <_malloc_r+0x46>
 8004cda:	230c      	movs	r3, #12
 8004cdc:	4638      	mov	r0, r7
 8004cde:	603b      	str	r3, [r7, #0]
 8004ce0:	f000 f84c 	bl	8004d7c <__malloc_unlock>
 8004ce4:	e7a1      	b.n	8004c2a <_malloc_r+0x22>
 8004ce6:	6025      	str	r5, [r4, #0]
 8004ce8:	e7de      	b.n	8004ca8 <_malloc_r+0xa0>
 8004cea:	bf00      	nop
 8004cec:	20000168 	.word	0x20000168

08004cf0 <_realloc_r>:
 8004cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cf4:	4680      	mov	r8, r0
 8004cf6:	4614      	mov	r4, r2
 8004cf8:	460e      	mov	r6, r1
 8004cfa:	b921      	cbnz	r1, 8004d06 <_realloc_r+0x16>
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d02:	f7ff bf81 	b.w	8004c08 <_malloc_r>
 8004d06:	b92a      	cbnz	r2, 8004d14 <_realloc_r+0x24>
 8004d08:	f7ff ff16 	bl	8004b38 <_free_r>
 8004d0c:	4625      	mov	r5, r4
 8004d0e:	4628      	mov	r0, r5
 8004d10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d14:	f000 f838 	bl	8004d88 <_malloc_usable_size_r>
 8004d18:	4284      	cmp	r4, r0
 8004d1a:	4607      	mov	r7, r0
 8004d1c:	d802      	bhi.n	8004d24 <_realloc_r+0x34>
 8004d1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d22:	d812      	bhi.n	8004d4a <_realloc_r+0x5a>
 8004d24:	4621      	mov	r1, r4
 8004d26:	4640      	mov	r0, r8
 8004d28:	f7ff ff6e 	bl	8004c08 <_malloc_r>
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d0ed      	beq.n	8004d0e <_realloc_r+0x1e>
 8004d32:	42bc      	cmp	r4, r7
 8004d34:	4622      	mov	r2, r4
 8004d36:	4631      	mov	r1, r6
 8004d38:	bf28      	it	cs
 8004d3a:	463a      	movcs	r2, r7
 8004d3c:	f7ff fed4 	bl	8004ae8 <memcpy>
 8004d40:	4631      	mov	r1, r6
 8004d42:	4640      	mov	r0, r8
 8004d44:	f7ff fef8 	bl	8004b38 <_free_r>
 8004d48:	e7e1      	b.n	8004d0e <_realloc_r+0x1e>
 8004d4a:	4635      	mov	r5, r6
 8004d4c:	e7df      	b.n	8004d0e <_realloc_r+0x1e>
	...

08004d50 <_sbrk_r>:
 8004d50:	b538      	push	{r3, r4, r5, lr}
 8004d52:	2300      	movs	r3, #0
 8004d54:	4d05      	ldr	r5, [pc, #20]	; (8004d6c <_sbrk_r+0x1c>)
 8004d56:	4604      	mov	r4, r0
 8004d58:	4608      	mov	r0, r1
 8004d5a:	602b      	str	r3, [r5, #0]
 8004d5c:	f7fc fdac 	bl	80018b8 <_sbrk>
 8004d60:	1c43      	adds	r3, r0, #1
 8004d62:	d102      	bne.n	8004d6a <_sbrk_r+0x1a>
 8004d64:	682b      	ldr	r3, [r5, #0]
 8004d66:	b103      	cbz	r3, 8004d6a <_sbrk_r+0x1a>
 8004d68:	6023      	str	r3, [r4, #0]
 8004d6a:	bd38      	pop	{r3, r4, r5, pc}
 8004d6c:	20000170 	.word	0x20000170

08004d70 <__malloc_lock>:
 8004d70:	4801      	ldr	r0, [pc, #4]	; (8004d78 <__malloc_lock+0x8>)
 8004d72:	f000 b811 	b.w	8004d98 <__retarget_lock_acquire_recursive>
 8004d76:	bf00      	nop
 8004d78:	20000174 	.word	0x20000174

08004d7c <__malloc_unlock>:
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <__malloc_unlock+0x8>)
 8004d7e:	f000 b80c 	b.w	8004d9a <__retarget_lock_release_recursive>
 8004d82:	bf00      	nop
 8004d84:	20000174 	.word	0x20000174

08004d88 <_malloc_usable_size_r>:
 8004d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d8c:	1f18      	subs	r0, r3, #4
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	bfbc      	itt	lt
 8004d92:	580b      	ldrlt	r3, [r1, r0]
 8004d94:	18c0      	addlt	r0, r0, r3
 8004d96:	4770      	bx	lr

08004d98 <__retarget_lock_acquire_recursive>:
 8004d98:	4770      	bx	lr

08004d9a <__retarget_lock_release_recursive>:
 8004d9a:	4770      	bx	lr

08004d9c <atan2>:
 8004d9c:	f000 b800 	b.w	8004da0 <__ieee754_atan2>

08004da0 <__ieee754_atan2>:
 8004da0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da4:	4692      	mov	sl, r2
 8004da6:	4699      	mov	r9, r3
 8004da8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dac:	461f      	mov	r7, r3
 8004dae:	f1ca 0300 	rsb	r3, sl, #0
 8004db2:	f8df e184 	ldr.w	lr, [pc, #388]	; 8004f38 <__ieee754_atan2+0x198>
 8004db6:	ea43 030a 	orr.w	r3, r3, sl
 8004dba:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004dbe:	4573      	cmp	r3, lr
 8004dc0:	4604      	mov	r4, r0
 8004dc2:	460d      	mov	r5, r1
 8004dc4:	d808      	bhi.n	8004dd8 <__ieee754_atan2+0x38>
 8004dc6:	4246      	negs	r6, r0
 8004dc8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004dcc:	4306      	orrs	r6, r0
 8004dce:	ea43 76d6 	orr.w	r6, r3, r6, lsr #31
 8004dd2:	4576      	cmp	r6, lr
 8004dd4:	468c      	mov	ip, r1
 8004dd6:	d908      	bls.n	8004dea <__ieee754_atan2+0x4a>
 8004dd8:	4652      	mov	r2, sl
 8004dda:	464b      	mov	r3, r9
 8004ddc:	4620      	mov	r0, r4
 8004dde:	4629      	mov	r1, r5
 8004de0:	f7fb fa28 	bl	8000234 <__adddf3>
 8004de4:	4604      	mov	r4, r0
 8004de6:	460d      	mov	r5, r1
 8004de8:	e019      	b.n	8004e1e <__ieee754_atan2+0x7e>
 8004dea:	f109 4640 	add.w	r6, r9, #3221225472	; 0xc0000000
 8004dee:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8004df2:	ea56 060a 	orrs.w	r6, r6, sl
 8004df6:	d103      	bne.n	8004e00 <__ieee754_atan2+0x60>
 8004df8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfc:	f000 b8a4 	b.w	8004f48 <atan>
 8004e00:	17be      	asrs	r6, r7, #30
 8004e02:	f006 0602 	and.w	r6, r6, #2
 8004e06:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8004e0a:	ea53 0100 	orrs.w	r1, r3, r0
 8004e0e:	d10a      	bne.n	8004e26 <__ieee754_atan2+0x86>
 8004e10:	2e02      	cmp	r6, #2
 8004e12:	d067      	beq.n	8004ee4 <__ieee754_atan2+0x144>
 8004e14:	2e03      	cmp	r6, #3
 8004e16:	d102      	bne.n	8004e1e <__ieee754_atan2+0x7e>
 8004e18:	a53b      	add	r5, pc, #236	; (adr r5, 8004f08 <__ieee754_atan2+0x168>)
 8004e1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004e1e:	4620      	mov	r0, r4
 8004e20:	4629      	mov	r1, r5
 8004e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e26:	ea52 010a 	orrs.w	r1, r2, sl
 8004e2a:	d106      	bne.n	8004e3a <__ieee754_atan2+0x9a>
 8004e2c:	f1bc 0f00 	cmp.w	ip, #0
 8004e30:	da63      	bge.n	8004efa <__ieee754_atan2+0x15a>
 8004e32:	a537      	add	r5, pc, #220	; (adr r5, 8004f10 <__ieee754_atan2+0x170>)
 8004e34:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004e38:	e7f1      	b.n	8004e1e <__ieee754_atan2+0x7e>
 8004e3a:	4572      	cmp	r2, lr
 8004e3c:	d10f      	bne.n	8004e5e <__ieee754_atan2+0xbe>
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	f106 36ff 	add.w	r6, r6, #4294967295
 8004e44:	d107      	bne.n	8004e56 <__ieee754_atan2+0xb6>
 8004e46:	2e02      	cmp	r6, #2
 8004e48:	d850      	bhi.n	8004eec <__ieee754_atan2+0x14c>
 8004e4a:	4b3c      	ldr	r3, [pc, #240]	; (8004f3c <__ieee754_atan2+0x19c>)
 8004e4c:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004e50:	e9d6 4500 	ldrd	r4, r5, [r6]
 8004e54:	e7e3      	b.n	8004e1e <__ieee754_atan2+0x7e>
 8004e56:	2e02      	cmp	r6, #2
 8004e58:	d84c      	bhi.n	8004ef4 <__ieee754_atan2+0x154>
 8004e5a:	4b39      	ldr	r3, [pc, #228]	; (8004f40 <__ieee754_atan2+0x1a0>)
 8004e5c:	e7f6      	b.n	8004e4c <__ieee754_atan2+0xac>
 8004e5e:	4573      	cmp	r3, lr
 8004e60:	d0e4      	beq.n	8004e2c <__ieee754_atan2+0x8c>
 8004e62:	1a9b      	subs	r3, r3, r2
 8004e64:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004e68:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004e6c:	da20      	bge.n	8004eb0 <__ieee754_atan2+0x110>
 8004e6e:	2f00      	cmp	r7, #0
 8004e70:	da01      	bge.n	8004e76 <__ieee754_atan2+0xd6>
 8004e72:	323c      	adds	r2, #60	; 0x3c
 8004e74:	db20      	blt.n	8004eb8 <__ieee754_atan2+0x118>
 8004e76:	4652      	mov	r2, sl
 8004e78:	464b      	mov	r3, r9
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	f7fb fcb9 	bl	80007f4 <__aeabi_ddiv>
 8004e82:	f000 f9eb 	bl	800525c <fabs>
 8004e86:	f000 f85f 	bl	8004f48 <atan>
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	460d      	mov	r5, r1
 8004e8e:	2e01      	cmp	r6, #1
 8004e90:	d015      	beq.n	8004ebe <__ieee754_atan2+0x11e>
 8004e92:	2e02      	cmp	r6, #2
 8004e94:	d017      	beq.n	8004ec6 <__ieee754_atan2+0x126>
 8004e96:	2e00      	cmp	r6, #0
 8004e98:	d0c1      	beq.n	8004e1e <__ieee754_atan2+0x7e>
 8004e9a:	a31f      	add	r3, pc, #124	; (adr r3, 8004f18 <__ieee754_atan2+0x178>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb f9c4 	bl	8000230 <__aeabi_dsub>
 8004ea8:	a31d      	add	r3, pc, #116	; (adr r3, 8004f20 <__ieee754_atan2+0x180>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	e016      	b.n	8004ede <__ieee754_atan2+0x13e>
 8004eb0:	a51d      	add	r5, pc, #116	; (adr r5, 8004f28 <__ieee754_atan2+0x188>)
 8004eb2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004eb6:	e7ea      	b.n	8004e8e <__ieee754_atan2+0xee>
 8004eb8:	2400      	movs	r4, #0
 8004eba:	2500      	movs	r5, #0
 8004ebc:	e7e7      	b.n	8004e8e <__ieee754_atan2+0xee>
 8004ebe:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	e7ab      	b.n	8004e1e <__ieee754_atan2+0x7e>
 8004ec6:	a314      	add	r3, pc, #80	; (adr r3, 8004f18 <__ieee754_atan2+0x178>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	4620      	mov	r0, r4
 8004ece:	4629      	mov	r1, r5
 8004ed0:	f7fb f9ae 	bl	8000230 <__aeabi_dsub>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	a111      	add	r1, pc, #68	; (adr r1, 8004f20 <__ieee754_atan2+0x180>)
 8004eda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ede:	f7fb f9a7 	bl	8000230 <__aeabi_dsub>
 8004ee2:	e77f      	b.n	8004de4 <__ieee754_atan2+0x44>
 8004ee4:	a50e      	add	r5, pc, #56	; (adr r5, 8004f20 <__ieee754_atan2+0x180>)
 8004ee6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004eea:	e798      	b.n	8004e1e <__ieee754_atan2+0x7e>
 8004eec:	a510      	add	r5, pc, #64	; (adr r5, 8004f30 <__ieee754_atan2+0x190>)
 8004eee:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004ef2:	e794      	b.n	8004e1e <__ieee754_atan2+0x7e>
 8004ef4:	2400      	movs	r4, #0
 8004ef6:	2500      	movs	r5, #0
 8004ef8:	e791      	b.n	8004e1e <__ieee754_atan2+0x7e>
 8004efa:	a50b      	add	r5, pc, #44	; (adr r5, 8004f28 <__ieee754_atan2+0x188>)
 8004efc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004f00:	e78d      	b.n	8004e1e <__ieee754_atan2+0x7e>
 8004f02:	bf00      	nop
 8004f04:	f3af 8000 	nop.w
 8004f08:	54442d18 	.word	0x54442d18
 8004f0c:	c00921fb 	.word	0xc00921fb
 8004f10:	54442d18 	.word	0x54442d18
 8004f14:	bff921fb 	.word	0xbff921fb
 8004f18:	33145c07 	.word	0x33145c07
 8004f1c:	3ca1a626 	.word	0x3ca1a626
 8004f20:	54442d18 	.word	0x54442d18
 8004f24:	400921fb 	.word	0x400921fb
 8004f28:	54442d18 	.word	0x54442d18
 8004f2c:	3ff921fb 	.word	0x3ff921fb
 8004f30:	54442d18 	.word	0x54442d18
 8004f34:	3fe921fb 	.word	0x3fe921fb
 8004f38:	7ff00000 	.word	0x7ff00000
 8004f3c:	080058e8 	.word	0x080058e8
 8004f40:	08005900 	.word	0x08005900
 8004f44:	00000000 	.word	0x00000000

08004f48 <atan>:
 8004f48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	4bb6      	ldr	r3, [pc, #728]	; (8005228 <atan+0x2e0>)
 8004f4e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004f52:	429e      	cmp	r6, r3
 8004f54:	4604      	mov	r4, r0
 8004f56:	460d      	mov	r5, r1
 8004f58:	468b      	mov	fp, r1
 8004f5a:	dd17      	ble.n	8004f8c <atan+0x44>
 8004f5c:	4bb3      	ldr	r3, [pc, #716]	; (800522c <atan+0x2e4>)
 8004f5e:	429e      	cmp	r6, r3
 8004f60:	dc01      	bgt.n	8004f66 <atan+0x1e>
 8004f62:	d109      	bne.n	8004f78 <atan+0x30>
 8004f64:	b140      	cbz	r0, 8004f78 <atan+0x30>
 8004f66:	4622      	mov	r2, r4
 8004f68:	462b      	mov	r3, r5
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4629      	mov	r1, r5
 8004f6e:	f7fb f961 	bl	8000234 <__adddf3>
 8004f72:	4604      	mov	r4, r0
 8004f74:	460d      	mov	r5, r1
 8004f76:	e005      	b.n	8004f84 <atan+0x3c>
 8004f78:	f1bb 0f00 	cmp.w	fp, #0
 8004f7c:	4cac      	ldr	r4, [pc, #688]	; (8005230 <atan+0x2e8>)
 8004f7e:	f300 8121 	bgt.w	80051c4 <atan+0x27c>
 8004f82:	4dac      	ldr	r5, [pc, #688]	; (8005234 <atan+0x2ec>)
 8004f84:	4620      	mov	r0, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f8c:	4baa      	ldr	r3, [pc, #680]	; (8005238 <atan+0x2f0>)
 8004f8e:	429e      	cmp	r6, r3
 8004f90:	dc11      	bgt.n	8004fb6 <atan+0x6e>
 8004f92:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8004f96:	429e      	cmp	r6, r3
 8004f98:	dc0a      	bgt.n	8004fb0 <atan+0x68>
 8004f9a:	a38b      	add	r3, pc, #556	; (adr r3, 80051c8 <atan+0x280>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb f948 	bl	8000234 <__adddf3>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	4ba5      	ldr	r3, [pc, #660]	; (800523c <atan+0x2f4>)
 8004fa8:	f7fb fd8a 	bl	8000ac0 <__aeabi_dcmpgt>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	d1e9      	bne.n	8004f84 <atan+0x3c>
 8004fb0:	f04f 3aff 	mov.w	sl, #4294967295
 8004fb4:	e027      	b.n	8005006 <atan+0xbe>
 8004fb6:	f000 f951 	bl	800525c <fabs>
 8004fba:	4ba1      	ldr	r3, [pc, #644]	; (8005240 <atan+0x2f8>)
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	429e      	cmp	r6, r3
 8004fc0:	460d      	mov	r5, r1
 8004fc2:	f300 80b8 	bgt.w	8005136 <atan+0x1ee>
 8004fc6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004fca:	429e      	cmp	r6, r3
 8004fcc:	f300 809c 	bgt.w	8005108 <atan+0x1c0>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	f7fb f92e 	bl	8000234 <__adddf3>
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4b98      	ldr	r3, [pc, #608]	; (800523c <atan+0x2f4>)
 8004fdc:	f7fb f928 	bl	8000230 <__aeabi_dsub>
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4606      	mov	r6, r0
 8004fe4:	460f      	mov	r7, r1
 8004fe6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fea:	4620      	mov	r0, r4
 8004fec:	4629      	mov	r1, r5
 8004fee:	f7fb f921 	bl	8000234 <__adddf3>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	4639      	mov	r1, r7
 8004ffa:	f7fb fbfb 	bl	80007f4 <__aeabi_ddiv>
 8004ffe:	f04f 0a00 	mov.w	sl, #0
 8005002:	4604      	mov	r4, r0
 8005004:	460d      	mov	r5, r1
 8005006:	4622      	mov	r2, r4
 8005008:	462b      	mov	r3, r5
 800500a:	4620      	mov	r0, r4
 800500c:	4629      	mov	r1, r5
 800500e:	f7fb fac7 	bl	80005a0 <__aeabi_dmul>
 8005012:	4602      	mov	r2, r0
 8005014:	460b      	mov	r3, r1
 8005016:	4680      	mov	r8, r0
 8005018:	4689      	mov	r9, r1
 800501a:	f7fb fac1 	bl	80005a0 <__aeabi_dmul>
 800501e:	a36c      	add	r3, pc, #432	; (adr r3, 80051d0 <atan+0x288>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	4606      	mov	r6, r0
 8005026:	460f      	mov	r7, r1
 8005028:	f7fb faba 	bl	80005a0 <__aeabi_dmul>
 800502c:	a36a      	add	r3, pc, #424	; (adr r3, 80051d8 <atan+0x290>)
 800502e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005032:	f7fb f8ff 	bl	8000234 <__adddf3>
 8005036:	4632      	mov	r2, r6
 8005038:	463b      	mov	r3, r7
 800503a:	f7fb fab1 	bl	80005a0 <__aeabi_dmul>
 800503e:	a368      	add	r3, pc, #416	; (adr r3, 80051e0 <atan+0x298>)
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb f8f6 	bl	8000234 <__adddf3>
 8005048:	4632      	mov	r2, r6
 800504a:	463b      	mov	r3, r7
 800504c:	f7fb faa8 	bl	80005a0 <__aeabi_dmul>
 8005050:	a365      	add	r3, pc, #404	; (adr r3, 80051e8 <atan+0x2a0>)
 8005052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005056:	f7fb f8ed 	bl	8000234 <__adddf3>
 800505a:	4632      	mov	r2, r6
 800505c:	463b      	mov	r3, r7
 800505e:	f7fb fa9f 	bl	80005a0 <__aeabi_dmul>
 8005062:	a363      	add	r3, pc, #396	; (adr r3, 80051f0 <atan+0x2a8>)
 8005064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005068:	f7fb f8e4 	bl	8000234 <__adddf3>
 800506c:	4632      	mov	r2, r6
 800506e:	463b      	mov	r3, r7
 8005070:	f7fb fa96 	bl	80005a0 <__aeabi_dmul>
 8005074:	a360      	add	r3, pc, #384	; (adr r3, 80051f8 <atan+0x2b0>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb f8db 	bl	8000234 <__adddf3>
 800507e:	4642      	mov	r2, r8
 8005080:	464b      	mov	r3, r9
 8005082:	f7fb fa8d 	bl	80005a0 <__aeabi_dmul>
 8005086:	a35e      	add	r3, pc, #376	; (adr r3, 8005200 <atan+0x2b8>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	4680      	mov	r8, r0
 800508e:	4689      	mov	r9, r1
 8005090:	4630      	mov	r0, r6
 8005092:	4639      	mov	r1, r7
 8005094:	f7fb fa84 	bl	80005a0 <__aeabi_dmul>
 8005098:	a35b      	add	r3, pc, #364	; (adr r3, 8005208 <atan+0x2c0>)
 800509a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509e:	f7fb f8c7 	bl	8000230 <__aeabi_dsub>
 80050a2:	4632      	mov	r2, r6
 80050a4:	463b      	mov	r3, r7
 80050a6:	f7fb fa7b 	bl	80005a0 <__aeabi_dmul>
 80050aa:	a359      	add	r3, pc, #356	; (adr r3, 8005210 <atan+0x2c8>)
 80050ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b0:	f7fb f8be 	bl	8000230 <__aeabi_dsub>
 80050b4:	4632      	mov	r2, r6
 80050b6:	463b      	mov	r3, r7
 80050b8:	f7fb fa72 	bl	80005a0 <__aeabi_dmul>
 80050bc:	a356      	add	r3, pc, #344	; (adr r3, 8005218 <atan+0x2d0>)
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	f7fb f8b5 	bl	8000230 <__aeabi_dsub>
 80050c6:	4632      	mov	r2, r6
 80050c8:	463b      	mov	r3, r7
 80050ca:	f7fb fa69 	bl	80005a0 <__aeabi_dmul>
 80050ce:	a354      	add	r3, pc, #336	; (adr r3, 8005220 <atan+0x2d8>)
 80050d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d4:	f7fb f8ac 	bl	8000230 <__aeabi_dsub>
 80050d8:	4632      	mov	r2, r6
 80050da:	463b      	mov	r3, r7
 80050dc:	f7fb fa60 	bl	80005a0 <__aeabi_dmul>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4640      	mov	r0, r8
 80050e6:	4649      	mov	r1, r9
 80050e8:	f7fb f8a4 	bl	8000234 <__adddf3>
 80050ec:	4622      	mov	r2, r4
 80050ee:	462b      	mov	r3, r5
 80050f0:	f7fb fa56 	bl	80005a0 <__aeabi_dmul>
 80050f4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	d144      	bne.n	8005188 <atan+0x240>
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb f895 	bl	8000230 <__aeabi_dsub>
 8005106:	e734      	b.n	8004f72 <atan+0x2a>
 8005108:	2200      	movs	r2, #0
 800510a:	4b4c      	ldr	r3, [pc, #304]	; (800523c <atan+0x2f4>)
 800510c:	f7fb f890 	bl	8000230 <__aeabi_dsub>
 8005110:	2200      	movs	r2, #0
 8005112:	4606      	mov	r6, r0
 8005114:	460f      	mov	r7, r1
 8005116:	4620      	mov	r0, r4
 8005118:	4629      	mov	r1, r5
 800511a:	4b48      	ldr	r3, [pc, #288]	; (800523c <atan+0x2f4>)
 800511c:	f7fb f88a 	bl	8000234 <__adddf3>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4630      	mov	r0, r6
 8005126:	4639      	mov	r1, r7
 8005128:	f7fb fb64 	bl	80007f4 <__aeabi_ddiv>
 800512c:	f04f 0a01 	mov.w	sl, #1
 8005130:	4604      	mov	r4, r0
 8005132:	460d      	mov	r5, r1
 8005134:	e767      	b.n	8005006 <atan+0xbe>
 8005136:	4b43      	ldr	r3, [pc, #268]	; (8005244 <atan+0x2fc>)
 8005138:	429e      	cmp	r6, r3
 800513a:	da1a      	bge.n	8005172 <atan+0x22a>
 800513c:	2200      	movs	r2, #0
 800513e:	4b42      	ldr	r3, [pc, #264]	; (8005248 <atan+0x300>)
 8005140:	f7fb f876 	bl	8000230 <__aeabi_dsub>
 8005144:	2200      	movs	r2, #0
 8005146:	4606      	mov	r6, r0
 8005148:	460f      	mov	r7, r1
 800514a:	4620      	mov	r0, r4
 800514c:	4629      	mov	r1, r5
 800514e:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <atan+0x300>)
 8005150:	f7fb fa26 	bl	80005a0 <__aeabi_dmul>
 8005154:	2200      	movs	r2, #0
 8005156:	4b39      	ldr	r3, [pc, #228]	; (800523c <atan+0x2f4>)
 8005158:	f7fb f86c 	bl	8000234 <__adddf3>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f7fb fb46 	bl	80007f4 <__aeabi_ddiv>
 8005168:	f04f 0a02 	mov.w	sl, #2
 800516c:	4604      	mov	r4, r0
 800516e:	460d      	mov	r5, r1
 8005170:	e749      	b.n	8005006 <atan+0xbe>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	2000      	movs	r0, #0
 8005178:	4934      	ldr	r1, [pc, #208]	; (800524c <atan+0x304>)
 800517a:	f7fb fb3b 	bl	80007f4 <__aeabi_ddiv>
 800517e:	f04f 0a03 	mov.w	sl, #3
 8005182:	4604      	mov	r4, r0
 8005184:	460d      	mov	r5, r1
 8005186:	e73e      	b.n	8005006 <atan+0xbe>
 8005188:	4b31      	ldr	r3, [pc, #196]	; (8005250 <atan+0x308>)
 800518a:	4e32      	ldr	r6, [pc, #200]	; (8005254 <atan+0x30c>)
 800518c:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005190:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8005194:	e9da 2300 	ldrd	r2, r3, [sl]
 8005198:	f7fb f84a 	bl	8000230 <__aeabi_dsub>
 800519c:	4622      	mov	r2, r4
 800519e:	462b      	mov	r3, r5
 80051a0:	f7fb f846 	bl	8000230 <__aeabi_dsub>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	e9d6 0100 	ldrd	r0, r1, [r6]
 80051ac:	f7fb f840 	bl	8000230 <__aeabi_dsub>
 80051b0:	f1bb 0f00 	cmp.w	fp, #0
 80051b4:	4604      	mov	r4, r0
 80051b6:	460d      	mov	r5, r1
 80051b8:	f6bf aee4 	bge.w	8004f84 <atan+0x3c>
 80051bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80051c0:	461d      	mov	r5, r3
 80051c2:	e6df      	b.n	8004f84 <atan+0x3c>
 80051c4:	4d24      	ldr	r5, [pc, #144]	; (8005258 <atan+0x310>)
 80051c6:	e6dd      	b.n	8004f84 <atan+0x3c>
 80051c8:	8800759c 	.word	0x8800759c
 80051cc:	7e37e43c 	.word	0x7e37e43c
 80051d0:	e322da11 	.word	0xe322da11
 80051d4:	3f90ad3a 	.word	0x3f90ad3a
 80051d8:	24760deb 	.word	0x24760deb
 80051dc:	3fa97b4b 	.word	0x3fa97b4b
 80051e0:	a0d03d51 	.word	0xa0d03d51
 80051e4:	3fb10d66 	.word	0x3fb10d66
 80051e8:	c54c206e 	.word	0xc54c206e
 80051ec:	3fb745cd 	.word	0x3fb745cd
 80051f0:	920083ff 	.word	0x920083ff
 80051f4:	3fc24924 	.word	0x3fc24924
 80051f8:	5555550d 	.word	0x5555550d
 80051fc:	3fd55555 	.word	0x3fd55555
 8005200:	2c6a6c2f 	.word	0x2c6a6c2f
 8005204:	bfa2b444 	.word	0xbfa2b444
 8005208:	52defd9a 	.word	0x52defd9a
 800520c:	3fadde2d 	.word	0x3fadde2d
 8005210:	af749a6d 	.word	0xaf749a6d
 8005214:	3fb3b0f2 	.word	0x3fb3b0f2
 8005218:	fe231671 	.word	0xfe231671
 800521c:	3fbc71c6 	.word	0x3fbc71c6
 8005220:	9998ebc4 	.word	0x9998ebc4
 8005224:	3fc99999 	.word	0x3fc99999
 8005228:	440fffff 	.word	0x440fffff
 800522c:	7ff00000 	.word	0x7ff00000
 8005230:	54442d18 	.word	0x54442d18
 8005234:	bff921fb 	.word	0xbff921fb
 8005238:	3fdbffff 	.word	0x3fdbffff
 800523c:	3ff00000 	.word	0x3ff00000
 8005240:	3ff2ffff 	.word	0x3ff2ffff
 8005244:	40038000 	.word	0x40038000
 8005248:	3ff80000 	.word	0x3ff80000
 800524c:	bff00000 	.word	0xbff00000
 8005250:	08005938 	.word	0x08005938
 8005254:	08005918 	.word	0x08005918
 8005258:	3ff921fb 	.word	0x3ff921fb

0800525c <fabs>:
 800525c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005260:	4770      	bx	lr
	...

08005264 <_init>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	bf00      	nop
 8005268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526a:	bc08      	pop	{r3}
 800526c:	469e      	mov	lr, r3
 800526e:	4770      	bx	lr

08005270 <_fini>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr
